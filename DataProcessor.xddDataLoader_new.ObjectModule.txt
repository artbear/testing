
Процедура СохранитьНастройки() Экспорт
	ХранилищеОбщихНастроек.Сохранить("ЗагрузчикДанных", "ЗагружаемыеДанные", ЗагружаемыеДанные);
КонецПроцедуры

Процедура ВосстановитьНастройки() Экспорт
	ЗагружаемыеДанные = ХранилищеОбщихНастроек.Загрузить("ЗагрузчикДанных", "ЗагружаемыеДанные");	
КонецПроцедуры

Процедура ОчиститьБазу() Экспорт
	УстановитьМонопольныйРежим(Истина);
	УдалитьДанныеИнформационнойБазы();
КонецПроцедуры




Функция СоздатьДанныеПоТабличномуДокументу(Макет) Экспорт
	
	ПеременныеТекущегоСценария = Новый Структура;
	СтэкГруппировок = Новый Массив;
	СтэкГруппировок.Добавить(Новый Структура);
	
	Для счСтр = 1 по Макет.ВысотаТаблицы Цикл
		// Читаем первую колонку макета - шапка данных
		ИмяПараметра = Макет.Область(счСтр, 1).Текст;
		ЗначениеПараметра = Макет.Область(счСтр, 2).Текст;
		Если ПустаяСтрока(ИмяПараметра) Тогда
			Продолжить;
		КонецЕсли;
		
		ТипПеременной = Неопределено;
		ИмяПеременной = Неопределено;
		
		ИмяПараметра = ВРЕГ(СокрЛП(ИмяПараметра));
		ЗначениеПараметра = СокрЛП(ЗначениеПараметра);
		
		Пока ЗначениеЗаполнено(ИмяПараметра) Цикл
			
			Если ИмяПараметра = "ГРУППА" Тогда
				Родитель = СтэкГруппировок[СтэкГруппировок.ВГраница()];
				Наследник = Новый Структура;
				
				Родитель.Вставить(ЗначениеПараметра, Наследник);
				СтэкГруппировок.Добавить(Наследник);
				
				Прервать;
			ИначеЕсли ИмяПараметра = "КОНЕЦ" Тогда
				СтэкГруппировок.Удалить(СтэкГруппировок.ВГраница());
				Прервать;
			КонецЕсли;
			
			Если ИмяПараметра = "ТИП" Тогда
				ТипПеременной = ЗначениеПараметра;
			ИначеЕсли ИмяПараметра = "ИМЯ" Тогда
				ИмяПеременной = ЗначениеПараметра;
			КонецЕсли;
			
			счСтр = счСтр + 1;
			ИмяПараметра = врег(Макет.Область(счСтр, 1).Текст);
			ЗначениеПараметра = Макет.Область(счСтр, 2).Текст;
		КонецЦикла;
		
		Если ТипПеременной = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаИзМакета = ПрочитатьТаблицуЗначенийИзМакета(счСтр, Макет);
		
		НачСтрокаТаблицыВМакете = счСтр;
		КонСтрокаТаблицыВМакете = НачСтрокаТаблицыВМакете + ТаблицаИзМакета.Количество() + 2;
		
		СчСтр = КонСтрокаТаблицыВМакете;
		
		Попытка
			Результат = ЗаполнтьДанныеВТаблицеБДПоТаблицеИзМакета(ТаблицаИзМакета, ТипПеременной);
		Исключение
			СистемноеОписаниеОшибки = ОписаниеОшибки();
			ПользовательскоеОписаниеОшибки = "Ошибка при создании данных из макета в строках с "+НачСтрокаТаблицыВМакете + " по " + КонСтрокаТаблицыВМакете;
			Сообщить(ПользовательскоеОписаниеОшибки + " : " + СистемноеОписаниеОшибки, СтатусСообщения.ОченьВажное);
		КонецПопытки;
		
		Если ЗначениеЗаполнено(ИмяПеременной) Тогда
			СтэкГруппировок[СтэкГруппировок.ВГраница()].Вставить(ИмяПеременной, Результат);
		КонецЕсли;
		
		
	КонецЦикла;
	
	Возврат СтэкГруппировок[0];
КонецФункции

Функция ПрочитатьТаблицуЗначенийИзМакета(НачСтрокаМакета, Макет)
	// Читаем третью колонку макета - таблица данных
	// НачСтрокаМакета - содержит имена колонок таблицы, 
	// НачСтрока+1 - содержит описание типов (может быть незаполнено, тогда колонка может быть любого типа)
	ПоследняяКолонка = ПолучитьНомерПоследнейКолонкиШапкиТаблицы(Макет, НачСтрокаМакета);
	Для КонСтрокаМакета = НачСтрокаМакета + 1 По Макет.ВысотаТаблицы Цикл
		Для счКол = 3 По ПоследняяКолонка Цикл
			Если ПустаяСтрока(Макет.Область(КонСтрокаМакета+1, счКол).Текст) Тогда
				ЭтоКонецТаблицы = Истина;
				Продолжить;
			КонецЕсли;
			ЭтоКонецТаблицы = Ложь;
			Прервать;
		КонецЦикла;
		
		Если ЭтоКонецТаблицы Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть(НачСтрокаМакета,,КонСтрокаМакета);
	
	Попытка
		ТаблицаИзМакета = ПрочитатьТаблицуЗначенийИзОбластиМакета(Область);
	Исключение
		СистемноеОписаниеОшибки = ОписаниеОшибки();
		ПользовательскоеОписаниеОшибки = "Ошибка при создании данных из макета в строках с "+НачСтрокаМакета + " по " + КонСтрокаМакета;
		//ВызватьИсключение ПользовательскоеОписаниеОшибки + " : " + СистемноеОписаниеОшибки;
		Сообщить(ПользовательскоеОписаниеОшибки + " : " + СистемноеОписаниеОшибки, СтатусСообщения.ОченьВажное); 
		ТаблицаИзМакета = Новый ТаблицаЗначений;
	КонецПопытки;
	
	Возврат ТаблицаИзМакета;
	
КонецФункции
Функция ПолучитьНомерПоследнейКолонкиШапкиТаблицы(Макет, НомерСтрокиШапки)
	
	счКол = 3;
	Пока ЗначениеЗаполнено(Макет.Область(НомерСтрокиШапки, счКол+1).Текст) Цикл
		счКол=счКол+1;
	КонецЦикла;
	Возврат счКол;
	
КонецФункции
Функция ПрочитатьТаблицуЗначенийИзОбластиМакета(Область)
	
	ТаблицаИзМакета = Новый ТаблицаЗначений;
	Для счКол = 3 по Область.ШиринаТаблицы Цикл
		ИмяКолонки = Область.Область(1, счКол).Текст;
		Если ПустаяСтрока(ИмяКолонки) Тогда
			Прервать;
		КонецЕсли;
		
		ТипКолонки = Область.Область(2, счКол).Текст;
		Если ПустаяСтрока(ТипКолонки) Тогда
			ТаблицаИзМакета.Колонки.Добавить(ИмяКолонки);
		Иначе
			Попытка
				ТаблицаИзМакета.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов(ТипКолонки));
			Исключение
				ТаблицаИзМакета.Колонки.Добавить(ИмяКолонки);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Для счСтр = 3 по Область.ВысотаТаблицы Цикл
		
		НоваяСтрока = ТаблицаИзМакета.Добавить();
		Для счКол = 1 по ТаблицаИзМакета.Колонки.Количество() Цикл
			Колонка = ТаблицаИзМакета.Колонки[счКол-1];
			Значение = Область.Область(счСтр, счКол+2).Текст;
			ТипыКолонки = Колонка.ТипЗначения.Типы();
			
			Если ТипыКолонки.Количество() Тогда
				мдТип = Метаданные.НайтиПоТипу(ТипыКолонки[0]);
			ИначеЕсли Найти(Значение, "[Т]ДокументСсылка.") Тогда
				Значение = ДополнитьСтрокуИПрочитатьСтруктуру(Значение, "Н");
				мдТип = Метаданные.НайтиПоТипу(Тип(Значение.Т));
			ИначеЕсли Найти(Значение, "[Т]СправочникСсылка.") Тогда
				Значение = ДополнитьСтрокуИПрочитатьСтруктуру(Значение, "К");
				мдТип = Метаданные.НайтиПоТипу(Тип(Значение.Т));
			ИначеЕсли Найти(Значение, "[Т]ПеречислениеСсылка.") Тогда
				Значение = ДополнитьСтрокуИПрочитатьСтруктуру(Значение, "И");
				мдТип = Метаданные.НайтиПоТипу(Тип(Значение.Т));
				Значение = Значение.И;
			Иначе
				мдТип = Неопределено;
			КонецЕсли;
			
			Если Найти(Значение, "=") = 1 Тогда
				Значение = Вычислить(Сред(Значение, 2));
			ИначеЕсли мдТип = Неопределено Тогда
				Значение = Строка(Значение);
			ИначеЕсли Метаданные.Перечисления.Содержит(мдТип) Тогда
				Значение = НайтиПеречисление(Значение, мдТип);
				
			ИначеЕсли Метаданные.Справочники.Содержит(мдТип) Тогда
				Значение = НайтиСоздатьОбъектСКодом(Значение, мдТип);
			ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(мдТип) Тогда
				Значение = НайтиСоздатьОбъектСКодом(Значение, мдТип);
				
			ИначеЕсли Метаданные.Документы.Содержит(мдТип) Тогда
				Значение = НайтиСоздатьОбъектСНомером(Значение, мдТип);
			ИначеЕсли Метаданные.Задачи.Содержит(мдТип) Тогда
				Значение = НайтиСоздатьОбъектСНомером(Значение, мдТип);
			ИначеЕсли Метаданные.БизнесПроцессы.Содержит(мдТип) Тогда
				Значение = НайтиСоздатьОбъектСНомером(Значение, мдТип);
			КонецЕсли;
			
			НоваяСтрока[Колонка.Имя] = Значение;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаИзМакета;
КонецФункции


Функция НайтиПеречисление(Идентификатор, ТипМетаданных)
	Если ПустаяСтрока(Идентификатор) Тогда
		Возврат Перечисления[ТипМетаданных.Имя].ПустаяСсылка();
	КонецЕсли;
	Возврат  Перечисления[ТипМетаданных.Имя][Идентификатор];
КонецФункции
Функция НайтиСоздатьОбъектСКодом(Код, ТипМетаданных)
	Если Метаданные.Справочники.Содержит(ТипМетаданных) Тогда
		Менеджер = Справочники[ТипМетаданных.Имя];
		МетодПоискаПоНаименованию = "НайтиПоНаименованию(СтруктураПоиска.Н,Истина,Родитель,Владелец)";
		МетодПоискаПоКоду = "НайтиПоКоду(СтруктураПоиска.К,Ложь,Родитель,Владелец)";
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ТипМетаданных) Тогда
		Менеджер = ПланыВидовХарактеристик[ТипМетаданных.Имя];
		МетодПоискаПоНаименованию = "НайтиПоНаименованию(СтруктураПоиска.Н,Истина,Родитель)";
		МетодПоискаПоКоду = "НайтиПоКоду(СтруктураПоиска.К,Родитель)";
	КонецЕсли;
	
	Если ПустаяСтрока(Код) Тогда
		Возврат Менеджер.ПустаяСсылка();
	КонецЕсли;
	
	Если ТипЗнч(Код) = Тип("Строка") Тогда
		СтруктураПоиска = ДополнитьСтрокуИПрочитатьСтруктуру(Код, "К"); 
	Иначе
		СтруктураПоиска = Код;
	КонецЕсли;
	Если СтруктураПоиска.Свойство("Р") Тогда
		Родитель = НайтиСоздатьОбъектСКодом(СтруктураПоиска.Р, ТипМетаданных);
	КонецЕсли;
	Если СтруктураПоиска.Свойство("В") И СтруктураПоиска.В.Свойство("Т") Тогда
		ТипМетаданныхВладельца = Метаданные.НайтиПоТипу(Тип(СтруктураПоиска.В.Т));
		Владелец = НайтиСоздатьОбъектСКодом(СтруктураПоиска.В, ТипМетаданныхВладельца);
	КонецЕсли;
	
	ЭтоОбъектБезКода = ТипМетаданных.ДлинаКода = 0;
	Если ЭтоОбъектБезКода Тогда
		Ссылка = Вычислить("Менеджер."+МетодПоискаПоНаименованию);
	Иначе
		Ссылка = Вычислить("Менеджер."+МетодПоискаПоКоду);
	КонецЕсли;
	
	Если НЕ Ссылка.Пустая() Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	Если СтруктураПоиска.Свойство("Г") Тогда
		Объект = Менеджер.СоздатьГруппу();
	Иначе
		Объект = Менеджер.СоздатьЭлемент();
	КонецЕсли;
	
	Если НЕ СтруктураПоиска.Свойство("Н") Тогда
		СтруктураПоиска.Вставить("Н", СтруктураПоиска.К);
	КонецЕсли;
	
	Буфер = Новый Структура;
	Если СтруктураПоиска.Свойство("Н") Тогда
		Буфер.Вставить("Наименование", СтруктураПоиска.Н);
	КонецЕсли;
	Если СтруктураПоиска.Свойство("К") Тогда
		Буфер.Вставить("Код", СтруктураПоиска.К);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Объект, Буфер);
	Если ЗначениеЗаполнено(Родитель) Тогда
		Объект.Родитель = Родитель;
	КонецЕсли;
	Если ЗначениеЗаполнено(Владелец) Тогда
		Объект.Владелец = Владелец;
	КонецЕсли;
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.Записать();
	
	Возврат Объект.Ссылка;
	
КонецФункции
Функция НайтиСоздатьОбъектСНомером(Номер, ТипМетаданных)
	
	Если Метаданные.Документы.Содержит(ТипМетаданных) Тогда
		Менеджер = Документы[ТипМетаданных.Имя];
		МетодСоздания = "СоздатьДокумент";
	ИначеЕсли Метаданные.Задачи.Содержит(ТипМетаданных) Тогда
		Менеджер = Задачи[ТипМетаданных.Имя];
		МетодСоздания = "СоздатьЗадачу";
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(ТипМетаданных) Тогда
		Менеджер = БизнесПроцессы[ТипМетаданных.Имя];
		МетодСоздания = "СоздатьБизнесПроцесс";
	КонецЕсли;
	
	Если ПустаяСтрока(Номер) Тогда
		Возврат Менеджер.ПустаяСсылка();
	КонецЕсли;
	
	Если ТипЗнч(Номер) = Тип("Строка") Тогда
		СтруктураПоиска = ДополнитьСтрокуИПрочитатьСтруктуру(Номер, "Н"); // получили номер в формате {[Н]001[Д]20100921}
	Иначе
		СтруктураПоиска = Номер;
	КонецЕсли;
	
	Если СтруктураПоиска.Свойство("Д") Тогда
		ОбъектСсылка = Менеджер.НайтиПоНомеру(СтруктураПоиска.Н, СтруктураПоиска.Д);
	Иначе
		ОбъектСсылка = НайтиПоНомеру(Номер, ТипМетаданных.ПолноеИмя()); // для документов с периодичной нумерацией стандартный метод НайтиПоНомеру() не работает без указания даты, поэтому ищем запросом
		СтруктураПоиска.Вставить("Д", "20000101");
	КонецЕсли;
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Возврат ОбъектСсылка;
	КонецЕсли;
	
	ОбъектОбъект = Вычислить("Менеджер."+МетодСоздания + "()");
	ОбъектОбъект.Номер = СтруктураПоиска.Н;
	ОбъектОбъект.Дата = СтруктураПоиска.Д;
	ОбъектОбъект.ОбменДанными.Загрузка = Истина;
	ОбъектОбъект.Записать();
	Возврат ОбъектОбъект.Ссылка;
	
КонецФункции
Функция НайтиПоНомеру(Номер, ИмяТаблицы)
	Перем Запрос;
	Запрос = Новый Запрос;
	Запрос.Текст = "выбрать первые 1 т.Ссылка из ИмяТаблицы как т где т.Номер=&Номер";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицы", ИмяТаблицы);
	Запрос.УстановитьПараметр("Номер", Номер);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция ДополнитьСтрокуИПрочитатьСтруктуру(Строка, ПолеПоУмолчанию)
	СтрокаДляСтруктуры = Строка;
	Если НЕ Лев(СтрокаДляСтруктуры, 1) = "{" Тогда
		СтрокаДляСтруктуры = "{"+СтрокаДляСтруктуры+"}";
	КонецЕсли;
	ПолеПоУмолчаниюВСкобках = "[" + ПолеПоУмолчанию + "]";
	СтрокаДляСтруктуры = СтрЗаменить(СтрокаДляСтруктуры, "{", "{"+ПолеПоУмолчаниюВСкобках);
	СтрокаДляСтруктуры = СтрЗаменить(СтрокаДляСтруктуры, ПолеПоУмолчаниюВСкобках+"[", "[");
	Возврат ПрочитатьСтруктуруИзСтроки(СтрокаДляСтруктуры);
КонецФункции
Функция ПрочитатьСтруктуруИзСтроки(Строка, Позиция=1)
	СтруктураИзСтроки = Новый Структура;
	
	Символ = ПрочитатьСледующийСимволИзСтроки(Строка, Позиция);
	Пока Позиция <= СтрДлина(Строка) Цикл
		Если Символ = "}" Тогда
			Прервать;
		КонецЕсли;
		
		Ключ = ПрочитатьСловоИзСтроки(Строка, Позиция);
		
		Символ = ПрочитатьСледующийСимволИзСтроки(Строка, Позиция);
		Если Символ = "{" Тогда
			Значение = ПрочитатьСтруктуруИзСтроки(Строка, Позиция);
		Иначе
			Позиция=Позиция-1;
			Значение = ПрочитатьСловоИзСтроки(Строка, Позиция);
		КонецЕсли;
		
		СтруктураИзСтроки.Вставить(Ключ, Значение);
		
		Символ = ПрочитатьСледующийСимволИзСтроки(Строка, Позиция);
	КонецЦикла;
	
	Возврат СтруктураИзСтроки;
КонецФункции
Функция ПрочитатьСледующийСимволИзСтроки(Строка, Позиция)
	Позиция=Позиция+1;
	Возврат Сред(Строка, Позиция, 1);
КонецФункции
Функция ПрочитатьСловоИзСтроки(Строка, Позиция)
	Слово = "";
	Символ = ПрочитатьСледующийСимволИзСтроки(Строка, Позиция);
	Пока Позиция <= СтрДлина(Строка) Цикл
		Если Символ = "]" Тогда
			Прервать;
		ИначеЕсли Символ = "[" Тогда
			Позиция=Позиция-1;
			Прервать;
		ИначеЕсли Символ = "}" Тогда
			Позиция=Позиция-1;
			Прервать;
		КонецЕсли;
		Слово=Слово+Символ;
		Символ = ПрочитатьСледующийСимволИзСтроки(Строка, Позиция);
	КонецЦикла;
	
	Возврат Слово;
КонецФункции


Функция ЗаполнтьДанныеВТаблицеБДПоТаблицеИзМакета(ТаблицаИзМакета, ТипПеременной)
	ПостфиксМетода = Лев(ТипПеременной, Найти(ТипПеременной, ".")-1);
	Если ПустаяСтрока(ПостфиксМетода) Тогда
		ПостфиксМетода = ТипПеременной;
	КонецЕсли;
	ВидМетаданных = СтрЗаменить(ТипПеременной, ПостфиксМетода+".", "");
	
	Возврат Вычислить("ЗаполнитьИзТаблицыЗначений_" + ПостфиксМетода + "(ТаблицаИзМакета,ВидМетаданных)");
КонецФункции

Функция ЗаполнитьИзТаблицыЗначений_ТаблицаЗначений(ТаблицаИзМакета, Вид)
	Возврат ТаблицаИзМакета;
КонецФункции
Функция ЗаполнитьИзТаблицыЗначений_Структура(ТаблицаИзМакета, Вид)
	СтруктураИзМакета = Новый Структура;
	Для каждого Колонка из ТаблицаИзМакета.Колонки Цикл
		СтруктураИзМакета.Вставить(Колонка.Имя);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(СтруктураИзМакета, ТаблицаИзМакета[0]);
	Возврат СтруктураИзМакета;
КонецФункции
Функция ЗаполнитьИзТаблицыЗначений_Документ(ТаблицаИзМакета, Вид)
	Возврат ЗаполнитьИзТаблицыЗначений_Объект(ТаблицаИзМакета, Вид);
	
	Возврат ТаблицаИзМакета;
КонецФункции
Функция ЗаполнитьИзТаблицыЗначений_Справочник(ТаблицаИзМакета, Вид)
	Возврат ЗаполнитьИзТаблицыЗначений_Объект(ТаблицаИзМакета, Вид);
	
	Возврат ТаблицаИзМакета;
КонецФункции
Функция ЗаполнитьИзТаблицыЗначений_ПланВидовХарактеристик(ТаблицаИзМакета, Вид)
	Возврат ЗаполнитьИзТаблицыЗначений_Объект(ТаблицаИзМакета, Вид);
	
	Возврат ТаблицаИзМакета;
КонецФункции
Функция ЗаполнитьИзТаблицыЗначений_Задача(ТаблицаИзМакета, Вид)
	Возврат ЗаполнитьИзТаблицыЗначений_Объект(ТаблицаИзМакета, Вид);
	
	Возврат ТаблицаИзМакета;
КонецФункции
Функция ЗаполнитьИзТаблицыЗначений_БизнесПроцесс(ТаблицаИзМакета, Вид)
	Возврат ЗаполнитьИзТаблицыЗначений_Объект(ТаблицаИзМакета, Вид);
	
	Возврат ТаблицаИзМакета;
КонецФункции
Функция ЗаполнитьИзТаблицыЗначений_РегистрСведений(ТаблицаИзМакета, ИмяРегистра)
	Если НЕ ТаблицаИзМакета.Колонки.Найти("Регистратор") = Неопределено Тогда
		Возврат ЗаполнитьИзТаблицыЗначений_ДвиженияДокумента(ТаблицаИзМакета, ИмяРегистра);
	КонецЕсли;
	
	Для каждого Строка из ТаблицаИзМакета Цикл
		Менеджер = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Менеджер, Строка);
		Менеджер.Прочитать();
		ЗаполнитьЗначенияСвойств(Менеджер, Строка);
		Менеджер.Записать(Истина);
	КонецЦикла;
	
	Возврат ТаблицаИзМакета;
КонецФункции
Функция ЗаполнитьИзТаблицыЗначений_РегистрНакопления(ТаблицаИзМакета, ИмяРегистра)
	ЗаполнитьИзТаблицыЗначений_ДвиженияДокумента(ТаблицаИзМакета, ИмяРегистра);
	Возврат ТаблицаИзМакета;
КонецФункции
Функция ЗаполнитьИзТаблицыЗначений_Константа(ТаблицаИзМакета, ДопПараметр)
	
	Для каждого Колонка из ТаблицаИзМакета.Колонки Цикл
		ИмяКонстанты = Колонка.Имя;
		Константы[ИмяКонстанты].Установить(ТаблицаИзМакета[0][ИмяКонстанты]);
	КонецЦикла;
	
	Возврат ТаблицаИзМакета;
КонецФункции

Функция ЗаполнитьИзТаблицыЗначений_ДвиженияДокумента(ТаблицаИзМакета, ИмяРегистра)
	
	Для каждого Строка из ТаблицаИзМакета Цикл
		Движения = Строка
					.Регистратор
					.ПолучитьОбъект()
					.Движения[ИмяРегистра];
		Движения.Прочитать();
		НовоеДвижение = Движения.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеДвижение, Строка);
		Если НовоеДвижение.Период = Дата(1,1,1) Тогда
			НовоеДвижение.Период = НовоеДвижение.Регистратор.Дата;
		КонецЕсли;
		Движения.Записать(Истина);
	КонецЦикла;
	
	Возврат ТаблицаИзМакета;
КонецФункции
Функция ЗаполнитьИзТаблицыЗначений_Объект(ТаблицаИзМакета, ВидОбъекта)
	ИмяТабличнойЧасти = "";
	Если Найти(нрег(ВидОбъекта), ".табличнаячасть.") Тогда
		Буфер = СтрЗаменить(нрег(ВидОбъекта), ".табличнаячасть.", Символы.ПС);
		ИмяТабличнойЧасти = СтрПолучитьСтроку(Буфер, 2);
	КонецЕсли;
	
	Для каждого Строка из ТаблицаИзМакета Цикл
		Объект = Строка.Ссылка.ПолучитьОбъект();
		
		Буфер = Новый Структура("ЭтоГруппа");
		ЗаполнитьЗначенияСвойств(Буфер, Строка);
		
		Если НЕ ПустаяСтрока(ИмяТабличнойЧасти) Тогда
			ЗаполнитьЗначенияСвойств(Объект[ИмяТабличнойЧасти].Добавить(), Строка);
		ИначеЕсли НЕ Буфер.ЭтоГруппа = Неопределено Тогда
			СтруктураСвойствДоступныхДляЗаписи = ПолучитьСтруктурСвойствДоступныхДляЗаписи(Объект);
			ЗаполнитьЗначенияСвойств(СтруктураСвойствДоступныхДляЗаписи, Строка);
			ЗаполнитьЗначенияСвойств(Объект, СтруктураСвойствДоступныхДляЗаписи);
		Иначе
			ЗаполнитьЗначенияСвойств(Объект, Строка);
		КонецЕсли;
		
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.Записать();
	КонецЦикла;
	
	Возврат ТаблицаИзМакета;
КонецФункции
Функция ПолучитьСтруктурСвойствДоступныхДляЗаписи(Объект)
	СтруктураДоступныхСвойств = Новый Структура("Код,Наименование");
	
	Буфер = Новый Структура("ЭтоГруппа");
	ЗаполнитьЗначенияСвойств(Буфер, Объект);
	Если Буфер.ЭтоГруппа = Истина Тогда
		НедоступноеИспользование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента;
	Иначе
		НедоступноеИспользование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы;
	КонецЕсли;
	
	Для Каждого Реквизит Из Объект.Метаданные().СтандартныеРеквизиты Цикл
		СтруктураДоступныхСвойств.Вставить(Реквизит.Имя);
	КонецЦикла;
	Для Каждого Реквизит Из Объект.Метаданные().Реквизиты Цикл
		Если Реквизит.Использование = НедоступноеИспользование Тогда
			Продолжить;
		КонецЕсли;
		СтруктураДоступныхСвойств.Вставить(Реквизит.Имя);
	КонецЦикла;
	
	Возврат СтруктураДоступныхСвойств;
КонецФункции

