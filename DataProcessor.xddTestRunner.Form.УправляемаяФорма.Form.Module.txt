
&НаКлиенте
Перем MiddleMan;

&НаКлиенте
Перем СоответствиеСтатусовДляTeamCity;

&НаКлиенте
Перем кэшТестовыхОбработок;

////////////////////////////////////////////////////////////////////////////////
// ИНТЕРФЕЙС АВТОМАТИЧЕСКИХ ТЕСТОВ

//#Область ИнтерфейсАвтоматическихТестов

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ПРОВЕДЕНИЯ ТЕСТИРОВАНИЯ 

//#Область СлужебныеПроцедурыИФункцииДляПроведенияТестирования

// { функции утверждения- проверки значений. 

&НаКлиенте
Процедура Проверить(_Истина, ДопСообщениеОшибки = "") Экспорт
	Если Не _Истина Тогда
		СообщениеОшибки = "Переданный параметр ("+Формат(_Истина, "БЛ=ложь; БИ=истина")+") не является Истиной, а хотели, чтобы являлся." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИстину(_Истина, ДопСообщениеОшибки = "") Экспорт
	Проверить(_Истина, ДопСообщениеОшибки);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЛожь(_Ложь, ДопСообщениеОшибки = "") Экспорт
	Если _Ложь Тогда
		СообщениеОшибки = "Переданный параметр ("+Формат(_Ложь, "БЛ=ложь; БИ=истина")+") не является Ложью, а хотели, чтобы являлся." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДату(_Дата, _Период, ДопСообщениеОшибки = "") Экспорт
	Если _Дата < _Период.ДатаНачала или _Дата > _Период.ДатаОкончания Тогда
		представление = ПредставлениеПериода(_Период.ДатаНачала, _Период.ДатаОкончания, "ФП = Истина");
		СообщениеОшибки = "Переданный параметр ("+Формат(_Дата, "ДФ='dd.MM.yyyy HH:mm:ss'")+") не входит в период "+представление+", а хотели, чтобы являлся." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРавенствоДатСТочностью2Секунды(_Дата, _Дата2, ДопСообщениеОшибки = "") Экспорт
	Если _Дата < _Дата2-2 или _Дата > _Дата2+2 Тогда
		СообщениеОшибки = "Переданная дата ("+Формат(_Дата, "ДФ='dd.MM.yyyy HH:mm:ss'")+") не равна дате ("+Формат(_Дата2, "ДФ='dd.MM.yyyy HH:mm:ss'")+") с точностью до 2-х секунд, а хотели, чтобы они равнялись." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРавенство(_1, _2, ДопСообщениеОшибки = "") Экспорт
	Если _1 <> _2 Тогда
		СообщениеОшибки = "Сравниваемые значения ("+_1+"; "+_2+") не равны, а хотели, чтобы были равны." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеРавенство(_1, _2, ДопСообщениеОшибки = "") Экспорт
	Если _1 = _2 Тогда
		СообщениеОшибки = "Сравниваемые значения ("+_1+"; "+_2+") равны, а хотели, чтобы были не равны." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьБольше(_Больше, _Меньше, ДопСообщениеОшибки = "") Экспорт
	Если _Больше <= _Меньше Тогда
		СообщениеОшибки = "Первый параметр ("+_Больше+") меньше или равен второму ("+_Меньше+") а хотели, чтобы был больше." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьБольшеИлиРавно(_Больше, _Меньше, ДопСообщениеОшибки = "") Экспорт
	Если _Больше < _Меньше Тогда
		СообщениеОшибки = "Первый параметр ("+_Больше+") меньше второго ("+_Меньше+") а хотели, чтобы был больше или равен." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМеньше(проверяемоеЗначение1, проверяемоеЗначение2, СообщениеОбОшибке = "") Экспорт
	Если проверяемоеЗначение1 >= проверяемоеЗначение2 Тогда
		СообщениеОшибки = "Значение <"+проверяемоеЗначение1+"> больше или равно, чем <"+проверяемоеЗначение2+">, а ожидалось меньше"+
				ФорматДСО(СообщениеОбОшибке);
		ВызватьОшибкуПроверки(СообщениеОшибки)
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМеньшеИлиРавно(проверяемоеЗначение1, проверяемоеЗначение2, СообщениеОбОшибке = "") Экспорт
	Если проверяемоеЗначение1 > проверяемоеЗначение2 Тогда
		СообщениеОшибки = "Значение <"+проверяемоеЗначение1+"> больше, чем <"+проверяемоеЗначение2+">, а ожидалось меньше или равно"+
				ФорматДСО(СообщениеОбОшибке);
		ВызватьОшибкуПроверки(СообщениеОшибки)
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыполнилось(Знач СтрокаАлгоритм, ПараметрыИлиДопСообщениеОшибки = Неопределено, Знач ДопСообщениеОшибки = "") Экспорт
	Перем Параметры;
	
	Если ТипЗнч(ПараметрыИлиДопСообщениеОшибки) = Тип("Строка") Тогда
		ДопСообщениеОшибки = ПараметрыИлиДопСообщениеОшибки;
	Иначе
		Параметры = ПараметрыИлиДопСообщениеОшибки;
	КонецЕсли;
	Попытка
		Выполнить(СтрокаАлгоритм);
	Исключение
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СообщениеОшибки = "Хотели, чтобы алгоритм """+СтрокаАлгоритм+""" выполнился, а он упал с ошибкой """+ПолученноеОписаниеОшибки+"""." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМетодВыполнился(Объект, Знач ИмяМетода, ПараметрыИлиДопСообщениеОшибки = Неопределено, Знач ДопСообщениеОшибки = "") Экспорт
	Перем Параметры;
	
	Если ТипЗнч(ПараметрыИлиДопСообщениеОшибки) = Тип("Строка") Тогда
		ДопСообщениеОшибки = ПараметрыИлиДопСообщениеОшибки;
	Иначе
		Параметры = ПараметрыИлиДопСообщениеОшибки;
		Если Параметры <> Неопределено Тогда
			ТипПараметра = ТипЗнч(Параметры);
			Если ТипПараметра <> Тип("Массив") Тогда
				ВызватьИсключение ("Ожидали, что вторым параметром будет передан массив параметров для метода <"+ИмяМетода+">, а получили другой объект с типом <"+ТипПараметра+">");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыСтрока = ПараметрыСтрокой(Параметры);
	
	СтрокаВыполнения = "Объект." + ИмяМетода + "(" + ПараметрыСтрока + ")";
	
	Попытка
		Выполнить(СтрокаВыполнения);
	Исключение
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СообщениеОшибки = "Хотели, чтобы код """+СтрокаВыполнения+""" выполнился, а он упал с ошибкой """+ПолученноеОписаниеОшибки+"""." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыСтрокой(Параметры, ИмяПеременной = "Параметры")
	
	ПараметрыСтрока = "";
	Если Параметры <> Неопределено Тогда
		Если ТипЗнч(Параметры) = Тип("Массив") Тогда
			Для Индекс = 0 По Параметры.ВГраница() Цикл 
				ПараметрыСтрока = ПараметрыСтрока + ", " + ИмяПеременной + "[" + Формат(Индекс, "ЧН=0; ЧГ=0") + "]";
			КонецЦикла;
			ПараметрыСтрока = Сред(ПараметрыСтрока, 3);
		Иначе
			ПараметрыСтрока = ИмяПеременной;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыСтрока;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьНеВыполнилось(Знач СтрокаАлгоритм, ПараметрыИлиОжидаемоеОписаниеОшибки, Знач ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки = "", Знач ДопСообщениеОшибки = "") Экспорт
	Перем Параметры, ОжидаемоеОписаниеОшибки; 
	Если ТипЗнч(ПараметрыИлиОжидаемоеОписаниеОшибки) = Тип("Строка") Тогда
		ОжидаемоеОписаниеОшибки = ПараметрыИлиОжидаемоеОписаниеОшибки;
		ДопСообщениеОшибки = ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки;
	Иначе
		Параметры = ПараметрыИлиОжидаемоеОписаниеОшибки;
		ОжидаемоеОписаниеОшибки = ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки;
	КонецЕсли;
	Попытка
		Выполнить(СтрокаАлгоритм);
	Исключение
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если Найти(ПолученноеОписаниеОшибки, ОжидаемоеОписаниеОшибки) = 0 Тогда
			ВызватьОшибкуПроверки("Хотели, чтобы алгоритм """+СтрокаАлгоритм+""" упал с сообщением об ошибке """+ОжидаемоеОписаниеОшибки+""", а он упал с сообщением """+ПолученноеОписаниеОшибки+"""." + ФорматДСО(ДопСообщениеОшибки));
		КонецЕсли;
		Возврат;
	КонецПопытки;
	
	ВызватьОшибкуПроверки("Хотели, чтобы алгоритм """+СтрокаАлгоритм+""" упал, а он выполнился" + ФорматДСО(ДопСообщениеОшибки));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМетодНеВыполнился(Объект, ИмяМетода, ПараметрыИлиОжидаемоеОписаниеОшибки, Знач ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки = "", Знач ДопСообщениеОшибки = "") Экспорт
	Перем Параметры, ОжидаемоеОписаниеОшибки; 
	
	Если ТипЗнч(ПараметрыИлиОжидаемоеОписаниеОшибки) = Тип("Строка") Тогда
		ОжидаемоеОписаниеОшибки = ПараметрыИлиОжидаемоеОписаниеОшибки;
		ДопСообщениеОшибки = ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки;
	Иначе
		Параметры = ПараметрыИлиОжидаемоеОписаниеОшибки;
		Если Параметры <> Неопределено Тогда
			ТипПараметра = ТипЗнч(Параметры);
			Если ТипПараметра <> Тип("Массив") Тогда
				ВызватьИсключение ("Ожидали, что третьим параметром будет передан массив параметров для метода <"+ИмяМетода+">, а получили другой объект с типом <"+ТипПараметра+">");
			КонецЕсли;
		КонецЕсли;
		ОжидаемоеОписаниеОшибки = ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки;
	КонецЕсли;
	
	ПараметрыСтрока = ПараметрыСтрокой(Параметры);
	
	СтрокаВыполнения = "Объект." + ИмяМетода + "(" + ПараметрыСтрока + ")";
	
	Попытка
		Выполнить(СтрокаВыполнения);
	Исключение
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если Найти(ПолученноеОписаниеОшибки, ОжидаемоеОписаниеОшибки) = 0 Тогда
			ВызватьОшибкуПроверки("Хотели, чтобы код """+СтрокаВыполнения+""" упал с сообщением об ошибке """+ОжидаемоеОписаниеОшибки+""", а он упал с сообщением """+ПолученноеОписаниеОшибки+"""." + ФорматДСО(ДопСообщениеОшибки));
		КонецЕсли;
		Возврат;
	КонецПопытки;
	
	ВызватьОшибкуПроверки("Хотели, чтобы код """+СтрокаВыполнения+""" упал, а он выполнился" + ФорматДСО(ДопСообщениеОшибки));
	
КонецПроцедуры

// проверка идет через ЗначениеЗаполнено, но мутабельные значение всегда считаем заполненными
&НаКлиенте
Процедура ПроверитьЗаполненность(ПроверяемоеЗначение, ДопСообщениеОшибки = "") Экспорт
	Попытка
		фЗаполнено = ЗначениеЗаполнено(ПроверяемоеЗначение);
	Исключение
		Возврат;
	КонецПопытки;
	Если НЕ фЗаполнено Тогда
		ВызватьОшибкуПроверки("Значение ("+ПроверяемоеЗначение+") не заполнено, а ожидалась заполненность" + ФорматДСО(ДопСообщениеОшибки));
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеЗаполненность(ПроверяемоеЗначение, ДопСообщениеОшибки = "") Экспорт
	СообщениеОшибки = "Значение ("+ПроверяемоеЗначение+") заполнено, а ожидалась незаполненность" + ФорматДСО(ДопСообщениеОшибки);
	Попытка
		фЗаполнено = ЗначениеЗаполнено(ПроверяемоеЗначение);
	Исключение
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецПопытки;
	Если фЗаполнено Тогда
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТип(значение, ТипИлиИмяТипа, ДопСообщениеОшибки = "") Экспорт
	Если ТипЗнч(ТипИлиИмяТипа) = Тип("Строка") Тогда
		искомыйТип = Тип(ТипИлиИмяТипа);
	ИначеЕсли ТипЗнч(ТипИлиИмяТипа) = Тип("Тип") Тогда
		искомыйТип = ТипИлиИмяТипа;
	Иначе
		ВызватьИсключение ("ПроверитьТип: Тип значения параметра ТипИлиИмяТипа должен быть <Тип> или <Строка>, а получили <"+ ТипЗнч(ТипИлиИмяТипа) + ">" + ФорматДСО(ДопСообщениеОшибки));
	КонецЕсли;
	Если ТипЗнч(значение) <> искомыйТип Тогда
		ВызватьОшибкуПроверки("Типом значения <"+значение+"> является <"+ТипЗнч(значение)+">, а ожидался тип <"+ТипИлиИмяТипа+">."+ФорматДСО(ДопСообщениеОшибки));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВхождение(строка, подстрокаПоиска, ДопСообщениеОшибки = "") Экспорт
	Если Найти(строка, подстрокаПоиска) = 0 Тогда
		ПредставлениеСтроки = "<"+строка+">";
		Если СтрДлина(строка) > 20 Тогда
			ПредставлениеСтроки = ПредставлениеСтроки + Символы.ПС;
		КонецЕсли;
		ПредставлениеПодСтроки = "<"+подстрокаПоиска+">";
		Если СтрДлина(подстрокаПоиска) > 20 Тогда
			ПредставлениеПодСтроки = ПредставлениеПодСтроки + Символы.ПС;
		КонецЕсли;
		СообщениеОшибки = "Искали в "+ПредставлениеСтроки+" подстроку "+ПредставлениеПодСтроки+", но не нашли." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

//Коллекция - Массив, Структура, Соответствие, ФиксированныйМассив, ФиксированнаяСтруктура, ФиксированноеСоответствие, СписокЗначений
&НаКлиенте
Процедура ПроверитьВхождениеВКоллекцию(Элемент, Коллекция, ДопСообщениеОшибки = "") Экспорт
	Нашли = Неопределено;
	ТипКоллекции = ТипЗнч(Коллекция);
	Если ТипКоллекции = Тип("Массив") или ТипКоллекции = Тип("ФиксированныйМассив") Тогда
		Нашли = Коллекция.Найти(Элемент) <> Неопределено;
	ИначеЕсли ТипКоллекции = Тип("Структура") или ТипКоллекции = Тип("Соответствие") 
			или ТипКоллекции = Тип("ФиксированнаяСтруктура") или ТипКоллекции = Тип("ФиксированноеСоответствие") Тогда
		Для каждого КлючЗначение Из Коллекция Цикл
			Нашли = КлючЗначение.Значение = Элемент;
			Если Нашли Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипКоллекции = Тип("СписокЗначений") Тогда
		Нашли = Коллекция.НайтиПоЗначению(Элемент) <> Неопределено;
	КонецЕсли;
	Если Нашли = Неопределено Тогда
		СообщениеОшибки = "Утверждение ""ПроверитьВхождениеВКоллекцию"" не умеет работать с типом коллекции <"+ТипКоллекции+">." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение СообщениеОшибки;
	КонецЕсли;
	Если Не Нашли Тогда
		СообщениеОшибки = "Не нашли элемент <"+Элемент+"> в коллекции, а хотели, чтобы он был в коллекции." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВалидностьЗапросаСКД(ТекстЗапроса, ДопСообщениеОшибки = "") Экспорт
	ПроверитьВалидностьЗапросаСКДНаСервере(ТекстЗапроса, ДопСообщениеОшибки);
КонецПроцедуры

// Только для внутреннего использования
&НаСервере
Процедура ПроверитьВалидностьЗапросаСКДНаСервере(ТекстЗапроса, ДопСообщениеОшибки = "")
	Объект().ПроверитьВалидностьЗапросаСКД(ТекстЗапроса, ДопСообщениеОшибки);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениям(ТабДок1, ТабДок2, УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки = Ложь, УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки = Ложь, Знач ДопСообщениеОшибки = "") Экспорт
	ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениямСервер(ТабДок1, ТабДок2, УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки, УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки, ДопСообщениеОшибки);
КонецПроцедуры

&НаСервере
Процедура ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениямСервер(ТабДок1, ТабДок2, УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки = Ложь, УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки = Ложь, Знач ДопСообщениеОшибки = "") Экспорт
	Объект().ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениям(ТабДок1, ТабДок2, УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки, УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки, ДопСообщениеОшибки);
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОшибкуПроверки(СообщениеОшибки)
	
	Префикс = "[" + СтатусыРезультатаТестирования.ОшибкаПроверки + "]";
	ВызватьИсключение Префикс + " " + СообщениеОшибки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПропуститьТест(Знач Сообщение = "") Экспорт
	
	Префикс = "[" + СтатусыРезультатаТестирования.ТестПропущен + "]";
	Если ПустаяСтрока(Сообщение) Тогда
		Сообщение = НСтр("ru = 'Тест пропущен'");
	КонецЕсли;
	ВызватьИсключение Префикс + " " + Сообщение;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКонтекст(Знач ИдентификаторКонтекста = Неопределено) Экспорт
	Перем Контекст;
	
	Если ИдентификаторКонтекста = Неопределено Тогда
		ИдентификаторКонтекста = ИдентификаторПустогоКонтекста();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Мир) Или Не Объект.Мир.Свойство(ИдентификаторКонтекста, Контекст) Тогда
		ТекстОшибки = СтрЗаменить(НСтр("ru = 'Отсутствует запрашиваемый контекст%1.'"), "%1", ?(ИдентификаторКонтекста = ИдентификаторПустогоКонтекста(), "", " (" + ИдентификаторКонтекста + ")"));
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат Контекст;
	
КонецФункции

&НаКлиенте
Процедура УстановитьКонтекст(Контекст, Знач ИдентификаторКонтекста = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Объект.Мир) Тогда
		Объект.Мир = Новый Структура;
	КонецЕсли;
	
	Если ИдентификаторКонтекста = Неопределено Тогда
		ИдентификаторКонтекста = ИдентификаторПустогоКонтекста();
	КонецЕсли;
	
	Объект.Мир.Вставить(ИдентификаторКонтекста, Контекст);
	
КонецПроцедуры

&НаКлиенте
Функция КонтекстУстановлен(Знач ИдентификаторКонтекста = Неопределено) Экспорт
	
	Если ИдентификаторКонтекста = Неопределено Тогда
		ИдентификаторКонтекста = ИдентификаторПустогоКонтекста();
	КонецЕсли;
	
	Возврат ЗначениеЗаполнено(Объект.Мир) И Объект.Мир.Свойство(ИдентификаторКонтекста);
	
КонецФункции

&НаКлиенте
Процедура УдалитьКонтекст(Знач ИдентификаторКонтекста = Неопределено) Экспорт
	
	Если ИдентификаторКонтекста = Неопределено Тогда
		ИдентификаторКонтекста = ИдентификаторПустогоКонтекста();
	КонецЕсли;
	
	Если КонтекстУстановлен(ИдентификаторКонтекста) Тогда
		Объект.Мир.Удалить(ИдентификаторКонтекста);
	КонецЕсли;
	
КонецПроцедуры

// создается копия данных текущего теста - структура "Имя, ПолныйПуть, СостояниеТеста"
&НаКлиенте
Функция ДанныеТекущегоТеста() Экспорт
	
	ИдентификаторКонтекста = ИдентификаторКонтекстаДанныхТекущегоТеста();
	Если Не КонтекстУстановлен(ИдентификаторКонтекста) Тогда
		ВызватьИсключение НСтр("ru = 'Нельзя получить данные текущего теста вне режима тестирования'");
	КонецЕсли;
	
	ДанныеТекущегоТеста = ПустыеДанныеТекущегоТеста();
	ЗаполнитьЗначенияСвойств(ДанныеТекущегоТеста, ПолучитьКонтекст(ИдентификаторКонтекста));
	
	Возврат ДанныеТекущегоТеста;
	
КонецФункции

// }

//#КонецОбласти

//#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

//#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Получаем версию платформы для определения вызова процедур\функций для 8.2 или 8.3
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ВерсияПлатформы = Лев(СистемнаяИнформация.ВерсияПриложения, 3);
	ЕстьПоддержкаНемодальныхФорм = (СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.3.3.641") >= 0);
	ЕстьПоддержкаАсинхронныхВызовов = (СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.3.5.1383") >= 0)
		И Вычислить("Метаданные.РежимИспользованияСинхронныхВызововРасширенийИВнешнихКомпонент <> Метаданные.СвойстваОбъектов.РежимИспользованияСинхронныхВызововРасширенийИВнешнихКомпонент.Использовать");
	
	ИнициализироватьНастройки();
	
	ОбъектНаСервере = Объект();
	ЭтаФорма.Заголовок = ОбъектНаСервере.ЗаголовокФормы();
	
	ЭтоВстроеннаяОбработка = ОбъектНаСервере.ЭтоВстроеннаяОбработка;
	Если Не ЭтоВстроеннаяОбработка Тогда
		ИспользуемоеИмяФайла = ОбъектНаСервере.ИспользуемоеИмяФайла;
	КонецЕсли;
	УстановитьПоУмолчаниюОбработчикКоманды_ЗагрузитьТесты();
	
	ЗапретИспользованияИнформатора = Истина;
	
	БылаОшибкаПриПредыдущейЗагрузке = ОбъектНаСервере.СохраненнаяНастройка_БылаОшибкаПриПредыдущейЗагрузке();
	ОбъектНаСервере.УстановитьНастройку_БылаОшибкаПриПредыдущейЗагрузке(Истина);
	
	Если ЗначениеЗаполнено(Параметры.Пути) Тогда
		Пути.ЗагрузитьЗначения(Параметры.Пути.ВыгрузитьЗначения());
	КонецЕсли;
	
	ЗначенияСостоянияТестов = ОбъектНаСервере.мЗначенияСостоянияТестов;
	ЗначенияТиповСтроки = ОбъектНаСервере.мЗначенияТиповСтроки;
	ЗначениеМодульИлиФорма = ОбъектНаСервере.мЗначениеМодульИлиФорма;
	СтатусыРезультатаТестирования = ОбъектНаСервере.СтатусыРезультатаТестирования;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПоУмолчаниюОбработчикКоманды_ЗагрузитьТесты()
	Перем Команда;
	
	Если ЭтоВстроеннаяОбработка Тогда
		Команда = Команды.КомандаЗагрузитьТестыИзКонфигурацииПоИмени;
	Иначе
		Команда = Команды.КомандаЗагрузитьТестовыйНабор;
	КонецЕсли;
	
	Элементы.ФормаЗагрузитьТестыПоУмолчанию.ИмяКоманды = Команда.Имя;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СоздатьСоответствиеСтатусовДляTeamCity();
	
	Если ОбработатьПараметрыЗапуска(ПараметрЗапуска) Тогда
		Возврат;
	КонецЕсли;
	
	Ответ = КодВозвратаДиалога.Нет;
	Если ЗначениеЗаполнено(Пути) Тогда
		
		Если БылаОшибкаПриПредыдущейЗагрузке Тогда
			Текст = НСтр("ru = 'Возникла ошибка при предыдущей загрузке тестов. Хотите отменить загрузку тестов?'");
			Если ЕстьПоддержкаНемодальныхФорм Тогда
				Оповещение = Вычислить("Новый ОписаниеОповещения(""ПриОткрытииПослеВопросаОбОтменеЗагрузкиТестов"", ЭтаФорма)");
				Выполнить("ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет)");
				Возврат;
			Иначе
				Ответ = Вопрос(Текст, РежимДиалогаВопрос.ДаНет, 0);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПриОткрытииПослеВопросаОбОтменеЗагрузкиТестов(Ответ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииПослеВопросаОбОтменеЗагрузкиТестов(Ответ, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Пути.Очистить();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Пути) Тогда
		
		ОбновитьНадписьПути();
		
		Попытка
			LoadAllTests();
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			ТекстСообщения = НСтр("ru='ОШИБКА загрузки тестов: %ТекстОшибки%'; en='Error loading testcases: %ТекстОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекстОшибки%", ТекстОшибки); 
			ВывестиСообщение(ТекстСообщения);
			
		КонецПопытки;
		
	КонецЕсли;
	
	СброситьПризнак_БылаОшибкаПриПредыдущейЗагрузкеСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСоответствиеСтатусовДляTeamCity()

	//{ Соответствие Статуса сообщения 1с Статусу в Buildlog TeamCity
	СоответствиеСтатусовДляTeamCity = Новый Соответствие;
	СоответствиеСтатусовДляTeamCity.Вставить(СтатусСообщения.БезСтатуса,"NORMAL");
	СоответствиеСтатусовДляTeamCity.Вставить(СтатусСообщения.Обычное,"NORMAL");
	СоответствиеСтатусовДляTeamCity.Вставить(СтатусСообщения.Информация,"NORMAL");
	СоответствиеСтатусовДляTeamCity.Вставить(СтатусСообщения.Внимание,"WARNING");
	СоответствиеСтатусовДляTeamCity.Вставить(СтатусСообщения.Важное,"FAILURE");
	СоответствиеСтатусовДляTeamCity.Вставить(СтатусСообщения.ОченьВажное,"ERROR");
	СоответствиеСтатусовДляTeamCity = Новый ФиксированноеСоответствие(СоответствиеСтатусовДляTeamCity);
	//} Соответствие Статуса сообщения 1с Статусу в Buildlog TeamCity
КонецПроцедуры

// Обработка оповещений о загрузке или ходе выполнения тестов.
// 
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Возможные события:
	// 		xUnitFor1C.TestLoaded
	// 		xUnitFor1C.TestPassed
	// 		xUnitFor1C.TestNotInplemented
	// 		xUnitFor1C.TestFailed
	
	Если ИмяСобытия = "xUnitFor1C.TestPassed" Тогда
		
		ИндикаторВыполнения = ИндикаторВыполнения + 1; //Элементы.ИндикаторВыполнения.Значение = Элементы.ИндикаторВыполнения.Значение + 1;
		
	ИначеЕсли ИмяСобытия = "xUnitFor1C.TestNotImplemented" Тогда
		
		ИндикаторВыполнения = ИндикаторВыполнения + 1; //Элементы.ИндикаторВыполнения.Значение = Элементы.ИндикаторВыполнения.Значение + 1;
		
		Если Элементы.ИндикаторВыполнения.ЦветРамки <> WebЦвета.Красный Тогда
			Элементы.ИндикаторВыполнения.ЦветРамки = WebЦвета.Золотой;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "xUnitFor1C.TestFailed" Тогда
		
		ИндикаторВыполнения = ИндикаторВыполнения + 1; //Элементы.ИндикаторВыполнения.Значение = Элементы.ИндикаторВыполнения.Значение + 1;
		Элементы.ИндикаторВыполнения.ЦветРамки = WebЦвета.Красный;
		
	ИначеЕсли ИмяСобытия = "xUnitFor1C.LoadSubSystem" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Строка") И НЕ ПустаяСтрока(Параметр)  Тогда
			
			Пути.Очистить();
			Пути.Добавить(Параметр);
			ОбновитьНадписьПути();
			LoadAllTests();
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если Не ЭтоЗапускВПакетномРежиме Тогда
		СохранитьНастройки();
	КонецЕсли;
	
КонецПроцедуры

//#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ТАБЛИЦЫ ФОРМЫ ДЕРЕВОТЕСТОВ

//#Область ОбработчикиТаблицыФормы_ДеревоТестов

&НаКлиенте
Процедура РазвернутьСтрокиДерева(ВключаяПодчиненные = Ложь)
	
	Для Каждого СтрокаДерева Из Объект.ДеревоТестов.ПолучитьЭлементы() Цикл
		Идентификатор = СтрокаДерева.ПолучитьИдентификатор();
		Элементы.ДеревоТестов.Развернуть(Идентификатор, ВключаяПодчиненные);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьУспешныеСтрокиДереваИРазвернутьНеуспешные(СтрокиДереваТестов, ОставитьРазвернутым)
	
	ЭлементДеревоТестов = Элементы.ДеревоТестов;
	Для Каждого СтрокаДерева из СтрокиДереваТестов Цикл
		Если Не ОставитьРазвернутым Тогда
			Идентификатор = СтрокаДерева.ПолучитьИдентификатор();
			Если СтрокаДерева.Состояние = ЗначенияСостоянияТестов.Сломался
			 Или СтрокаДерева.Состояние = ЗначенияСостоянияТестов.НеРеализован Тогда
				ЭлементДеревоТестов.Развернуть(Идентификатор, Ложь);
			ИначеЕсли СтрокаДерева.Состояние <> ЗначенияСостоянияТестов.НеВыполнялся Тогда
				ЭлементДеревоТестов.Свернуть(Идентификатор);
			КонецЕсли;
		КонецЕсли;
		СвернутьУспешныеСтрокиДереваИРазвернутьНеуспешные(СтрокаДерева.ПолучитьЭлементы(), Ложь);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояниеВыполненияРодителей(СтрокаДереваТестов)
	
	СтрокаРодителя = СтрокаДереваТестов.ПолучитьРодителя();
	Если СтрокаРодителя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдушееСостояние = СтрокаРодителя.Состояние;
	Состояние = ЗначенияСостоянияТестов.НеВыполнялся;
	Для Каждого Строка Из СтрокаРодителя.ПолучитьЭлементы() Цикл
		Если Строка.Состояние = ЗначенияСостоянияТестов.НеВыполнялся Тогда
			Состояние = ЗначенияСостоянияТестов.НеВыполнялся;
			Прервать;
		КонецЕсли;
		ЗапомнитьСамоеХудшееСостояние(Состояние, Строка.Состояние);
	КонецЦикла;
	Если ПредыдушееСостояние <> Состояние Тогда
		СтрокаРодителя.Состояние = Состояние;
		ИзменитьСостояниеВыполненияРодителей(СтрокаРодителя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВремяВыполненияРодителей(СтрокаДереваТестов)
	
	СтрокаРодителя = СтрокаДереваТестов.ПолучитьРодителя();
	Если СтрокаРодителя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВремяВыполнения = 0;
	Для Каждого Строка Из СтрокаРодителя.ПолучитьЭлементы() Цикл
		ВремяВыполнения = ВремяВыполнения + Строка.ВремяВыполнения;
	КонецЦикла;
	Если СтрокаРодителя.ВремяВыполнения <> ВремяВыполнения Тогда
		СтрокаРодителя.ВремяВыполнения = ВремяВыполнения;
		ИзменитьВремяВыполненияРодителей(СтрокаРодителя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПустуюСтрокуДерева(СтрокаТеста, РодительскаяСтрока)
	Если СтрокаТеста <> Неопределено И СтрокаТеста.ПолучитьЭлементы().Количество() = 0 Тогда
		Если РодительскаяСтрока <> Неопределено Тогда
			РодительскаяСтрока.ПолучитьЭлементы().Удалить(СтрокаТеста);
		Иначе
			Объект.ДеревоТестов.ПолучитьЭлементы().Удалить(СтрокаТеста);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПустыеСтрокиКаталогов(СтрокиДерева)
	
	УдаляемыеСтроки = Новый Массив;
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.ТипСтроки = ЗначенияТиповСтроки.КаталогТестов Тогда
			УдалитьПустыеСтрокиКаталогов(СтрокаДерева.ПолучитьЭлементы());
			Если СтрокаДерева.ПолучитьЭлементы().Количество() = 0 Тогда
				УдаляемыеСтроки.Добавить(СтрокаДерева);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из УдаляемыеСтроки Цикл
		СтрокиДерева.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПосчитатьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(РодительскаяСтрока)
	коллекцияСтрок = РодительскаяСтрока.ПолучитьЭлементы();
	Если коллекцияСтрок.Количество() = 0 Тогда
		Возврат 1;
	КонецЕсли;
	количествоТестов = 0;
	Для каждого СтрокаДерева из коллекцияСтрок Цикл
		лКоличество = ПосчитатьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(СтрокаДерева);
		СтрокаДерева.КоличествоТестов = лКоличество;
		количествоТестов = количествоТестов + лКоличество;
	КонецЦикла;
	Возврат количествоТестов;
КонецФункции

&НаСервере
Процедура УпорядочитьСтрокиДереваТестов()
	
	Дерево = РеквизитФормыВЗначение("Объект.ДеревоТестов");
	Объект().УпорядочитьСтрокиДереваТестов(Дерево);
	ЗначениеВРеквизитФормы(Дерево, "Объект.ДеревоТестов");
	
КонецПроцедуры

//#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

//#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВыполнитьВсеТесты(Команда)
	ОчиститьСообщения();
	RunAllTests();
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерезагрузитьВсеТесты(Команда)
	LoadAllTests();
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьТестовыйНабор(Команда)
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("ИмяИстории", Элементы.ИсторияВыбораМест.Имя);
	ПараметрыВыбора.Вставить("РазвернутьСтроки", Ложь);
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("en='Choose a folder with testcases'; ru='Выберите каталог с тестовыми случаями'");
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Оповещение = Вычислить("Новый ОписаниеОповещения(""ПослеВыбораФайлаТестов"", ЭтаФорма, ПараметрыВыбора)");
		ДиалогОткрытияФайла.Показать(Оповещение);
	ИначеЕсли ДиалогОткрытияФайла.Выбрать() Тогда
		ВыбранныеФайлы = Новый Массив;
		ВыбранныеФайлы.Добавить(ДиалогОткрытияФайла.Каталог);
		ПослеВыбораФайлаТестов(ВыбранныеФайлы, ПараметрыВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьТестовыеСлучаи(Команда)
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("ИмяИстории", Элементы.ИсторияВыбораФайлов.Имя);
	ПараметрыВыбора.Вставить("РазвернутьСтроки", Истина);
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.МножественныйВыбор = Истина;
	ДиалогОткрытияФайла.Фильтр = НСтр("en='External processing form files (*.epf, *.erf)|*.epf; *.erf'; ru='Файлы внешних обработок (*.epf, *.erf)|*.epf; *.erf'");
	ДиалогОткрытияФайла.Заголовок = НСтр("en='Choose an external processing form file'; ru='Выберите файл с внешней обработкой'");
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Оповещение = Вычислить("Новый ОписаниеОповещения(""ПослеВыбораФайлаТестов"", ЭтаФорма, ПараметрыВыбора)");
		ДиалогОткрытияФайла.Показать(Оповещение);
	ИначеЕсли ДиалогОткрытияФайла.Выбрать() Тогда
		ПослеВыбораФайлаТестов(ДиалогОткрытияФайла.ВыбранныеФайлы, ПараметрыВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайлаТестов(ВыбранныеФайлы, ПараметрыВыбора) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Пути.ЗагрузитьЗначения(ВыбранныеФайлы);
	
	ДобавитьВИсториюКонтекст(ПараметрыВыбора.ИмяИстории, Пути.ВыгрузитьЗначения());
	
	ОбновитьНадписьПути();
	LoadAllTests(ПараметрыВыбора.РазвернутьСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьТолькоВыделенныеТесты(Команда)
	
	Пути.Очистить();
	МассивИдентификаторовСтрок = Элементы.ДеревоТестов.ВыделенныеСтроки;
	Для каждого Идентификатор Из МассивИдентификаторовСтрок Цикл
		
		СтрокаДерева = Объект.ДеревоТестов.НайтиПоИдентификатору(Идентификатор);
		Если СтрокаДерева.ТипСтроки = ЗначенияТиповСтроки.ТестовыйМетод Тогда
			СтрокаДерева = СтрокаДерева.ПолучитьРодителя();
		КонецЕсли;
		
		Путь = СтрокаДерева.ПолныйПуть;
		Если Пути.НайтиПоЗначению(Путь) = Неопределено Тогда
			Пути.Добавить(Путь);
			Если СтрокаДерева.ТипСтроки = ЗначенияТиповСтроки.КаталогТестов Тогда
				ДобавитьВИсториюКонтекст(Элементы.ИсторияВыбораМест.Имя, Путь);
			ИначеЕсли СтрокаДерева.ТипСтроки = ЗначенияТиповСтроки.ТестовыйСлучай
					И Не СтрокаДерева.ЭтоВнутренняяОбработка Тогда
				ДобавитьВИсториюКонтекст(Элементы.ИсторияВыбораФайлов.Имя, Путь);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьНадписьПути();
	LoadAllTests();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнитьВыделенныеТесты(Команда)
	ВыполнитьВыделенныеТесты();
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнитьВыделенныеТестыСИсключением(Команда)
	Сообщить(НСтр("ru = 'Подключитесь на исключение ""ПередЗапускомТеста""'"));
	ВыполнитьВыделенныеТесты(Истина);
КонецПроцедуры


&НаКлиенте
Процедура ГенераторМакетовДанных(Команда)
	ИмяИнструмента = "xddDataFixtureGen";
	ОткрытьИнструмент(ИмяИнструмента);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьГУИД(Команда)
	ИмяИнструмента = "xddGuidShow";
	ОткрытьИнструмент(ИмяИнструмента);
КонецПроцедуры

&НаКлиенте
Процедура ОПроекте(Команда)
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Оповещение = Вычислить("Новый ОписаниеОповещения(""ОПроектеПослеЗапуска"", ЭтаФорма)");
		Выполнить("НачатьЗапускПриложения(Оповещение, ""https://github.com/xDrivenDevelopment/xUnitFor1C/wiki"")");
	Иначе
		ЗапуститьПриложение("https://github.com/xDrivenDevelopment/xUnitFor1C/wiki");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОПроектеПослеЗапуска(КодВозврата, ДополнительныеПараметры)
	Возврат;
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьТестыИзКонфигурации(Команда)
	ЗагрузитьТестыИзКонфигурации("");
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьТестыИзКонфигурацииПоИмени(Команда)
	ЗагрузитьТестыИзКонфигурации("Тест_");
КонецПроцедуры

&НаКлиенте
Процедура КомандаРегистрацияПрохожденияТестовВЖР(Команда)
	
	ИзменитьЗначениеРеквизитаИУстановитьПометкуНаКнопке("РегистрацияПрохожденияТестовВЖР", "КомандаРегистрацияПрохожденияТестовВЖР");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРегистрацияОшибокТестовВЖР(Команда)
	
	ИзменитьЗначениеРеквизитаИУстановитьПометкуНаКнопке("РегистрацияОшибокТестовВЖР", "КомандаРегистрацияОшибокТестовВЖР");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнятьТестыВСлучайномПорядке(Команда)
	ИзменитьЗначениеРеквизитаИУстановитьПометкуНаКнопке("СлучайныйПорядокВыполнения", "КомандаСлучайныйПорядокВыполнения");
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерезагрузитьФорму(Команда)
	
	Закрыть();
	ОткрытьФормуЗапускаТестов();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВключитьРежимОтладки(Команда)
	
	ИзменитьЗначениеРеквизитаИУстановитьПометкуНаКнопке("РежимОтладки", "КомандаВключитьРежимОтладки");
	Закрыть();
	
	ОткрытьФормуЗапускаТестов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЗапускаТестов(НастройкиФормы = Неопределено)
	
	Если Не ЭтоВстроеннаяОбработка Тогда
		ИмяОбработки = ПодключитьНаСервереВнешнююОбработкуОтКлиента(ИспользуемоеИмяФайла, Неопределено);
	КонецЕсли;
	
	Форма = ПолучитьФорму(ЭтаФорма.ИмяФормы, НастройкиФормы,, Истина);
	Форма.ИспользуемоеИмяФайла = ИспользуемоеИмяФайла;
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаЗагрузитьТестыИзИстории(Команда)
	
	ИмяИстории = Элементы[Команда.Имя].Родитель.Имя;
	ПунктИстории = Число(СтрЗаменить(Команда.Имя, ИмяИстории, ""));
	Пути.Очистить();
	Пути.Добавить(ЭтаФорма[ИмяИстории].Получить(ПунктИстории).Значение);
	
	ДобавитьВИсториюКонтекст(ИмяИстории, Пути.ВыгрузитьЗначения());
	
	ОбновитьНадписьПути();
	LoadAllTests();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибки(Команда)
	
	МассивИдентификаторовСтрок = Элементы.ДеревоТестов.ВыделенныеСтроки;
	НовыйМассивИдентификаторовСтрок = ПолучитьТолькоТестовыеМетодыИзДерева(МассивИдентификаторовСтрок);
	СписокОшибок = Новый СписокЗначений;
	Для Каждого Идентификатор Из НовыйМассивИдентификаторовСтрок Цикл
		ТестовыйСлучай = Объект.ДеревоТестов.НайтиПоИдентификатору(Идентификатор);
		Для Каждого ЭлементСписка Из ТестовыйСлучай.СписокОшибок Цикл
			СписокОшибок.Добавить(ЭлементСписка.Значение);
		КонецЦикла;
	КонецЦикла;
	
	ВсегоТестов = СписокОшибок.Количество();
	ОбработатьОтчетТестирования(ТекущаяДата());
	
КонецПроцедуры

//#КонецОбласти



////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ЗАГРУЗКИ ВЫПОЛНЕНИЯ ТЕСТОВ 

//#Область СлужебныеПроцедурыИФункцииЗагрузкиВыполненияТестов

&НаСервере
Функция Объект() Экспорт
	ОбъектНаСервере = Неопределено;
	Если ЭтоАдресВременногоХранилища(АдресОбъектаНаСервере) Тогда
		КэшОбъекта = ПолучитьИзВременногоХранилища(АдресОбъектаНаСервере);
		Если ТипЗнч(КэшОбъекта) = Тип("Структура") Тогда
			КэшОбъекта.Свойство("Объект", ОбъектНаСервере);
		КонецЕсли;
	КонецЕсли;

	Если ОбъектНаСервере = Неопределено Тогда
		ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
		АдресОбъектаНаСервере = ПоместитьВоВременноеХранилище(Новый Структура("Объект", ОбъектНаСервере), УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат ОбъектНаСервере;
КонецФункции

&НаСервере
Функция ВерсияСервер()
	Возврат Объект().Версия();
КонецФункции

//#Область ВнешнееAPI

// { ВНЕШНЕЕ API

// Процедура загружает тесты из внешних файлов и из тестируемой конфигурации
//
// Параметры:
//	Нет
&НаКлиенте
Процедура LoadAllTests(РазвернутьСтроки = Ложь, ОповеститьПослеЗагрузки = Неопределено) Экспорт
	ИнициализироватьИндикаторВыполнения();
	
	Объект.ДеревоТестов.ПолучитьЭлементы().Очистить();
	ОчередьЗагрузки.Очистить();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Родитель", Объект.ДеревоТестов);
	ДополнительныеПараметры.Вставить("РазвернутьСтроки", РазвернутьСтроки);
	Если ОповеститьПослеЗагрузки <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("ОповеститьПослеЗагрузки", ОповеститьПослеЗагрузки);
	КонецЕсли;
	
	ВерхняяГраница = Пути.Количество() - 1;
	Для Индекс = 0 По ВерхняяГраница Цикл
		
		ОбработкаПрерыванияПользователя();
		
		ПутьКТесту = Пути[Индекс].Значение;
		ДополнительныеПараметры.Вставить("ПоследнийПуть", Индекс = ВерхняяГраница);
		Если Найти(ВРег(ПутьКТесту), "МЕТАДАННЫЕ.") = 1 Тогда
			ЗагрузитьТестыКонфигурации(ПутьКТесту, ДополнительныеПараметры);
		Иначе
			ДополнительныеПараметры.Вставить("Путь", ПутьКТесту);
			ДополнительныеПараметры.Вставить("СообщитьОбОтсутствииФайлов", Истина);
			Если ЕстьПоддержкаАсинхронныхВызовов Тогда
				Оповещение = Вычислить("Новый ОписаниеОповещения(""ЗагрузитьТестыПослеПоискаФайлов"", ЭтаФорма, ДополнительныеПараметры)");
				Выполнить("НачатьПоискФайлов(Оповещение, ПутьКТесту);");
			Иначе
				НайденныеФайлы = НайтиФайлы(ПутьКТесту);
				ЗагрузитьТестыПослеПоискаФайлов(НайденныеФайлы, ДополнительныеПараметры);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция RunAllTests() Экспорт
	
	МассивИдентификаторовСтрок = Новый Массив();
	Для каждого ЭлементДерева Из Объект.ДеревоТестов.ПолучитьЭлементы() Цикл
		МассивИдентификаторовСтрок.Добавить(ЭлементДерева.ПолучитьИдентификатор());
	КонецЦикла;
	
	Возврат _ВыполнитьВыбранныеТесты(МассивИдентификаторовСтрок);
	
КонецФункции

&НаКлиенте
Функция OpenBrowserForm() Экспорт
	ЭтаФорма.Открыть();
КонецФункции

&НаКлиенте
Функция SetHandlerObject(obj) Экспорт
	MiddleMan = obj;
КонецФункции

// }

//#КонецОбласти

&НаКлиенте
Процедура ЗагрузитьТесты(ОбъектФайл, ПараметрыЗагрузки)
	
	ЭтоФайл = (ТипЗнч(ОбъектФайл) = Тип("Файл"));
	
	ДополнительныеПараметры = СкопироватьСтруктуру(ПараметрыЗагрузки);
	ДополнительныеПараметры.Вставить("ОбъектФайл", ОбъектФайл);
	
	Если ЭтоФайл Тогда
		Если ЕстьПоддержкаАсинхронныхВызовов Тогда
			Оповещение = Вычислить("Новый ОписаниеОповещения(""ЗагрузитьТестыПослеПолученияСвойствФайла"", ЭтаФорма, ДополнительныеПараметры)");
			СвойстваФайла(ОбъектФайл, Оповещение);
		Иначе
			СвойстваФайла = СвойстваФайла(ОбъектФайл);
			ЗагрузитьТестыПослеПолученияСвойствФайла(СвойстваФайла, ДополнительныеПараметры);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ОбъектФайл) = Тип("Структура") Тогда
		СвойстваФайла = Новый Структура("ЭтоКаталог", ОбъектФайл.ТипСтроки = ЗначенияТиповСтроки.КаталогТестов);
		ОбъектФайл.Вставить("Расширение", ".epf");
		ЗагрузитьТестыПослеПолученияСвойствФайла(СвойстваФайла, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТестыПослеПолученияСвойствФайла(СвойстваФайла, ПараметрыЗагрузки) Экспорт
	
	РодительскаяСтрока = ПараметрыЗагрузки.Родитель;
	ОбъектФайл = ПараметрыЗагрузки.ОбъектФайл;
	ЭтоФайл = (ТипЗнч(ОбъектФайл) = Тип("Файл"));
	
	Если СвойстваФайла.Свойство("ОписаниеОшибки") Тогда
		ВывестиОшибку(СвойстваФайла.ОписаниеОшибки);
		ОчередьЗагрузки.Удалить(ОчередьЗагрузки.НайтиПоЗначению(ОбъектФайл.ПолноеИмя));
	ИначеЕсли СвойстваФайла.ЭтоКаталог Тогда
		Если ОбъектФайл.Имя = ".git" Тогда
			ОчередьЗагрузки.Удалить(ОчередьЗагрузки.НайтиПоЗначению(ОбъектФайл.ПолноеИмя));
		Иначе
			ПараметрыСтроки = Новый Структура;
			ПараметрыСтроки.Вставить("Имя", ОбъектФайл.Имя);
			ПараметрыСтроки.Вставить("ПолныйПуть", ОбъектФайл.ПолноеИмя);
			
			ТипСтроки = ?(ЭтоФайл, ЗначенияТиповСтроки.КаталогТестов, ЗначенияТиповСтроки.Подсистема);
			СтрокаКаталога = ДобавитьЭлементИерархииТестовыхНаборов(ТипСтроки, ПараметрыСтроки, РодительскаяСтрока); //TODO Развернуть, нужно ли тут оповещение ОповеститьОСобытии("TestLoaded", СтрокаТеста);?
			
			ПараметрыЗагрузкиКаталога = СкопироватьСтруктуру(ПараметрыЗагрузки,, "ОбъектФайл, Родитель, Путь, СообщитьОбОтсутствииФайлов");
			ПараметрыЗагрузкиКаталога.Вставить("Родитель", СтрокаКаталога);
			ПараметрыЗагрузкиКаталога.Вставить("СообщитьОбОтсутствииФайлов", Ложь);
			Если ЭтоФайл Тогда
				Если ЕстьПоддержкаАсинхронныхВызовов Тогда
					Оповещение = Вычислить("Новый ОписаниеОповещения(""ЗагрузитьТестыПослеПоискаФайлов"", ЭтаФорма, ПараметрыЗагрузкиКаталога)");
					Выполнить("НачатьПоискФайлов(Оповещение, ОбъектФайл.ПолноеИмя, ""*"", Ложь);");
				Иначе
					НайденныеФайлы = НайтиФайлы(ОбъектФайл.ПолноеИмя, "*", Ложь);
					ЗагрузитьТестыПослеПоискаФайлов(НайденныеФайлы, ПараметрыЗагрузкиКаталога);
				КонецЕсли;
			Иначе
				НайденныеФайлы = ОбъектФайл.Строки;
				ЗагрузитьТестыПослеПоискаФайлов(НайденныеФайлы, ПараметрыЗагрузкиКаталога);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ОбъектФайл.Расширение = ".epf" Тогда
			ПараметрыЗагрузкиНабора = Новый Структура;
			ПараметрыЗагрузкиНабора.Вставить("ВнешнийФайл", ЭтоФайл);
			ПараметрыЗагрузкиНабора.Вставить("ИмяТестовогоСлучая", ОбъектФайл.ИмяБезРасширения);
			
			Если ТипЗнч(РодительскаяСтрока) <> Тип("ДанныеФормыДерево") Тогда
				ПараметрыЗагрузкиНабора.Вставить("Идентификатор", РодительскаяСтрока.ПолучитьИдентификатор());
			КонецЕсли;
			
			Если ЭтоФайл Тогда
				Если ЕстьПоддержкаНемодальныхФорм Тогда
					Оповещение = Вычислить("Новый ОписаниеОповещения(""ЗагрузитьТестовыйНаборНаКлиенте"", ЭтаФорма, ПараметрыЗагрузкиНабора)");
					Выполнить("НачатьПомещениеФайла(Оповещение,, ОбъектФайл.ПолноеИмя, Ложь, УникальныйИдентификатор);");
				Иначе
					АдресХранилища = "";
					ПоместитьФайл(АдресХранилища, ОбъектФайл.ПолноеИмя, , Ложь, УникальныйИдентификатор);
					ЗагрузитьТестовыйНаборНаКлиенте(Неопределено, АдресХранилища, ОбъектФайл.ПолноеИмя, ПараметрыЗагрузкиНабора);
				КонецЕсли;
			Иначе
				ЗагрузитьТестовыйНаборНаКлиенте(Неопределено, ОбъектФайл.Имя, ОбъектФайл.ПолноеИмя, ПараметрыЗагрузкиНабора);
			КонецЕсли;
		КонецЕсли;
		ОчередьЗагрузки.Удалить(ОчередьЗагрузки.НайтиПоЗначению(ОбъектФайл.ПолноеИмя));
	КонецЕсли;
	
	ВыполнитьДействияПослеЗагрузкиТестов(ПараметрыЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТестыПослеПоискаФайлов(НайденныеФайлы, ПараметрыЗагрузки) Экспорт
	
	Если НайденныеФайлы.Количество() = 0 Тогда
		Если ПараметрыЗагрузки.СообщитьОбОтсутствииФайлов Тогда
			ТекстСообщения = НСтр("en='File or directory does not exist ""%Путь%""'; ru='Файл или каталог не существует ""%Путь%""'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Путь%", ПараметрыЗагрузки.Путь);
			ВывестиОшибку(ТекстСообщения);
		КонецЕсли;
		Если ТипЗнч(ПараметрыЗагрузки.Родитель) = Тип("ДанныеФормыДерево") Тогда
			ВыполнитьДействияПослеЗагрузкиТестов(ПараметрыЗагрузки);
		КонецЕсли;
	Иначе
		
		Для Каждого Файл Из НайденныеФайлы Цикл
			ОбработкаПрерыванияПользователя();
			ОчередьЗагрузки.Добавить(Файл.ПолноеИмя);
			ЗагрузитьТесты(Файл, ПараметрыЗагрузки);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыЗагрузки.Родитель) = Тип("ДанныеФормыЭлементДерева") Тогда
		ОчередьЗагрузки.Удалить(ОчередьЗагрузки.НайтиПоЗначению(ПараметрыЗагрузки.Родитель.ПолныйПуть));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияПослеЗагрузкиТестов(ПараметрыЗагрузки)
	
	Если ПараметрыЗагрузки.ПоследнийПуть И ОчередьЗагрузки.Количество() = 0 Тогда
		УдалитьПустыеСтрокиКаталогов(Объект.ДеревоТестов.ПолучитьЭлементы());
		Если Объект.ДеревоТестов.ПолучитьЭлементы().Количество() > 0 Тогда
			УпорядочитьСтрокиДереваТестов();
			ПосчитатьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(Объект.ДеревоТестов);
			РазвернутьСтрокиДерева(ПараметрыЗагрузки.РазвернутьСтроки);
		КонецЕсли;
		ПодготовитьДанныеТестовДляОтчетаТестирования();
		Если ПараметрыЗагрузки.Свойство("ОповеститьПослеЗагрузки") Тогда
			Выполнить("ВыполнитьОбработкуОповещения(ПараметрыЗагрузки.ОповеститьПослеЗагрузки);");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТестыИзКонфигурации(ОтборПоИмениТеста)
	
	ПараметрыОткрытия = Новый Структура("ОтборПоИмениТеста, РежимОткрытияОкна ", ОтборПоИмениТеста, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИмяФормыВыбораПодсистемыУФ = СтрЗаменить(ЭтаФорма.ИмяФормы, "УправляемаяФорма", "ФормаВыбораПодсистемУФ");
	ОткрытьФорму(ИмяФормыВыбораПодсистемыУФ, ПараметрыОткрытия, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузитьТестыКонфигурации(Путь, ДополнительныеПараметры) Экспорт
	
	КоллекцияВстроенныхТестов = Новый Массив;
	КоллекцияВстроенныхТестовСервер(КоллекцияВстроенныхТестов, Путь);
	
	ДополнительныеПараметры.Вставить("СообщитьОбОтсутствииФайлов", Ложь);
	ЗагрузитьТестыПослеПоискаФайлов(КоллекцияВстроенныхТестов, ДополнительныеПараметры);
	
КонецФункции

&НаСервере
Функция КоллекцияВстроенныхТестовСервер(КоллекцияВстроенныхТестовСервер, Путь)
	
	ОсновнойОбъект = Объект();
	
	ДеревоВстроенныхТестов = Новый ДеревоЗначений;
	ДеревоВстроенныхТестов.Колонки.Добавить("Имя");
	ДеревоВстроенныхТестов.Колонки.Добавить("ИмяБезРасширения");
	ДеревоВстроенныхТестов.Колонки.Добавить("ПолноеИмя");
	ДеревоВстроенныхТестов.Колонки.Добавить("ТипСтроки");
	
	ОбъектМетаданных = ОсновнойОбъект.ПолучитьОбъектМетаданныхПоПути(Путь);
	Если ОбъектМетаданных<>Неопределено Тогда
		Если ВРег(Лев(ОбъектМетаданных.ПолноеИмя(),11)) = "ПОДСИСТЕМА." Тогда
			ДобавитьИменаТестовПодсистемы(ДеревоВстроенныхТестов, ОбъектМетаданных);
		Иначе
			ДобавитьИмяВстроенногоТестовогоСлучая(ДеревоВстроенныхТестов, ОбъектМетаданных);
		КонецЕсли;
		
		ВыгрузитьИменаТестовИзДереваВСписокЗначений(ДеревоВстроенныхТестов.Строки, КоллекцияВстроенныхТестовСервер);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ДобавитьИменаТестовПодсистемы(СтрокаДерева, МетаПодсистема) Экспорт
	
	СтрокаТеста = СтрокаДерева.Строки.Добавить();
	СтрокаТеста.Имя = МетаПодсистема.Имя;
	СтрокаТеста.ПолноеИмя = СтрЗаменить("Метаданные." + МетаПодсистема.ПолноеИмя(), ".Подсистема.", ".Подсистемы.");
	СтрокаТеста.ТипСтроки = ЗначенияТиповСтроки.КаталогТестов;
	
	Для каждого МетаПодчиненнаяПодсистема из МетаПодсистема.Подсистемы цикл
		ДобавитьИменаТестовПодсистемы(СтрокаТеста, МетаПодчиненнаяПодсистема);
	КонецЦикла;
	
	Для каждого МетаОбработка из МетаПодсистема.Состав цикл
		ДобавитьИмяВстроенногоТестовогоСлучая(СтрокаТеста, МетаОбработка);
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция ДобавитьИмяВстроенногоТестовогоСлучая(СтрокаДерева, МетаОбработка)
	Если Метаданные.Обработки.Найти(МетаОбработка.Имя) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НоваяСтрока = СтрокаДерева.Строки.Добавить();
	НоваяСтрока.Имя = МетаОбработка.Имя;
	НоваяСтрока.ИмяБезРасширения = МетаОбработка.Имя;
	НоваяСтрока.ПолноеИмя = СтрЗаменить("Метаданные." + МетаОбработка.ПолноеИмя(), ".Обработка.", ".Обработки.");
	НоваяСтрока.ТипСтроки = ЗначенияТиповСтроки.ТестовыйСлучай;
	Возврат Истина;
КонецФункции

&НаСервере
Процедура ВыгрузитьИменаТестовИзДереваВСписокЗначений(СтрокиДереваВстроенныхТестов, КоллекцияВстроенныхТестов)
	Для каждого Строка Из СтрокиДереваВстроенныхТестов Цикл
		НоваяКоллекция = Новый Массив;
		ЭлементКоллекции = Новый Структура("Имя,ИмяБезРасширения,ПолноеИмя,ТипСтроки,Строки");
		ЭлементКоллекции.Имя = Строка.Имя;
		ЭлементКоллекции.ИмяБезРасширения = Строка.ИмяБезРасширения;
		ЭлементКоллекции.ПолноеИмя = Строка.ПолноеИмя;
		ЭлементКоллекции.ТипСтроки = Строка.ТипСтроки;
		ЭлементКоллекции.Строки = НоваяКоллекция;
		КоллекцияВстроенныхТестов.Добавить(ЭлементКоллекции);
		Если Строка.Строки.Количество() > 0 Тогда
			ВыгрузитьИменаТестовИзДереваВСписокЗначений(Строка.Строки, НоваяКоллекция);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьТестовыйНаборНаКлиенте(НеИспользуется, АдресХранилища, ВыбранноеИмяФайла, ПараметрыПодключения) Экспорт
	
	Идентификатор = ЗагрузитьТестовыйНаборНаСервере(АдресХранилища, ВыбранноеИмяФайла, ПараметрыПодключения);
	ОповеститьОЗагрузкеТестов(ОчередьОповещений);
	
	Если Идентификатор <> Неопределено Тогда
		
		СтрокаТестовогоНабора = Объект.ДеревоТестов.НайтиПоИдентификатору(Идентификатор);
		GUID = СтрокаТестовогоНабора._GUID;
		РезультатПоиска = ТаблицаИменаФорм.НайтиСтроки(Новый Структура("GUID, ОсновнаяФорма", GUID, Истина));
		Если РезультатПоиска.Количество() Тогда
			ЗагрузитьСписокТестовыхФормИзОсновнойФормыОбъекта(СтрокаТестовогоНабора, РезультатПоиска[0].ИмяФормы);
		КонецЕсли;
		
		РезультатПоиска = ТаблицаИменаФорм.НайтиСтроки(Новый Структура("GUID", GUID));
		Для Каждого ЭлементПоиска Из РезультатПоиска Цикл
			ЗагрузитьТестыИзФормыОбъекта(СтрокаТестовогоНабора, ЭлементПоиска.ИмяФормы);
		КонецЦикла;
		
		УдалитьПустуюСтрокуДерева(СтрокаТестовогоНабора, СтрокаТестовогоНабора.ПолучитьРодителя());
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьТестовыйНаборНаСервере(Знач АдресХранилищаОбъектМетаданныхИмя, Знач ПолныйПуть, Знач ПараметрыПодключения)
	
	Перем ЭтоВнешнийФайл, ИмяТестовогоСлучая, Идентификатор;
	
	ЮнитОбъект = Объект();
	ПараметрыПодключения.Свойство("ВнешнийФайл", ЭтоВнешнийФайл);
	ПараметрыПодключения.Свойство("ИмяТестовогоСлучая", ИмяТестовогоСлучая);
	ПараметрыПодключения.Свойство("Идентификатор", Идентификатор);
	
	Попытка
		Если ЭтоВнешнийФайл Тогда
			АдресХранилища = АдресХранилищаОбъектМетаданныхИмя;
			ИдентификаторОбработки = Строка(Новый УникальныйИдентификатор);
			ИмяОбъекта = ПодключитьВнешнююОбработку(АдресХранилища, ПолныйПуть, ИдентификаторОбработки, Объект.РежимОтладки);
			ТестовыйНабор = ВнешниеОбработки.Создать(ИмяОбъекта);
		Иначе
			ИмяОбъекта = АдресХранилищаОбъектМетаданныхИмя;
			ТестовыйНабор = Обработки[ИмяОбъекта].Создать();
		КонецЕсли;
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ТекстСообщения = НСтр("ru='ОШИБКА загрузки тестов: %ТекстОшибки%, %ВыбранноеИмяФайла%'; en='Error loading testcases: %ТекстОшибки%, %ВыбранноеИмяФайла%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекстОшибки%", ТекстОшибки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВыбранноеИмяФайла%", ПолныйПуть);
		ЮнитОбъект.ВывестиСообщение(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	ПараметрыСтроки = Новый Структура;
	ПараметрыСтроки.Вставить("Имя", ИмяТестовогоСлучая);
	ПараметрыСтроки.Вставить("ПолныйПуть", ПолныйПуть);
	ПараметрыСтроки.Вставить("ЭтоВнутренняяОбработка", Не ЭтоВнешнийФайл);
	ПараметрыСтроки.Вставить("ТестовыйСлучайОбъектМетаданныхИмя", ИмяОбъекта);
	
	Если Идентификатор = Неопределено Тогда
		Родитель = Объект.ДеревоТестов;
	Иначе
		Родитель = Объект.ДеревоТестов.НайтиПоИдентификатору(Идентификатор);
	КонецЕсли;
	
	СтрокаТестовогоНабора = ДобавитьТестовыйНабор(ПараметрыСтроки, Родитель);
	
	ЗагрузитьСписокТестовыхФормИзМодуляОбъекта(ЮнитОбъект, ТестовыйНабор, СтрокаТестовогоНабора);
	ЗагрузитьТестыИзМодуляОбъекта(ЮнитОбъект, ТестовыйНабор, СтрокаТестовогоНабора, ОчередьОповещений);
	
	Возврат СтрокаТестовогоНабора.ПолучитьИдентификатор();
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьТестыИзФормыОбъекта(ТестовыйНабор, ИмяФормы)
	
	Попытка
		ТестовыйНаборФорма = ПолучитьФормуОбъекта(ТестовыйНабор.ТестовыйСлучайОбъектМетаданныхИмя, ИмяФормы, ТестовыйНабор.ЭтоВнутренняяОбработка);
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		ТекстСообщения = НСтр("ru='ОШИБКА загрузки тестов: %ТекстОшибки%'; en='Error loading testcases: %ТекстОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекстОшибки%", ТекстОшибки);
		ВывестиСообщение(ТекстСообщения);
		Возврат;
		
	КонецПопытки;
	
	ЗагрузитьТестыИзМодуляОбъекта(ЭтаФорма, ТестовыйНаборФорма, ТестовыйНабор, ОчередьОповещений, ИмяФормы);
	ОповеститьОЗагрузкеТестов(ОчередьОповещений)
	
КонецПроцедуры

// Загружает список управляемых форм из которых нужно получить тестовые случаи
//
// Параметры:
//	ЮнитОбъект 	  			- ОбработкаОбъект 			- Преобразованный реквизит формы "Объект" в объект прикладного тип
//  Родитель   	  			- ДанныеФормыЭлементДерева 	- Элемент дерева "ДеревоТестов"
//  ВнешнийОбъект 			- ВнешняяОбработкаОбъект, 
//							  ВнешнийОтчетОбъект, 
//							  ОбработкаОбъект, 
//							  ОтчетОбъект 				- Объект содержащий тестовые случаи  
//
&НаСервере
Процедура ЗагрузитьСписокТестовыхФормИзМодуляОбъекта(ЮнитОбъект, ТестовыйНабор, СтрокаТестовогоНабора)
	Перем GUID;
	
	МетаданныеОбъекта = ТестовыйНабор.Метаданные();
	Если МетаданныеОбъекта.Формы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		СписокТестовыхФорм = ВыполнитьНеобязательнуюФункциюОбъекта(ТестовыйНабор, "ПолучитьСписокТестовыхФорм",, Новый Массив);
	Исключение
		ТекстОшибки = НСтр("ru = 'Не удалось загрузить список тестовых форм объекта:
								 |  Ошибка получения списка тестовых форм: %1'");
		ЮнитОбъект.ВывестиОшибку(СтрЗаменить(ТекстОшибки, "%1", ОписаниеОшибки()));
		СтрокаТестовогоНабора.Состояние = ЗначенияСостоянияТестов.Сломался; // TODO: нужно ли отображение, что при получении списка форм вывалилась ошибка?
	КонецПопытки;
	
	// Обычные формы при проведении тестов в управляемом режиме не поддерживаются
	ТипФормыОбъекта = Метаданные.СвойстваОбъектов.ТипФормы.Управляемая;
	
	Если МетаданныеОбъекта.ОсновнаяФорма <> Неопределено
	   И МетаданныеОбъекта.ОсновнаяФорма.ТипФормы = ТипФормыОбъекта Тогда
		
		ИмяОсновнойФормы = МетаданныеОбъекта.ОсновнаяФорма.Имя;
		
	ИначеЕсли МетаданныеОбъекта.ДополнительнаяФорма <> Неопределено 
			И МетаданныеОбъекта.ДополнительнаяФорма.ТипФормы = ТипФормыОбъекта Тогда
		
		ИмяОсновнойФормы = МетаданныеОбъекта.ДополнительнаяФорма.Имя;
		
	Иначе
		ИмяОсновнойФормы = Неопределено;
	КонецЕсли;
	
	GUID = СтрокаТестовогоНабора._GUID;
	
	Для Каждого Форма Из МетаданныеОбъекта.Формы Цикл
		Если Форма.ТипФормы = ТипФормыОбъекта Тогда
			Если Форма.Имя <> ИмяОсновнойФормы Тогда
				Если СписокТестовыхФорм.Найти(Форма.Имя) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			НоваяЗапись = ТаблицаИменаФорм.Добавить();
			НоваяЗапись.GUID = GUID;
			НоваяЗапись.ИмяФормы = Форма.Имя;
			НоваяЗапись.ИмяОбъекта = МетаданныеОбъекта.Имя;
			НоваяЗапись.ОсновнаяФорма = Форма.Имя = ИмяОсновнойФормы;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСписокТестовыхФормИзОсновнойФормыОбъекта(ТестовыйНабор, ИмяФормы)
	Перем GUID;
	
	Попытка
		Форма = ПолучитьФормуОбъекта(ТестовыйНабор.ТестовыйСлучайОбъектМетаданныхИмя, ИмяФормы, ТестовыйНабор.ЭтоВнутренняяОбработка);
		ЕстьМетодОбъекта = Ложь;
		СписокТестовыхФорм = ВыполнитьНеобязательнуюФункциюОбъекта(Форма, "ПолучитьСписокТестовыхФорм",,, ЕстьМетодОбъекта);
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		ТекстСообщения = НСтр("ru='ОШИБКА загрузки тестовых форм из основной формы объекта: %ТекстОшибки%'; en='Error loading testforms from main object form: %ТекстОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекстОшибки%", ТекстОшибки);
		ВывестиСообщение(ТекстСообщения);
		Возврат;
		
	КонецПопытки;
	
	Если Не ЕстьМетодОбъекта Тогда
		Возврат;
	КонецЕсли;
	
	GUID = ТестовыйНабор._GUID;
	ПараметрыОтбора = Новый Структура("GUID, ОсновнаяФорма", GUID, Ложь);
	РезультатОтбора = ТаблицаИменаФорм.НайтиСтроки(ПараметрыОтбора);
	Для Каждого ЭлементОтбора Из РезультатОтбора Цикл
		ТаблицаИменаФорм.Удалить(ЭлементОтбора);
	КонецЦикла;
	
	Для Каждого ИмяТестовойФормы Из СписокТестовыхФорм Цикл
		Если ИмяТестовойФормы <> ИмяФормы Тогда
			НоваяЗапись = ТаблицаИменаФорм.Добавить();
			НоваяЗапись.GUID = GUID;
			НоваяЗапись.ИмяФормы = ИмяТестовойФормы;
			НоваяЗапись.ОсновнаяФорма = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗагрузитьТестыИзМодуляОбъекта(ЮнитОбъект, ТестовыйНабор, СтрокаТестовогоНабора, ОчередьОповещений, ИмяФормы = "")
	
	ПолныйПуть = СтрокаТестовогоНабора.ПолныйПуть;
	
	ТестовыеМетоды = ПолучитьТестовыеСлучаи(ЮнитОбъект, ТестовыйНабор, ПолныйПуть);
	Если Не ЗначениеЗаполнено(ТестовыеМетоды) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		РазрешенСлучайныйПорядокВыполнения = РазрешенСлучайныйПорядокВыполненияТестов(ТестовыйНабор, ПолныйПуть);
	Исключение
		ЮнитОбъект.ВывестиОшибку(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	Если ТипЗнч(ЮнитОбъект) = Тип("УправляемаяФорма") Тогда
		МодульИлиФорма = ЮнитОбъект.ЗначениеМодульИлиФорма.Форма;
		ТипСтроки = ЮнитОбъект.ЗначенияТиповСтроки.ТестовыйМетод;
	Иначе
		МодульИлиФорма = ЮнитОбъект.мЗначениеМодульИлиФорма.Модуль;
		ТипСтроки = ЮнитОбъект.мЗначенияТиповСтроки.ТестовыйМетод;
	КонецЕсли;
	
	Для Каждого МетодТестовогоНабора Из ТестовыеМетоды Цикл
		
		Если ТипЗнч(МетодТестовогоНабора) = Тип("Строка") Тогда
			ИмяТестовогоСлучая = МетодТестовогоНабора;
			ПараметрыТеста = Неопределено;
			ПредставлениеТеста = ИмяТестовогоСлучая;
		Иначе
			ИмяТестовогоСлучая = МетодТестовогоНабора.ИмяТеста;
			ПараметрыТеста = МетодТестовогоНабора;
			Если Не ПараметрыТеста.Свойство("ПредставлениеТеста", ПредставлениеТеста) Или Не ЗначениеЗаполнено(ПредставлениеТеста) Тогда
				ПредставлениеТеста = ИмяТестовогоСлучая;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыСтроки = Новый Структура;
		ПараметрыСтроки.Вставить("Имя", ПредставлениеТеста);
		ПараметрыСтроки.Вставить("ПолныйПуть", ПолныйПуть);
		ПараметрыСтроки.Вставить("ИмяТестовогоСлучая", ИмяТестовогоСлучая);
		ПараметрыСтроки.Вставить("ПараметрыТеста", ПараметрыТеста);
		ПараметрыСтроки.Вставить("МодульИлиФорма", МодульИлиФорма);
		ПараметрыСтроки.Вставить("ИмяФормы", ИмяФормы);
		ПараметрыСтроки.Вставить("РазрешенСлучайныйПорядокВыполнения", РазрешенСлучайныйПорядокВыполнения);
		
		СтрокаТеста = ДобавитьТестовыйМетод(ТипСтроки, ПараметрыСтроки, СтрокаТестовогоНабора);
		
		ОчередьОповещений.Добавить(СтрокаТеста.ПолучитьИдентификатор());
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОЗагрузкеТестов(ОчередьОповещений)
	
	Для Каждого Оповещение Из ОчередьОповещений Цикл
		СтрокаТеста = Объект.ДеревоТестов.НайтиПоИдентификатору(Оповещение.Значение);
		Если СтрокаТеста <> Неопределено Тогда
			ОповеститьОСобытии("TestLoaded", СтрокаТеста);
		КонецЕсли;
	КонецЦикла;
	ОчередьОповещений.Очистить();
	
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Функция РазрешенСлучайныйПорядокВыполненияТестов(ТестОбъект, ПолноеИмяОбъекта) Экспорт
	
	ИмяМетода = "РазрешенСлучайныйПорядокВыполненияТестов";
	Попытка
		РазрешенСлучайныйПорядок = ВыполнитьНеобязательнуюФункциюОбъекта(ТестОбъект, ИмяМетода,, Истина);
	Исключение
		ТекстОшибки = НСтр("ru = 'Набор тестов не загружен: %1:
								 |  Ошибка вызова метода %2 из теста: %3'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", ПолноеИмяОбъекта);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%2", ИмяМетода);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%3", ОписаниеОшибки());
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Возврат РазрешенСлучайныйПорядок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьФормуОбъекта(ИдентификаторОбработки, ИмяФормы, ЭтоВнутренняяОбработка)
	
	Если ЭтоВнутренняяОбработка Тогда
		Форма = ПолучитьФорму("Обработка." + ИдентификаторОбработки + ".Форма." + ИмяФормы);
	Иначе
		Форма = ПолучитьФорму("ВнешняяОбработка." + ИдентификаторОбработки + ".Форма." + ИмяФормы);
	КонецЕсли;
	
	Возврат Форма;
	
КонецФункции

&НаКлиенте
Функция ДобавитьЭлементИерархииТестовыхНаборов(ТипСтроки, ПараметрыСтроки, РодительскаяСтрока)
	
	НоваяСтрока = РодительскаяСтрока.ПолучитьЭлементы().Добавить();
	
	НоваяСтрока.ТипСтроки = ТипСтроки;
	НоваяСтрока.Имя = ПараметрыСтроки.Имя;
	НоваяСтрока.ПолныйПуть = ПараметрыСтроки.ПолныйПуть;
	НоваяСтрока.Состояние = ЗначенияСостоянияТестов.НеВыполнялся;
	НоваяСтрока._guid = Строка(Новый УникальныйИдентификатор);
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаСервере
Функция ДобавитьТестовыйНабор(ПараметрыСтроки, РодительскаяСтрока)
	
	НоваяСтрока = РодительскаяСтрока.ПолучитьЭлементы().Добавить();
	
	НоваяСтрока.ТипСтроки = ЗначенияТиповСтроки.ТестовыйСлучай;
	НоваяСтрока.Имя = ПараметрыСтроки.Имя;
	НоваяСтрока.ПолныйПуть = ПараметрыСтроки.ПолныйПуть;
	НоваяСтрока.Состояние = ЗначенияСостоянияТестов.НеВыполнялся;
	НоваяСтрока._guid = Строка(Новый УникальныйИдентификатор);
	
	НоваяСтрока.ТестовыйСлучайОбъектМетаданныхИмя = ПараметрыСтроки.ТестовыйСлучайОбъектМетаданныхИмя;
	НоваяСтрока.ЭтоВнутренняяОбработка = ПараметрыСтроки.ЭтоВнутренняяОбработка;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьТестовыйМетод(ТипСтроки, ПараметрыСтроки, РодительскаяСтрока)
	
	НоваяСтрока = РодительскаяСтрока.ПолучитьЭлементы().Добавить();
	
	НоваяСтрока.ТипСтроки = ТипСтроки;
	НоваяСтрока.Имя = ПараметрыСтроки.Имя;
	НоваяСтрока.ПолныйПуть = ПараметрыСтроки.ПолныйПуть;
	НоваяСтрока._guid = Строка(Новый УникальныйИдентификатор);
	
	НоваяСтрока.ИмяТестовогоНабора = РодительскаяСтрока.Имя;
	НоваяСтрока.ИмяТестовогоСлучая = ПараметрыСтроки.ИмяТестовогоСлучая;
	НоваяСтрока.ТестовыйСлучайОбъектМетаданныхИмя = РодительскаяСтрока.ТестовыйСлучайОбъектМетаданныхИмя;
	НоваяСтрока.ЭтоВнутренняяОбработка = РодительскаяСтрока.ЭтоВнутренняяОбработка;
	НоваяСтрока.МодульИлиФорма = ПараметрыСтроки.МодульИлиФорма;
	НоваяСтрока.ИмяОсновнойУправляемойФормы = ПараметрыСтроки.ИмяФормы;
	НоваяСтрока.РазрешенСлучайныйПорядокВыполнения = ПараметрыСтроки.РазрешенСлучайныйПорядокВыполнения;
	
	ПараметрыТеста = ПараметрыСтроки.ПараметрыТеста;
	НоваяСтрока.ЕстьПараметрыТеста = ПараметрыТеста <> Неопределено;
	Если НоваяСтрока.ЕстьПараметрыТеста Тогда
		НоваяСтрока.ПараметрыТеста = ПараметрыТеста;
		Если НоваяСтрока.Имя = НоваяСтрока.ИмяТестовогоСлучая Тогда
			ОписаниеПараметра = "<пусто>";
			Если ПараметрыТеста.Свойство("Параметр") Тогда
				ОписаниеПараметра = Строка(ПараметрыТеста.Параметр);
			КонецЕсли;
			
			НоваяСтрока.Имя = НоваяСтрока.Имя + " ( " + ОписаниеПараметра + " )";
		КонецЕсли;
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции

//#Область ОбработкаПараметровЗапуска

// { Обработка параметров запуска

// Пример строки запуска - "Тесты_Команда_Тестировать;E:\ТестыИМ\Тесты;ЗавершитьРаботуПослеТестирования"
//	"C:\Program Files (x86)\1cv82\8.2.18.96\bin\1cv8c.exe" /DisableStartupMessages /Execute E:\ТестыИМ\xddTestRunner.epf /S "server\ib" /Out "E:\ТестыИМ\Тесты\log.txt"  /C "Тесты_Команда_Тестировать;E:\ТестыИМ\Тесты;ЗавершитьРаботуПослеТестирования" /LogUI
&НаКлиенте
Функция ОбработатьПараметрыЗапуска(СтрокаПараметровЗапуска)
	
	ПараметрыЗапуска = РазобратьПараметрыЗапускаСервер(СтрокаПараметровЗапуска);
	Если ПараметрыЗапуска = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьЗначенияНастроекПоУмолчанию(ЭтаФорма);
	
	ПутьКТестам = ПараметрыЗапуска.ПутьТестов;
	Если ЗначениеЗаполнено(ПутьКТестам) Тогда
		Пути.Добавить(ПутьКТестам);
	КонецЕсли;
	
	ОбновитьНадписьПути();
	
	//ПутьОтчетаТестирования  = ПараметрыЗапуска.ПутьОтчета;
	УстановитьТипОтчетаТестирования(ЭтаФорма, ПараметрыЗапуска.ФорматОтчета);
	
	Объект.РегистрацияПрохожденияТестовВЖР = ПараметрыЗапуска.РегистрацияПрохожденияТестовВЖР;
	Объект.РегистрацияОшибокТестовВЖР      = ПараметрыЗапуска.РегистрацияОшибокТестовВЖР;
	Объект.СлучайныйПорядокВыполнения      = ПараметрыЗапуска.СлучайныйПорядокВыполнения;
	Объект.РежимОтладки                    = ПараметрыЗапуска.РежимОтладки;
	
	Объект.ВыводЛогаВФорматеTeamCity = ПараметрыЗапуска.ВыводЛогаВФорматеTeamCity;
	
	ПривестиИнерфейсВСоответствиеСНастройками(ЭтаФорма);
	Если Не ПараметрыЗапуска.Загрузить Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоЗапускВПакетномРежиме = Истина; // ПараметрыЗапуска.ОстановитьСистему;
	
	ПакетныйРежимЗапуска_ЗагрузитьТесты(ПараметрыЗапуска);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПакетныйРежимЗапуска_ЗагрузитьТесты(ПараметрыЗапуска)
	
	ПутьКФайлуЛога = ПараметрыЗапуска.ПутьКодаВозврата;
	ЗаписатьКодВозвратаВЛогФайл(ПутьКФайлуЛога, "1"); //По умолчанию считаем что ошибка. Перед завершением работы запишем 0.
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Оповещение = Вычислить("Новый ОписаниеОповещения(""ПакетныйРежимЗапуска_ПослеЗагрузкиТестов"", ЭтотОбъект, ПараметрыЗапуска)");
		LoadAllTests(, Оповещение);
	Иначе
		LoadAllTests();
		ПакетныйРежимЗапуска_ПослеЗагрузкиТестов(Неопределено, ПараметрыЗапуска);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПакетныйРежимЗапуска_ПослеЗагрузкиТестов(НеиспользуемыйПараметр, ПараметрыЗапуска) Экспорт
	
	лЗавершитьРаботуПослеТестирования = ПараметрыЗапуска.ОстановитьСистему;
	Если Объект.ДеревоТестов.ПолучитьЭлементы().Количество() = 0 Тогда
		ОписаниеОшибки = СтрЗаменить(НСтр("ru = 'ОШИБКА загрузки тестов: путь <%1>'; en = 'Error loading testcases: path <%1>'"), "%1", ПараметрыЗапуска.ПутьТестов);
		ВывестиСообщение(ОписаниеОшибки);
		ЗарегистрироватьОшибкуЗапускаТестированияСервер(ПараметрыЗапуска.ПутьТестов, ОписаниеОшибки);
		Если лЗавершитьРаботуПослеТестирования Тогда
			ЗавершитьРаботуСистемы(Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПакетныйРежимЗапуска_ОпределитьПутьОтчетаТестирования(ПараметрыЗапуска);
	
КонецПроцедуры

&НаКлиенте
Процедура ПакетныйРежимЗапуска_ОпределитьПутьОтчетаТестирования(ПараметрыЗапуска)
	Перем ПутьОтчета;
	
	Если ПустаяСтрока(ПараметрыЗапуска.ПутьОтчета) Тогда
		Если Не ПараметрыЗапуска.ВстроенныеТесты Тогда
			ПутьОтчета = ПараметрыЗапуска.ПутьТестов;
		КонецЕсли;
	Иначе
		ПутьОтчета = ПараметрыЗапуска.ПутьОтчета
	КонецЕсли;
	
	Если ПустаяСтрока(ПутьОтчета) Тогда
		ВывестиОшибку(НСтр("ru = 'ОШИБКА загрузки тестов: не задан путь отчета о тестировании.'"));
		Если ПараметрыЗапуска.ОстановитьСистему Тогда
			ЗавершитьРаботуСистемы(Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Оповещение = Вычислить("Новый ОписаниеОповещения(""ПакетныйРежимЗапуска_ПослеПолученияСвойствФайлаОтчетаТестирования"", ЭтотОбъект, ПараметрыЗапуска)");
		СвойстваФайла(ПутьОтчета, Оповещение);
	Иначе
		СвойстваФайла = СвойстваФайла(ПутьОтчета);
		ПакетныйРежимЗапуска_ПослеПолученияСвойствФайлаОтчетаТестирования(СвойстваФайла, ПараметрыЗапуска);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПакетныйРежимЗапуска_ПослеПолученияСвойствФайлаОтчетаТестирования(СвойстваФайла, ПараметрыЗапуска) Экспорт
	
	Если СвойстваФайла.Свойство("ОписаниеОшибки") Тогда
		ВывестиОшибку(СвойстваФайла.ОписаниеОшибки);
		Если ПараметрыЗапуска.ОстановитьСистему Тогда
			ЗавершитьРаботуСистемы(Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Файл = СвойстваФайла.Файл;
	Если ПустаяСтрока(ПараметрыЗапуска.ПутьОтчета) Тогда
		Если СвойстваФайла.ЭтоКаталог Тогда
			УстановитьПутьОтчетаТестирования(Файл.ПолноеИмя);
		Иначе
			УстановитьПутьОтчетаТестирования(Файл.Путь);
		КонецЕсли;
	Иначе
		Если СвойстваФайла.Существует Тогда
			Если СвойстваФайла.ЭтоКаталог Тогда
				УстановитьПутьОтчетаТестирования(Файл.ПолноеИмя);
			Иначе
				УстановитьПутьОтчетаТестирования(Файл.Путь, Файл.Имя);
			КонецЕсли;
		Иначе
			УстановитьПутьОтчетаТестирования(Файл.Путь, Файл.Имя);
			Если ЕстьПоддержкаАсинхронныхВызовов Тогда
				Оповещение = Вычислить("Новый ОписаниеОповещения(""ПакетныйРежимЗапуска_ПослеПроверкиСуществованияПутиОтчетаТестирования"", ЭтотОбъект, ПараметрыЗапуска)");
				СвойстваФайла(Файл.Путь, Оповещение);
			Иначе
				Результат = СвойстваФайла(Файл.Путь);
				ПакетныйРежимЗапуска_ПослеПроверкиСуществованияПутиОтчетаТестирования(Результат, ПараметрыЗапуска);
			КонецЕсли;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПакетныйРежимЗапуска_ВыполнитьТесты(ПараметрыЗапуска);
	
КонецПроцедуры

&НаКлиенте
Процедура ПакетныйРежимЗапуска_ПослеПроверкиСуществованияПутиОтчетаТестирования(СвойстваФайла, ПараметрыЗапуска) Экспорт
	
	Если СвойстваФайла.Свойство("ОписаниеОшибки") Тогда
		УстановитьПутьОтчетаТестирования("", "");
		ВывестиОшибку(СвойстваФайла.ОписаниеОшибки);
		Если ПараметрыЗапуска.ОстановитьСистему Тогда
			ЗавершитьРаботуСистемы(Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Не СвойстваФайла.Существует Тогда
		УстановитьПутьОтчетаТестирования("", "");
		ТекстОшибки = СтрЗаменить(НСтр("ru = 'ОШИБКА загрузки тестов: Ожидали, что каталог отчета тестирования будет существовать, а он не существует. Путь <%1>'"), "%1", СвойстваФайла.Файл.ПолноеИмя);
		ВывестиОшибку(ТекстОшибки);
		Если ПараметрыЗапуска.ОстановитьСистему Тогда
			ЗавершитьРаботуСистемы(Ложь);
		КонецЕсли;
	Иначе
		ПакетныйРежимЗапуска_ВыполнитьТесты(ПараметрыЗапуска);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПакетныйРежимЗапуска_ВыполнитьТесты(ПараметрыЗапуска)
	
	лЗавершитьРаботуПослеТестирования = ПараметрыЗапуска.ОстановитьСистему;
	Если ПараметрыЗапуска.Выполнить Тогда
		
		Попытка
			КодРезультатаТестирования = RunAllTests();
		Исключение
			
			ТекстОшибки = ОписаниеОшибки();
			ТекстСообщения = НСтр("ru='ОШИБКА выполнения тестов: %ТекстОшибки%'; en='Error running testcases: %ТекстОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекстОшибки%", ТекстОшибки); 
			ВывестиСообщение(ТекстСообщения);
			
			Если лЗавершитьРаботуПослеТестирования Тогда
				ЗавершитьРаботуСистемы(Ложь);
				Возврат;
			КонецЕсли;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если лЗавершитьРаботуПослеТестирования Тогда
		
		ЗаписатьКодВозвратаВЛогФайл(ПараметрыЗапуска.ПутьКодаВозврата, "0", КодРезультатаТестирования);
		ЗавершитьРаботуСистемы(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьКодВозвратаВЛогФайл(ПутьКФайлуЛога, КодВозврата, КодРезультатаТестирования = Неопределено)
	
	Попытка
		Запись = Новый ЗаписьТекста(ПутьКФайлуЛога);
		Запись.ЗаписатьСтроку(КодВозврата);
		Если КодРезультатаТестирования <> Неопределено Тогда
			Запись.ЗаписатьСтроку(КодРезультатаТестирования);
		КонецЕсли;
		Запись.Закрыть();
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка записи лог-файла кода возврата: путь <%1>'");
		ВывестиСообщение(СтрЗаменить(ТекстСообщения, "%1", ПутьКФайлуЛога) + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция РазобратьПараметрыЗапускаСервер(СтрокаПараметровЗапуска)
	Возврат Объект().РазобратьПараметрыЗапуска(СтрокаПараметровЗапуска);
КонецФункции

&НаСервере
Функция ЗарегистрироватьОшибкуЗапускаТестированияСервер(ПолныйПуть, ОписаниеОшибки)
	Объект().ЗарегистрироватьОшибкуЗапускаТестирования(ПолныйПуть, ОписаниеОшибки);
КонецФункции

// }

//#КонецОбласти



&НаКлиенте
Процедура ОбновитьНадписьПути()
	
	Если Пути.Количество() = 1 Тогда
		ПутиНадпись = Пути[0].Значение;
		Элементы.ПутиНадпись.МногострочныйРежим = Ложь;
	Иначе
		ПутиНадпись = "";
		КонечныйИндекс = Пути.Количество() - 1;
		Для Индекс = 0 По КонечныйИндекс Цикл
			Если Индекс = КонечныйИндекс Тогда
				ПутиНадпись = ПутиНадпись + Пути[Индекс].Значение;
			Иначе
				ПутиНадпись = ПутиНадпись + Пути[Индекс].Значение + Символы.ПС;
			КонецЕсли;
		КонецЦикла;
		Элементы.ПутиНадпись.МногострочныйРежим = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура изменяет значение реквизита обработки и устанавливает пометку на кнопке командной панели
//
// Параметры:
//	ИмяРеквизитаОбъекта 	 - Строка - Имя реквизита типа "Булево"
//  ИмяКнопкиКоманднойПанели - Строка - Имя кнопки командной панели для которой нужно изменить реквизит "Пометка"
//
&НаКлиенте
Процедура ИзменитьЗначениеРеквизитаИУстановитьПометкуНаКнопке(ИмяРеквизитаОбработки, ИмяКнопкиКоманднойПанели)
	
	Объект[ИмяРеквизитаОбработки] = НЕ Объект[ИмяРеквизитаОбработки];
	Элементы[ИмяКнопкиКоманднойПанели].Пометка = Объект[ИмяРеквизитаОбработки];
	
КонецПроцедуры



&НаКлиенте
Функция ВывестиОшибку(Ошибка) Экспорт
	НужныйТекстОшибки = ПолучитьРазвернутыйТекстОшибки(Ошибка);
	
	ВывестиСообщение(НужныйТекстОшибки, СтатусСообщения.Важное);
	
	Возврат НужныйТекстОшибки;
КонецФункции

Функция ПолучитьРазвернутыйТекстОшибки(Ошибка)
	ТипОбъектаОшибка = ТипЗнч(Ошибка);
	
	Если ТипОбъектаОшибка = Тип("Структура") Тогда
		
		НужныйТекстОшибки = "[" + Ошибка.ИмяТестовогоНабора + ": " + Ошибка.ИмяТестовогоСлучая + "] " + Ошибка.Описание;
		
	ИначеЕсли ТипОбъектаОшибка = Тип("ИнформацияОбОшибке") Тогда
		
		НужныйТекстОшибки = Ошибка.Описание;
		
	Иначе
		
		НужныйТекстОшибки = Ошибка;
		
	КонецЕсли;
	Возврат НужныйТекстОшибки;
КонецФункции

// Выводит сообщение. В тестах ВСЕГДА должна использоваться ВМЕСТО метода Сообщить().
// 
&НаКлиенте
Функция ВывестиСообщение(ТекстСообщения, Статус = Неопределено) Экспорт
	Если MiddleMan <> Неопределено Тогда
		Если НЕ ОповеститьОСобытии("Message", ТекстСообщения) Тогда
			ОповеститьОСобытии("ВывестиСообщение", ТекстСообщения);
		КонецЕсли;
	Иначе
		Если Объект.ВыводЛогаВФорматеTeamCity Тогда
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"|","||");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"'","|'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"[","|[");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"]","|]");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,Символы.ВК,"|r");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,Символы.ПС,"|n");
			
			СтатусДляTeamCity = ?(Статус = Неопределено, СтатусСообщения.Обычное, Статус);
			Сообщить("##teamcity[message text='"+ТекстСообщения+"' errorDetails='' status='"+СоответствиеСтатусовДляTeamCity[СтатусДляTeamCity]+"']");
		Иначе
			Сообщить(ТекстСообщения, Статус);
		КонецЕсли;
	КонецЕсли;
КонецФункции

// Вызывает исключение с заданным текстом ошибки для прерывания выполнения тестового случая.
// 
&НаКлиенте
Функция ПрерватьТест(ТекстОшибки) Экспорт
	
	ВызватьИсключение ТекстОшибки;
	
КонецФункции


//#КонецОбласти

//#КонецОбласти



// { Методы генерации тестовых данных

// количествоСозданныхОбъектов учитывает только созданные элементы справочников, документы и пользователей ИБ. Записи регистров сведений не считаются!
&НаКлиенте
Функция СоздатьДанныеПоТабличномуДокументу(ТабличныйДокумент, РежимыЗагрузкиИлиИмяКолонкиЗамещения = Неопределено, ИмяКолонкиЗамещения = Неопределено) Экспорт
	Данные = СоздатьДанныеПоТабличномуДокументуСервер(ТабличныйДокумент, РежимыЗагрузкиИлиИмяКолонкиЗамещения, ИмяКолонкиЗамещения);
	Возврат Данные;
КонецФункции

&НаСервере
Функция СоздатьДанныеПоТабличномуДокументуСервер(ТабличныйДокумент, РежимыЗагрузкиИлиИмяКолонкиЗамещения, ИмяКолонкиЗамещения) //Экспорт
	Данные = Объект().СоздатьДанныеПоТабличномуДокументу(ТабличныйДокумент, РежимыЗагрузкиИлиИмяКолонкиЗамещения, ИмяКолонкиЗамещения);
	Возврат Неопределено; //Данные;
КонецФункции
//}

// { работа с данными текущего теста

&НаКлиенте
Процедура УстановитьДанныеТекущегоТеста(ДанныеТекущегоТеста)
	
	УстановитьКонтекст(ДанныеТекущегоТеста, ИдентификаторКонтекстаДанныхТекущегоТеста());
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДанныеТекущегоТеста()
	
	УдалитьКонтекст(ИдентификаторКонтекстаДанныхТекущегоТеста());
	
КонецПроцедуры

&НаКлиенте
Функция ПустыеДанныеТекущегоТеста()
	
	ДанныеТеста = Новый Структура;
	ДанныеТеста.Вставить("Имя", "");
	ДанныеТеста.Вставить("ПолныйПуть", "");
	ДанныеТеста.Вставить("СостояниеТеста", "");
	
	Возврат ДанныеТеста;
	
КонецФункции

Функция ИдентификаторКонтекстаДанныхТекущегоТеста()
	
	Возврат "xUnitFor1C_ДанныеТекущегоТеста";
	
КонецФункции

// }

// { работа с тестами


&НаКлиенте
Функция ПодключитьНаСервереВнешнююОбработкуОтКлиента(ПолныйПутьФайлаОбработки, ИдентификаторОбработки, РежимОтладки = Ложь)
	
	ИмяВнешнейОбработки = "";
	
	Если ЕстьПоддержкаНемодальныхФорм Тогда
		ПараметрыПодключения = Новый Структура;
		ПараметрыПодключения.Вставить("ИдентификаторОбработки", ИдентификаторОбработки);
		ПараметрыПодключения.Вставить("РежимОтладки", РежимОтладки);
		
		Оповещение = Вычислить("Новый ОписаниеОповещения(""ПодключитьВнешнююОбработкуПослеПолученияФайла"", ЭтаФорма, ПараметрыПодключения)");
		Выполнить("НачатьПомещениеФайла(Оповещение, , ПолныйПутьФайлаОбработки, Ложь);");// Адрес действителен только на 1 вызов сервера!
	Иначе
		АдресХранилища = "";
		ПоместитьФайл(АдресХранилища, ПолныйПутьФайлаОбработки, , Ложь);
		ИмяВнешнейОбработки = ПодключитьВнешнююОбработку(АдресХранилища, ПолныйПутьФайлаОбработки, ИдентификаторОбработки, РежимОтладки);
	КонецЕсли;
	
	Возврат ИмяВнешнейОбработки;
	
КонецФункции

&НаКлиенте
Процедура ПодключитьВнешнююОбработкуПослеПолученияФайла(НеИспользуется, АдресХранилища, ВыбранноеИмяФайла, ПараметрыПодключения) Экспорт
	
	ИмяВнешнейОбработки = ПодключитьВнешнююОбработку(АдресХранилища, ВыбранноеИмяФайла, ПараметрыПодключения.ИдентификаторОбработки, ПараметрыПодключения.РежимОтладки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодключитьВнешнююОбработку(Знач АдресХранилища, Знач ВыбранноеИмяФайла, Знач ИдентификаторОбработки = Неопределено, Знач РежимОтладки = Ложь)
	
	Если РежимОтладки Тогда
		Файл = Новый Файл(ВыбранноеИмяФайла);
		Если Файл.Существует() Тогда
			//Это файловый вариант или обработка доступна с сервера
			ВнешниеОбработки.Создать(ВыбранноеИмяФайла, Ложь);
		Иначе
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресХранилища);
			ВременноеИмяФайла = ПолучитьИмяВременногоФайла("epf");
			ДвоичныеДанные.Записать(ВременноеИмяФайла);
			ВнешниеОбработки.Создать(ВременноеИмяФайла, Ложь);
		КонецЕсли;
		ИмяОбработки = ВнешниеОбработки.Подключить(АдресХранилища,, Ложь);
	Иначе
		ИмяОбработки = ВнешниеОбработки.Подключить(АдресХранилища, ИдентификаторОбработки, Ложь);
	КонецЕсли;
	
	Возврат ИмяОбработки;
	
КонецФункции



&НаСервереБезКонтекста
Функция ЕстьВстроеннаяОбработкаСервер(ИдентификаторОбработки)
	Возврат Метаданные.Обработки.Найти(ИдентификаторОбработки) <> Неопределено;
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеВстроеннойОбработкиСервер(ИдентификаторОбработки)
	Возврат Метаданные.Обработки.Найти(ИдентификаторОбработки).Представление();
КонецФункции


&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТестовыеСлучаи(Ю_Тест, ТестовыйСлучайОбъект, ТестовыйСлучайИмяФайла)
	
	Попытка
		СписокТестов = ВыполнитьНеобязательнуюФункциюОбъекта(ТестовыйСлучайОбъект, "ПолучитьСписокТестов", Ю_Тест);
	Исключение
		ТекстОшибки = НСтр("ru = 'Тестовый случай не загружен: %1
								 |  Ошибка получения списка тестовых случаев: %2'");
		Ю_Тест.ВывестиОшибку(СтрЗаменить(СтрЗаменить(ТекстОшибки, "%1", ТестовыйСлучайИмяФайла), "%2", ОписаниеОшибки()));
		СписокТестов = Неопределено;
	КонецПопытки;
	
	Если СписокТестов = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(СписокТестов) <> Тип("Массив") Тогда
		ТекстОшибки = НСтр("ru = 'Тест не загружен: %1
								 |  Ошибка получения списка тестовых случаев: вместо массива
								 |имен тестовых случаев получен объект <%2>'");
		Ю_Тест.ВывестиОшибку(СтрЗаменить(СтрЗаменить(ТекстОшибки, "%1", ТестовыйСлучайИмяФайла), "%2", Строка(ТипЗнч(СписокТестов))));
		
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СписокТестов;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтрокиДереваВСлучайномПорядке(МассивИдентификаторовСтрок) Экспорт
	Отбор = Новый Структура("РазрешенСлучайныйПорядокВыполнения", Ложь);
	МассивСтрокДерева = ПолучитьТолькоТестовыеМетодыИзДерева(МассивИдентификаторовСтрок, Отбор);
	
	Отбор = Новый Структура("РазрешенСлучайныйПорядокВыполнения", Истина);
	МассивСтрокДереваДляСлучайногоВыполнения = ПолучитьТолькоТестовыеМетодыИзДерева(МассивИдентификаторовСтрок, Отбор);
	
	ПеремешанныеСтрокиДерева = ПеремешатьМассив(МассивСтрокДереваДляСлучайногоВыполнения);
	Для каждого Элем Из ПеремешанныеСтрокиДерева Цикл
		МассивСтрокДерева.Добавить(Элем);
	КонецЦикла;
	
	Возврат МассивСтрокДерева;
КонецФункции

&НаКлиенте
Функция ПолучитьМассивИдентификаторовСтрок(СтрокаДереваТестов)
	МассивИдентификаторовСтрок = Новый Массив();
	Для каждого ЭлементДерева Из СтрокаДереваТестов.ПолучитьЭлементы() Цикл
		МассивИдентификаторовСтрок.Добавить(ЭлементДерева.ПолучитьИдентификатор());
	КонецЦикла;
	Возврат МассивИдентификаторовСтрок;
КонецФункции

&НаКлиенте
Функция ПолучитьТолькоТестовыеМетодыИзДерева(МассивИдентификаторовСтрок, Отбор = Неопределено, МассивДляДобавления = Неопределено)
	Если МассивДляДобавления=Неопределено Тогда
		МассивДляДобавления = Новый Массив;
	КонецЕсли;
	Для каждого Идентификатор из МассивИдентификаторовСтрок Цикл
		СтрокаДереваТестов = Объект.ДеревоТестов.НайтиПоИдентификатору(Идентификатор);
		
		Если СтрокаДереваТестов.ТипСтроки = ЗначенияТиповСтроки.ТестовыйМетод Тогда
			Если ЗначениеЗаполнено(Отбор) И Не СтрокаДереваУдовлетворяетОтбору(СтрокаДереваТестов, Отбор) Тогда
				Продолжить;
			КонецЕсли;
			
			Если МассивДляДобавления.Найти(Идентификатор) = Неопределено Тогда
				МассивДляДобавления.Добавить(Идентификатор);
			КонецЕсли;
			
		Иначе
			НовыйМассив = ПолучитьМассивИдентификаторовСтрок(СтрокаДереваТестов);
			ПолучитьТолькоТестовыеМетодыИзДерева(НовыйМассив, Отбор, МассивДляДобавления);
			
		КонецЕсли;
		
	КонецЦикла;
	Возврат МассивДляДобавления;
КонецФункции

&НаКлиенте
Функция СтрокаДереваУдовлетворяетОтбору(СтрокаДерева, Отбор)
	
	Для Каждого КлючЗначение Из Отбор Цикл
		Если СтрокаДерева[КлючЗначение.Ключ] <> КлючЗначение.Значение Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ОбновитьСостояниеВыбранныхСтрок(ВыбранныеСтроки)
	
	СостояниеВыполнения = ЗначенияСостоянияТестов.НеВыполнялся;
	ВремяВыполнения = 0;
	Для Каждого СтрокаИлиИдентификатор Из ВыбранныеСтроки Цикл
		
		Если ТипЗнч(СтрокаИлиИдентификатор) = Тип("ДанныеФормыЭлементДерева") Тогда
			Строка = СтрокаИлиИдентификатор;
		Иначе
			Строка = Объект.ДеревоТестов.НайтиПоИдентификатору(СтрокаИлиИдентификатор);
		КонецЕсли;
		
		Если Строка.ТипСтроки <> ЗначенияТиповСтроки.ТестовыйМетод Тогда
			Состояние = ОбновитьСостояниеВыбранныхСтрок(Строка.ПолучитьЭлементы());
			Строка.Состояние = Состояние.СостояниеВыполнения;
			Строка.ВремяВыполнения = Состояние.ВремяВыполнения;
		КонецЕсли;
		
		ЗапомнитьСамоеХудшееСостояние(СостояниеВыполнения, Строка.Состояние);
		ВремяВыполнения = ВремяВыполнения + Строка.ВремяВыполнения;
		
	КонецЦикла;
	
	Возврат Новый Структура("СостояниеВыполнения, ВремяВыполнения", СостояниеВыполнения, ВремяВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСостояниеРодителейВыбранныхСтрок(МассивИдентификаторовСтрок)
	
	Для Каждого Идентификатор Из МассивИдентификаторовСтрок Цикл
		СтрокаДереваТестов = Объект.ДеревоТестов.НайтиПоИдентификатору(Идентификатор);
		ИзменитьСостояниеВыполненияРодителей(СтрокаДереваТестов);
		ИзменитьВремяВыполненияРодителей(СтрокаДереваТестов);
	КонецЦикла;
	
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Функция ПеремешатьМассив(ИсходныйМассив)
	
	Результат = Новый Массив;
	Для Каждого Элемент Из ИсходныйМассив Цикл
		Результат.Добавить(Элемент);
	КонецЦикла;
	
	// алгоритм перемешивания взят из книги Кнута "Искусство программирования" т.2
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	ПоследнийИндекс = Результат.ВГраница();
	Для Индекс = 1 По ПоследнийИндекс Цикл
		ТекущийИндекс = ПоследнийИндекс - Индекс + 1;
		НовыйИндекс = ГСЧ.СлучайноеЧисло(0, ТекущийИндекс);
		Если НовыйИндекс <> ТекущийИндекс Тогда
			Значение = Результат[НовыйИндекс];
			Результат[НовыйИндекс] = Результат[ТекущийИндекс];
			Результат[ТекущийИндекс] = Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВЫПОЛНЕНИЕ ТЕСТОВ

&НаКлиенте
Процедура ВыполнитьВыделенныеТесты(ВызыватьИсключение = Ложь)
	
	ОчиститьСообщения();
	
	МассивИдентификаторовСтрок = Элементы.ДеревоТестов.ВыделенныеСтроки;
	
	_ВыполнитьВыбранныеТесты(МассивИдентификаторовСтрок, ВызыватьИсключение);
	
КонецПроцедуры

&НаКлиенте
Функция _ВыполнитьВыбранныеТесты(МассивИдентификаторовСтрок, ВызыватьИсключение = Ложь)
	
	датаНачалаТестирования = ТекущаяДата();
	
	Если Объект.СлучайныйПорядокВыполнения Тогда
		НовыйМассивИдентификаторовСтрок = ПолучитьСтрокиДереваВСлучайномПорядке(МассивИдентификаторовСтрок);
	Иначе
		НовыйМассивИдентификаторовСтрок = ПолучитьТолькоТестовыеМетодыИзДерева(МассивИдентификаторовСтрок);
	КонецЕсли;
	
	ПередВыполнениемТестов(НовыйМассивИдентификаторовСтрок);
	
	ИнициализироватьИндикаторВыполнения(НовыйМассивИдентификаторовСтрок.Количество());
	
	СостояниеРезультат = _ВыполнитьТесты(НовыйМассивИдентификаторовСтрок, ВызыватьИсключение);
	
	ОбновитьСостояниеВыбранныхСтрок(МассивИдентификаторовСтрок);
	ОбновитьСостояниеРодителейВыбранныхСтрок(МассивИдентификаторовСтрок);
	СвернутьУспешныеСтрокиДереваИРазвернутьНеуспешные(Объект.ДеревоТестов.ПолучитьЭлементы(), Истина);
	
	ОбработатьОтчетТестирования(датаНачалаТестирования);
	
	Возврат СостояниеРезультат;
КонецФункции

&НаКлиенте
Процедура СброситьКэшТестовыхОбработок()
	
	кэшТестовыхОбработок = Новый Соответствие;
	УдалитьИзВременногоХранилища(АдресОбъектаНаСервере);
	
КонецПроцедуры

&НаКлиенте
Функция _ВыполнитьТесты(МассивИдентификаторовСтрок, ВызыватьИсключение = Ложь) Экспорт
	СостояниеРезультат = ЗначенияСостоянияТестов.НеВыполнялся;
	Для каждого ИдентификаторСтроки из МассивИдентификаторовСтрок Цикл
		ОбработкаПрерыванияПользователя();
		
		ВсегоТестов = ВсегоТестов + 1;
		СтрокаДереваТестов = Объект.ДеревоТестов.НайтиПоИдентификатору(ИдентификаторСтроки); // обход бага платформы
		НовоеСостояние = ВыполнитьТестВЗависимостиОтВидаТеста_МодульИлиФорма(СтрокаДереваТестов, СписокОшибок, ВызыватьИсключение);
		
		ЗапомнитьСамоеХудшееСостояние(СостояниеРезультат, НовоеСостояние);
	КонецЦикла;
	
	Возврат СостояниеРезультат;
КонецФункции

&НаКлиенте
Функция ВыполнитьТестВЗависимостиОтВидаТеста_МодульИлиФорма(СтрокаДереваТестов, СписокОшибок, ВызыватьИсключение = Ложь)
	
	Родитель = СтрокаДереваТестов.ПолучитьРодителя();
	Если Не Родитель.ЭтоВнутренняяОбработка Тогда
		ТестОбъект = кэшТестовыхОбработок.Получить(Родитель.ПолныйПуть);
		Если ТестОбъект = Неопределено Тогда
			Попытка
				ПодключитьНаСервереВнешнююОбработкуОтКлиента(Родитель.ПолныйПуть, Родитель.ТестовыйСлучайОбъектМетаданныхИмя, Объект.РежимОтладки);
			Исключение
				СостояниеВыполнения = ВывестиОшибкуВыполненияТеста(СтрокаДереваТестов, ИнформацияОбОшибке(), СписокОшибок, Объект.РегистрацияОшибокТестовВЖР);
				СтрокаДереваТестов.Состояние = СостояниеВыполнения;
				Возврат СостояниеВыполнения;
			КонецПопытки;
			кэшТестовыхОбработок.Вставить(Родитель.ПолныйПуть, Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаДереваТестов.МодульИлиФорма = ЗначениеМодульИлиФорма.Форма Тогда
		СостояниеРезультат = ВыполнитьТест(СтрокаДереваТестов, ВызыватьИсключение);
	Иначе
		
		ОповеститьОСобытии("TestStart", СтрокаДереваТестов);
		СостояниеРезультат = ВыполнитьТестНаСервере(СтрокаДереваТестов.ПолучитьИдентификатор(), СписокОшибок, ВызыватьИсключение);
		
		Если СостояниеРезультат = ЗначенияСостоянияТестов.Сломался Тогда
			ОповеститьОСобытии("TestFailed", СтрокаДереваТестов);
		ИначеЕсли СостояниеРезультат = ЗначенияСостоянияТестов.НеРеализован Тогда
			ОповеститьОСобытии("TestNotImplemented", СтрокаДереваТестов);
		Иначе
			ОповеститьОСобытии("TestPassed", СтрокаДереваТестов);
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаДереваТестов.Состояние = СостояниеРезультат;
	
	Возврат СостояниеРезультат;
КонецФункции

&НаКлиенте
Функция ВыполнитьТест(СтрокаДереваТестов, ВызыватьИсключение = Ложь) Экспорт
	Перем Тест; // специально локальная переменная для исключения циклических ссылок
	
	ИдентификаторСтроки = СтрокаДереваТестов.ПолучитьИдентификатор();
	
	ТекущаяДатаВМиллисекундах = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ПолныйПуть = СтрокаДереваТестов.ПолныйПуть;
	
	Если Объект.РегистрацияПрохожденияТестовВЖР Тогда
		ЗарегистрироватьНачалоПрохожденияТестаСервер(СтрокаДереваТестов.Имя, ПолныйПуть);
	КонецЕсли;
	
	СтрокаДереваТестов.СписокОшибок.Очистить();
	
	Попытка
		Тест = ПолучитьТестОбъект(СтрокаДереваТестов);
	Исключение
		Возврат ВывестиОшибкуВыполненияТеста(СтрокаДереваТестов, ИнформацияОбОшибке(), СписокОшибок, Объект.РегистрацияОшибокТестовВЖР);
	КонецПопытки;
	
	Если ЭтоПервыйТестовыйМетодНабора(СтрокаДереваТестов) Тогда
		Попытка
			ВыполнитьНеобязательнуюПроцедуруОбъекта(Тест, "ПередЗапускомНабораТестов");
		Исключение
			Возврат ВывестиОшибкуВыполненияТеста(СтрокаДереваТестов, ИнформацияОбОшибке(), СписокОшибок, Объект.РегистрацияОшибокТестовВЖР);
		КонецПопытки;
	КонецЕсли;
	
	УчестьЗапускТеста(СтрокаДереваТестов);
	
	СостояниеВыполнения = ВыполнитьМетодыТеста(Тест, СтрокаДереваТестов, ВызыватьИсключение);
	СтрокаДереваТестов = Объект.ДеревоТестов.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ЭтоПоследнийТестовыйМетодНабора(СтрокаДереваТестов) Тогда
		Попытка
			ВыполнитьНеобязательнуюПроцедуруОбъекта(Тест, "ПослеЗапускаНабораТестов");
		Исключение
			НовоеСостояние = ВывестиОшибкуВыполненияТеста(СтрокаДереваТестов, ИнформацияОбОшибке(), СписокОшибок, Объект.РегистрацияОшибокТестовВЖР);
			ЗапомнитьСамоеХудшееСостояние(СостояниеВыполнения, НовоеСостояние);
		КонецПопытки;
	КонецЕсли;
	
	СтрокаДереваТестов.ВремяВыполнения = Число(ТекущаяУниверсальнаяДатаВМиллисекундах() - ТекущаяДатаВМиллисекундах) / 1000;
	Возврат СостояниеВыполнения;
	
КонецФункции

&НаКлиенте
Функция ВыполнитьМетодыТеста(Тест, СтрокаДереваТестов, ВызыватьИсключение)
	
	СостояниеВыполнения = ЗначенияСостоянияТестов.НеВыполнялся;
	
	ДанныеТекущегоТеста = ПустыеДанныеТекущегоТеста();
	ДанныеТекущегоТеста.Вставить("Имя", СтрокаДереваТестов.Имя);
	ДанныеТекущегоТеста.Вставить("ПолныйПуть", СтрокаДереваТестов.ПолныйПуть);
	ДанныеТекущегоТеста.Вставить("СостояниеТеста", СостояниеВыполнения);
	УстановитьДанныеТекущегоТеста(ДанныеТекущегоТеста);
	
	параметрыТеста = СтрокаДереваТестов.ПараметрыТеста;
	естьПараметры = СтрокаДереваТестов.ЕстьПараметрыТеста;
	
		//TODO Если первый раз запуск setup оказался неуспешным, то при повторном прогоне без перезагрузки
		// не выполнять, также не выполнять для следующих тестовых случаев.
	Попытка
		ВыполнитьНеобязательнуюПроцедуруОбъекта(Тест, "ПередЗапускомТеста");
	Исключение
		Возврат ВывестиОшибкуВыполненияТеста(СтрокаДереваТестов, ИнформацияОбОшибке(), СписокОшибок, Объект.РегистрацияОшибокТестовВЖР);
	КонецПопытки;
	
	ОповеститьОСобытии("TestStart", СтрокаДереваТестов);
	
	Попытка
		
		ВыполнитьТестовыйМетод(Тест, СтрокаДереваТестов, ВызыватьИсключение);
		СостояниеВыполнения = ЗначенияСостоянияТестов.Прошел;
		ОповеститьОСобытии("TestPassed", СтрокаДереваТестов);
		
	Исключение
		Если ВызыватьИсключение = Истина Тогда
			ВызватьИсключение;
		КонецЕсли;
		
		СостояниеВыполнения = ВывестиОшибкуВыполненияТеста(СтрокаДереваТестов, ИнформацияОбОшибке(), СписокОшибок, Объект.РегистрацияОшибокТестовВЖР);
		
	КонецПопытки;
	
	ДанныеТекущегоТеста.Вставить("СостояниеТеста", СостояниеВыполнения);
	УстановитьДанныеТекущегоТеста(ДанныеТекущегоТеста);
	
	Попытка
		ВыполнитьНеобязательнуюПроцедуруОбъекта(Тест, "ПослеЗапускаТеста");
	Исключение
		НовоеСостояние = ВывестиОшибкуВыполненияТеста(СтрокаДереваТестов, ИнформацияОбОшибке(), СписокОшибок, Объект.РегистрацияОшибокТестовВЖР);
		ЗапомнитьСамоеХудшееСостояние(СостояниеВыполнения, НовоеСостояние);
	КонецПопытки;
	
	УдалитьДанныеТекущегоТеста();
	
	Возврат СостояниеВыполнения;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьТестовыйМетод(Тест, СтрокаДереваТестов, ВызыватьИсключение);
	
	ПредставлениеТестовогоСлучая = СтрокаДереваТестов.Имя;
	ИмяТестовогоСлучая = СтрокаДереваТестов.ИмяТестовогоСлучая;
	
	СтрокаПараметров = "";
	Если СтрокаДереваТестов.ЕстьПараметрыТеста Тогда
		ПараметрТеста = Неопределено;
		Если СтрокаДереваТестов.ПараметрыТеста.Свойство("Параметр", ПараметрТеста) Тогда
			СтрокаПараметров = "ПараметрТеста";
		КонецЕсли;
	КонецЕсли;
	
	Если ВызыватьИсключение = Истина Тогда
		ВызватьИсключение "ПередЗапускомТеста " + ПредставлениеТестовогоСлучая + " обработка: " + СтрокаДереваТестов.ПолныйПуть;
	КонецЕсли;
	
	Попытка
		ИcполняемыйКод = "Тест." + ИмяТестовогоСлучая + "(" + СтрокаПараметров + ");";
		Выполнить(ИcполняемыйКод);
	Исключение
		
		текстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если ЕстьОшибка_МетодОбъектаНеОбнаружен(текстОшибки, ИмяТестовогоСлучая) Тогда
			Сообщение = НСтр("ru = 'Отсутствует реализация тестового метода (%1).'");
			ПропуститьТест(СтрЗаменить(Сообщение, "%1", ИcполняемыйКод));
		Иначе
			ВызватьИсключение;
		КонецЕсли;
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТестОбъект(СтрокаДереваТестов)
	
	ПолныйПуть = СтрокаДереваТестов.ПолныйПуть;
	ИдентификаторКэша = ПолныйПуть + СтрокаДереваТестов.ИмяОсновнойУправляемойФормы;
	Тест = кэшТестовыхОбработок.Получить(ИдентификаторКэша);
	Если Тест = Неопределено Тогда
		
		ИдентификаторОбработки = СтрокаДереваТестов.ТестовыйСлучайОбъектМетаданныхИмя;
		ИмяФормыТеста = СтрокаДереваТестов.ИмяОсновнойУправляемойФормы;
		Тест = ПолучитьФормуОбъекта(ИдентификаторОбработки, ИмяФормыТеста, СтрокаДереваТестов.ЭтоВнутренняяОбработка);
		
		ТестИнициализирован = ВыполнитьНеобязательнуюПроцедуруОбъекта(Тест, "Инициализация", ЭтаФорма);
		Если Не ТестИнициализирован Тогда
			
			массивТестов = ПолучитьТестовыеСлучаи(ЭтаФорма, Тест, ПолныйПуть); // возможно, что тест сохранит у себя ссылку на браузер
			Если Не ЗначениеЗаполнено(массивТестов) Тогда
				ВызватьИсключение НСтр("ru = 'Не удалось получить тестовые случаи'");
			КонецЕсли;
			
		КонецЕсли;
		
		кэшТестовыхОбработок.Вставить(ИдентификаторКэша, Тест);
		
	КонецЕсли;
	
	Возврат Тест;
	
КонецФункции

&НаСервере
Функция ВыполнитьТестНаСервере(ИдентификаторСтрокиТестовогоМетода, СписокОшибокРез, ВызыватьИсключение)
	ОсновнойОбъект = Объект();
	ОсновнойОбъект.Мир = Объект.Мир;
	ОсновнойОбъект.СостояниеВыполненияНаборовТестов = Объект.СостояниеВыполненияНаборовТестов;
	
	рез = ОсновнойОбъект.ВыполнитьТест(Объект.ДеревоТестов.НайтиПоИдентификатору(ИдентификаторСтрокиТестовогоМетода), 
		СписокОшибокРез, Объект.РегистрацияПрохожденияТестовВЖР, Объект.РегистрацияОшибокТестовВЖР, ВызыватьИсключение);
	
	Объект.Мир = ОсновнойОбъект.Мир;
	Объект.СостояниеВыполненияНаборовТестов = ОсновнойОбъект.СостояниеВыполненияНаборовТестов;
	Возврат рез;
КонецФункции

&НаКлиенте
Процедура ПередВыполнениемТестов(ЗапускаемыеТесты)
	
	СписокОшибок = Новый СписокЗначений;
	ВсегоТестов = 0;
	
	СброситьКэшТестовыхОбработок();
	ИнициализироватьСостояниеВыполненияНаборовТестов(ЗапускаемыеТесты);
	
КонецПроцедуры

&НаКлиенте
Функция ВывестиОшибкуВыполненияТеста(СтрокаДереваТестов, ИнфоОшибки, СписокОшибок, РегистрироватьОшибкуВЖР)
	
	СостояниеВыполнения = ЗначенияСостоянияТестов.Сломался;
	
	СтруктураОшибки = Новый Структура;
	
	ТекстОшибки = КраткоеПредставлениеОшибки(ИнфоОшибки);
	Если ЭтоПропущенныйТест(ТекстОшибки) Тогда
		СостояниеВыполнения = ЗначенияСостоянияТестов.НеРеализован;
		СтруктураОшибки.Вставить("Статус", СтатусыРезультатаТестирования.ТестПропущен);
		стИнфоОшибки = Новый Структура;
		стИнфоОшибки.Вставить("Описание", ТекстОшибки);
	ИначеЕсли ЭтоОшибкаПроверки(ТекстОшибки) Тогда
		СтруктураОшибки.Вставить("Статус", СтатусыРезультатаТестирования.ОшибкаПроверки);
		стИнфоОшибки = Новый Структура;
		стИнфоОшибки.Вставить("Описание", ТекстОшибки);
	Иначе
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнфоОшибки);
		СтруктураОшибки.Вставить("Статус", СтатусыРезультатаТестирования.НеизвестнаяОшибка);
		стИнфоОшибки = СкопироватьИнформациюОбОшибке(ИнфоОшибки);
	КонецЕсли;
	
	ПредставлениеТестовогоСлучая = СтрокаДереваТестов.Имя;
	СтруктураОшибки.Вставить("ИмяТестовогоНабора",    СтрокаДереваТестов.ИмяТестовогоНабора);
	СтруктураОшибки.Вставить("ИмяТестовогоСлучая",    ПредставлениеТестовогоСлучая);
	СтруктураОшибки.Вставить("Описание",              ТекстОшибки);
	СтруктураОшибки.Вставить("ИнфоОшибки",            стИнфоОшибки);
	СтруктураОшибки.Вставить("ЕстьПараметрыТеста",    СтрокаДереваТестов.ЕстьПараметрыТеста);
	СтруктураОшибки.Вставить("ПараметрыТеста",        СтрокаДереваТестов.ПараметрыТеста);
	СтруктураОшибки.Вставить("ПолныйПуть",            СтрокаДереваТестов.ПолныйПуть);
	СтруктураОшибки.Вставить("УИДСтрокиДерева",       СтрокаДереваТестов._guid);
	
	СтрокаДереваТестов.СписокОшибок.Добавить(СтруктураОшибки);
	СписокОшибок.Добавить(СтруктураОшибки);
	
	НужныйТекстОшибки = ВывестиОшибку(СтруктураОшибки);
	
	Если РегистрироватьОшибкуВЖР Тогда
		ЗарегистрироватьОшибкуТестаСервер(НужныйТекстОшибки, ПредставлениеТестовогоСлучая, СтрокаДереваТестов.ПолныйПуть);
	КонецЕсли;
	
	Если СостояниеВыполнения = ЗначенияСостоянияТестов.НеРеализован Тогда
		ОповеститьОСобытии("TestNotImplemented", СтрокаДереваТестов);
	Иначе
		ОповеститьОСобытии("TestFailed", СтрокаДереваТестов);
	КонецЕсли;

	УстановитьДанныеТекущегоТеста(Неопределено);	
	
	Возврат СостояниеВыполнения;
	
КонецФункции

&НаКлиенте
Функция СкопироватьИнформациюОбОшибке(Знач ИнфоОшибки)
	
	стИнфоОшибки = Новый Структура("ИмяМодуля, ИсходнаяСтрока, НомерСтроки, Описание");
	ЗаполнитьЗначенияСвойств(стИнфоОшибки, ИнфоОшибки);
	стИнфоОшибки.Вставить("Причина", Неопределено);
	
	стИнфоОшибкиЦикл = стИнфоОшибки;
	ИнфоОшибки = ИнфоОшибки.Причина;
	Пока ИнфоОшибки <> Неопределено Цикл
		стИнфоОшибкиЦикл.Причина = Новый Структура("ИмяМодуля, ИсходнаяСтрока, НомерСтроки, Описание");
		стИнфоОшибкиЦикл = стИнфоОшибкиЦикл.Причина;
		ЗаполнитьЗначенияСвойств(стИнфоОшибкиЦикл, ИнфоОшибки);
		стИнфоОшибкиЦикл.Вставить("Причина", Неопределено);
		
		ИнфоОшибки = ИнфоОшибки.Причина;
	КонецЦикла;
	
	Возврат стИнфоОшибки;
	
КонецФункции

&НаКлиенте
Функция ЭтоОшибкаПроверки(ТекстОшибки)
	
	Возврат Найти(ТекстОшибки, "[" + СтатусыРезультатаТестирования.ОшибкаПроверки + "]") = 1;
	
КонецФункции

&НаКлиенте
Функция ЭтоПропущенныйТест(ТекстОшибки)
	
	Возврат Найти(ТекстОшибки, "["+ СтатусыРезультатаТестирования.ТестПропущен + "]") = 1;
	
КонецФункции

&НаКлиенте
Функция ОповеститьОСобытии(ИмяСобытия, Аргумент1 = Неопределено) Экспорт
	рез = Истина;
	Если MiddleMan <> Неопределено Тогда
		Попытка
			Выполнить("MiddleMan." + ИмяСобытия + "(Аргумент1);");
		Исключение
			рез = Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Оповестить("xUnitFor1C." + ИмяСобытия, Аргумент1);
	
	Возврат рез;
КонецФункции

&НаКлиенте
Функция ЗапомнитьСамоеХудшееСостояние(ТекущееСостояние, НовоеСостояние)
	ТекущееСостояние = Макс(ТекущееСостояние, НовоеСостояние); // TODO некоторый хак, который зависит от порядка заполнения в мЗначенияСостоянияТестов
	Возврат ТекущееСостояние;
КонецФункции

&НаСервере
Процедура ЗарегистрироватьНачалоПрохожденияТестаСервер(ИмяТестовогоСлучая, ПолныйПуть)
	Объект().ЗарегистрироватьНачалоПрохожденияТеста(ИмяТестовогоСлучая, ПолныйПуть);
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьОшибкуТестаСервер(НужныйТекстОшибки, ИмяТестовогоСлучая, ПолныйПуть)
	Объект().ЗарегистрироватьОшибкуТеста(НужныйТекстОшибки, ИмяТестовогоСлучая, ПолныйПуть);
КонецПроцедуры

&НаКлиенте
Функция ИдентификаторПустогоКонтекста()
	Возврат "UF_xUnitFor1C_Empty";
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// КОНТРОЛЬ СОСТОЯНИЯ ВЫПОЛНЕНИЯ НАБОРОВ ТЕСТОВ

&НаКлиенте
Процедура ИнициализироватьСостояниеВыполненияНаборовТестов(ЗапускаемыеТесты)
	
	Объект.СостояниеВыполненияНаборовТестов = Новый Структура;
	
	Для Каждого ИдентификаторТеста Из ЗапускаемыеТесты Цикл
		
		ТестовыйМетод = Объект.ДеревоТестов.НайтиПоИдентификатору(ИдентификаторТеста);
		ЗарегистрироватьТестовыйМетодКЗапуску(ТестовыйМетод);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьТестовыйМетодКЗапуску(ТестовыйМетод)
	
	Состояние = СостояниеВыполненияНабораТестовТестовогоМетода(Тестовыйметод);
	Если Состояние = Неопределено Тогда
		Состояние = ДобавитьСостояниеВыполненияНабораТестовТестовогоМетода(ТестовыйМетод);
	КонецЕсли;
	
	Состояние.ТестыКЗапуску.Вставить(ИдентификаторПоУИД(ТестовыйМетод._GUID));
	
КонецПроцедуры

&НаКлиенте
Функция ДобавитьСостояниеВыполненияНабораТестовТестовогоМетода(ТестовыйМетод)
	
	Состояние = Новый Структура;
	Состояние.Вставить("ЭтоПервыйТестВНаборе", Истина);
	Состояние.Вставить("ТестыКЗапуску", Новый Структура);
	
	Объект.СостояниеВыполненияНаборовТестов.Вставить(ИдентификаторТестовогоНабора(ТестовыйМетод), Состояние);
	Возврат Состояние;
	
КонецФункции

&НаКлиенте
Процедура УчестьЗапускТеста(ТестовыйМетод)
	
	Состояние = СостояниеВыполненияНабораТестовТестовогоМетода(Тестовыйметод);
	Состояние.ТестыКЗапуску.Удалить(ИдентификаторПоУИД(ТестовыйМетод._GUID));
	Состояние.ЭтоПервыйТестВНаборе = Ложь;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоПервыйТестовыйМетодНабора(ТестовыйМетод)
	
	Состояние = СостояниеВыполненияНабораТестовТестовогоМетода(Тестовыйметод);
	Возврат Состояние.ЭтоПервыйТестВНаборе;
	
КонецФункции

&НаКлиенте
Функция ЭтоПоследнийТестовыйМетодНабора(ТестовыйМетод)
	
	Состояние = СостояниеВыполненияНабораТестовТестовогоМетода(Тестовыйметод);
	Возврат (Состояние.ТестыКЗапуску.Количество() = 0);
	
КонецФункции

&НаКлиенте
Функция СостояниеВыполненияНабораТестовТестовогоМетода(Тестовыйметод)
	Перем Состояние;
	
	Объект.СостояниеВыполненияНаборовТестов.Свойство(ИдентификаторТестовогоНабора(ТестовыйМетод), Состояние);
	Возврат Состояние;
	
КонецФункции

&НаКлиенте
Функция ИдентификаторТестовогоНабора(ТестовыйМетод)
	
	ТестовыйНабор = ТестовыйМетод.ПолучитьРодителя();
	Возврат ИдентификаторПоУИД(ТестовыйНабор._GUID) + ТестовыйМетод.ИмяОсновнойУправляемойФормы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторПоУИД(УИД)
	
	Возврат "_" + СтрЗаменить(УИД, "-", "_");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ОТЧЕТА О ТЕСТИРОВАНИИ

&НаСервере
Процедура ПодготовитьДанныеТестовДляОтчетаТестирования()
	
	АдресОсновныхДанныхОтчетаТестирования = Объект().ПодготовитьДанныеТестовОтчетаТестирования(Объект.ДеревоТестов, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтчетТестирования(датаНачалаТестирования)
	
	ОтчетТестирования = ПолучитьОтчетТестирования(датаНачалаТестирования, ТипОтчетаОТестировании);
	
	Если ОтчетТестирования <> Неопределено Тогда
		ПоказатьОтчетТестирования(ОтчетТестирования);
		Если Не ПустаяСтрока(ПутьОтчетаТестирования) Тогда
			ЗаписатьФайлОтчетТестирования(ОтчетТестирования);
		КонецЕсли;
	Иначе // все тесты прошли
		Если Не ПустаяСтрока(ПутьОтчетаТестирования) Тогда
			УдалитьФайлыОтчетовТестирования();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращаем Неопределено, если все тесты прошли
&НаСервере
Функция ПолучитьОтчетТестирования(Знач датаНачалаТестирования, Знач ТипОтчета = "mxl") Экспорт
	Возврат Объект().ПолучитьОтчетТестирования(АдресОсновныхДанныхОтчетаТестирования, датаНачалаТестирования, ТипОтчета, СписокОшибок, ВсегоТестов);
КонецФункции

&НаКлиенте
Процедура ПоказатьОтчетТестирования(Отчет)
	
	ЗаголовокОкнаОтчета = СтрЗаменить(НСтр("ru = 'Отчет об автоматическом тестировании, xUnitFor1C v.%1'"), "%1", ВерсияСервер());
	
	ТипКонтейнераОтчета = ТипЗнч(Отчет);
	Если ТипКонтейнераОтчета = Тип("ТабличныйДокумент") Тогда
		Отчет.Показать(ЗаголовокОкнаОтчета);
	ИначеЕсли ТипКонтейнераОтчета = Тип("ТекстовыйДокумент") Тогда
		Отчет.Показать(ЗаголовокОкнаОтчета);
	Иначе
		Текст = Новый ТекстовыйДокумент;
		Текст.УстановитьТекст(Строка(Отчет));
		Текст.Показать(ЗаголовокОкнаОтчета);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьФайлОтчетТестирования(Отчет)
	
	Попытка
		ТипКонтейнераОтчета = ТипЗнч(Отчет);
		Если ТипКонтейнераОтчета = Тип("ТекстовыйДокумент") Тогда
			Отчет.Записать(ПутьОтчетаТестирования);
		ИначеЕсли ТипКонтейнераОтчета = Тип("ТабличныйДокумент") Тогда
			Отчет.Записать(ПутьОтчетаТестирования, ТипФайлаТабличногоДокумента[ТипОтчетаОТестировании]);
		Иначе
			Текст = Новый ТекстовыйДокумент;
			Текст.УстановитьТекст(Строка(Отчет));
			Текст.Записать(ПутьОтчетаТестирования);
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайлыОтчетовТестирования()
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Выполнить("НачатьУдалениеФайлов(, ПутьОтчетаТестирования)");
	Иначе
		Попытка
			УдалитьФайлы(ПутьОтчетаТестирования);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТипОтчетаТестирования(Ю_Тест, ТипОтчета);
	
	Если ЗначениеЗаполнено(ТипОтчета) Тогда
		Ю_Тест.ТипОтчетаОТестировании = ТипОтчета;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПутьОтчетаТестирования(Путь, Имя = Неопределено);
	
	ПутьОтчетаТестирования = ДобавитьКонечныйРазделительПути(Путь) + ?(Имя = Неопределено, "лог_тестирования." + РасширениеФайлаПоТипуОтчета(ТипОтчетаОТестировании), Имя);
	
КонецПроцедуры

&НаКлиенте
Функция РасширениеФайлаПоТипуОтчета(ТипОтчета)
	
	Возврат ТипОтчета;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ИСТОРИЯ ВЫБОРА ТЕСТОВ

&НаСервере
Процедура ДобавитьВИсториюКонтекст(ИмяИстории, Путь)
	
	ДобавитьВИсторию(ЭтаФорма, ИмяИстории, Путь, ДлинаИстории, "Подключаемый_КомандаЗагрузитьТестыИзИстории");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьВИсторию(Форма, ИмяИстории, Путь, ДлинаИстории, Действие)
	
	История = Форма[ИмяИстории];
	Элементы = Форма.Элементы;
	Команды = Форма.Команды;
	
	Если ТипЗнч(Путь) <> Тип("Массив") Тогда
		Пути = Новый Массив;
		Пути.Добавить(Путь);
	Иначе
		Пути = Путь;
	КонецЕсли;
	
	Для Каждого ВыбранныйПуть Из Пути Цикл
		Элемент = История.НайтиПоЗначению(ВыбранныйПуть);
		Если Элемент = Неопределено Тогда
			История.Вставить(0, ВыбранныйПуть);
			Если История.Количество() = ДлинаИстории + 1 Тогда
				История.Удалить(ДлинаИстории);
			Иначе
				Команда = Команды.Добавить(ИмяИстории + Формат(История.Количество() - 1, "ЧН=0; ЧГ=0"));
				Команда.Действие = Действие;
				ПунктМеню = Элементы.Добавить(Команда.Имя, Тип("КнопкаФормы"), Элементы[ИмяИстории]);
				ПунктМеню.ИмяКоманды = Команда.Имя;
			КонецЕсли;
		Иначе
			Индекс = История.Индекс(Элемент);
			Если Индекс > 0 Тогда
				История.Сдвинуть(Элемент, -Индекс);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из История Цикл
		ПунктМеню = Элементы[ИмяИстории + Формат(История.Индекс(Элемент), "ЧН=0; ЧГ=0")];
		ПунктМеню.Заголовок = Элемент.Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьИсторию(ИмяИстории, История)
	
	КоличествоПунктовИстории = История.Количество();
	Для Индекс = 1 По КоличествоПунктовИстории Цикл
		ДобавитьВИсториюКонтекст(ИмяИстории, История[КоличествоПунктовИстории - Индекс]);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// НАСТРОЙКИ

&НаСервере
Процедура ИнициализироватьНастройки()
	
	УстановитьЗначенияНастроекПоУмолчанию(ЭтаФорма);
	ВосстановитьНастройки();
	ПривестиИнерфейсВСоответствиеСНастройками(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗначенияНастроекПоУмолчанию(Ю_Тест)
	
	Ю_Тест.ДлинаИстории = 10;
	
	Объект = Ю_Тест.Объект;
	Объект.РегистрацияПрохожденияТестовВЖР = Ложь;
	Объект.РегистрацияОшибокТестовВЖР = Ложь;
	Объект.РежимОтладки = Ложь;
	Объект.СлучайныйПорядокВыполнения = Ложь;
	
	Ю_Тест.Пути.Очистить();
	
	УстановитьТипОтчетаТестирования(Ю_Тест, "mxl");
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	Настройки = ХранилищеОбщихНастроек.Загрузить("xUnitFor1C");
	Если ТипЗнч(Настройки) <> Тип("Структура") Тогда
		Настройки = Новый Структура;
	КонецЕсли;
	
	Настройки.Вставить("РегистрацияПрохожденияТестовВЖР", Объект.РегистрацияПрохожденияТестовВЖР);
	Настройки.Вставить("РегистрацияОшибокТестовВЖР", Объект.РегистрацияОшибокТестовВЖР);
	Настройки.Вставить("РежимОтладки", Объект.РежимОтладки);
	Настройки.Вставить("СлучайныйПорядокВыполнения", Объект.СлучайныйПорядокВыполнения);
	
	Настройки.Вставить("Пути", Пути.ВыгрузитьЗначения());
	
	Настройки.Вставить("ДлинаИстории", ДлинаИстории);
	Настройки.Вставить("ИсторияВыбораМест", ИсторияВыбораМест.ВыгрузитьЗначения());
	Настройки.Вставить("ИсторияВыбораФайлов", ИсторияВыбораФайлов.ВыгрузитьЗначения());
	
	ХранилищеОбщихНастроек.Сохранить("xUnitFor1C",, Настройки);
	
	СброситьПризнак_БылаОшибкаПриПредыдущейЗагрузкеСервер();
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	Настройки = ХранилищеОбщихНастроек.Загрузить("xUnitFor1C");
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		
		Настройки.Свойство("РегистрацияПрохожденияТестовВЖР", Объект.РегистрацияПрохожденияТестовВЖР);
		Настройки.Свойство("РегистрацияОшибокТестовВЖР", Объект.РегистрацияОшибокТестовВЖР);
		Настройки.Свойство("РежимОтладки", Объект.РежимОтладки);
		Настройки.Свойство("СлучайныйПорядокВыполнения", Объект.СлучайныйПорядокВыполнения);
		
		Если Настройки.Свойство("Пути") Тогда
			Пути.ЗагрузитьЗначения(Настройки.Пути);
		КонецЕсли;
		
		Если Настройки.Свойство("ДлинаИстории") И ЗначениеЗаполнено(Настройки.ДлинаИстории) Тогда
			ДлинаИстории = Настройки.ДлинаИстории;
		КонецЕсли;
		Если Настройки.Свойство("ИсторияВыбораМест") Тогда
			ВосстановитьИсторию(Элементы.ИсторияВыбораМест.Имя, Настройки.ИсторияВыбораМест);
		КонецЕсли;
		Если Настройки.Свойство("ИсторияВыбораФайлов") Тогда
			ВосстановитьИсторию(Элементы.ИсторияВыбораФайлов.Имя, Настройки.ИсторияВыбораФайлов);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПривестиИнерфейсВСоответствиеСНастройками(Ю_Тест)
	
	Элементы = Ю_Тест.Элементы;
	Объект = Ю_Тест.Объект;
	
	Элементы.КомандаРегистрацияПрохожденияТестовВЖР.Пометка = Объект.РегистрацияПрохожденияТестовВЖР;
	Элементы.КомандаРегистрацияОшибокТестовВЖР.Пометка = Объект.РегистрацияОшибокТестовВЖР;
	Элементы.КомандаСлучайныйПорядокВыполнения.Пометка = Объект.СлучайныйПорядокВыполнения;
	Элементы.КомандаВключитьРежимОтладки.Пометка = Объект.РежимОтладки;
	
КонецПроцедуры

&НаСервере
Процедура СброситьПризнак_БылаОшибкаПриПредыдущейЗагрузкеСервер()
	Объект().УстановитьНастройку_БылаОшибкаПриПредыдущейЗагрузке(Ложь);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиенте
Функция ФорматДСО(ДопСообщениеОшибки)
	Если ДопСообщениеОшибки = "" Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Символы.ПС + ДопСообщениеОшибки;
КонецФункции

&НаКлиенте
Функция Новый_НаборТестов() Экспорт
	Возврат Новый Массив;
КонецФункции

&НаКлиенте
Функция НаборТестов_Добавить(НаборТестов, ИмяТестовогоСлучая, П1 = Неопределено, П2 = Неопределено, П3 = Неопределено,
                             П4 = Неопределено, П5 = Неопределено, П6 = Неопределено, П7 = Неопределено) Экспорт
	НаборТестов.Добавить(ИмяТестовогоСлучая);
	
	Возврат НаборТестов;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВыполнитьНеобязательнуюПроцедуруОбъекта(Объект, ИмяПроцедуры, Параметры = Неопределено)
	
	ПараметрыМетода = ПараметрыСтрокой(Параметры);
	
	Попытка
		Выполнить("Объект." + ИмяПроцедуры + "(" + ПараметрыМетода + ");");
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) ;
		Если Не ЕстьОшибка_МетодОбъектаНеОбнаружен(ТекстОшибки, ИмяПроцедуры) Тогда
			ВызватьИсключение;
		КонецЕсли;
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВыполнитьНеобязательнуюФункциюОбъекта(Объект, ИмяФункции, Параметры = Неопределено, ЗначениеПоУмолчанию = Неопределено, ЕстьМетодОбъекта = Неопределено)
	
	ПараметрыМетода = ПараметрыСтрокой(Параметры);
	
	Попытка
		Значение = Вычислить("Объект." + ИмяФункции + "(" + ПараметрыМетода + ")");
		ЕстьМетодОбъекта = Истина;
		Возврат Значение;
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) ;
		Если Не ЕстьОшибка_МетодОбъектаНеОбнаружен(ТекстОшибки, ИмяФункции) Тогда
			ВызватьИсключение;
		КонецЕсли;
		ЕстьМетодОбъекта = Ложь;
	КонецПопытки;
	
	Возврат ЗначениеПоУмолчанию;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьОшибка_МетодОбъектаНеОбнаружен(текстОшибки, имяМетода)
	Возврат Найти(ТекстОшибки, "Метод объекта не обнаружен (" + ИмяМетода + ")") > 0
		Или Найти(ТекстОшибки, "Object method not found (" + ИмяМетода + ")") > 0;
КонецФункции

&НаКлиенте
Функция ДобавитьКонечныйРазделительПути(Знач Каталог)
	
	Если ПустаяСтрока(Каталог) Тогда
		Возврат Каталог;
	КонецЕсли;
	
	Разделитель = "\";
	
	СисИнфо = Новый СистемнаяИнформация;
	Если Найти(Строка(СисИнфо.ТипПлатформы), "Linux") > 0 Тогда
		Разделитель = "/";
	КонецЕсли;
		
	Если Прав(Каталог, 1) <> Разделитель Тогда
		Каталог = Каталог + Разделитель;
	КонецЕсли;
	
	Возврат Каталог;
	
КонецФункции


// }


// Экспорт нужен для тестов
&НаКлиенте
Функция ОткрытьИнструмент(ИмяИнструмента) Экспорт
	
	Если Не ЭтоВстроеннаяОбработка Тогда
		Если ЕстьПоддержкаАсинхронныхВызовов Тогда
			Оповещение = Вычислить("Новый ОписаниеОповещения(""ОткрытьИнструментПослеПоискаЗапускателяТестов"", ЭтотОбъект, ИмяИнструмента)");
			Выполнить("НачатьПоискФайлов(Оповещение, ИспользуемоеИмяФайла);");
		Иначе
			НайденныеФайлы = НайтиФайлы(ИспользуемоеИмяФайла);
			Возврат ОткрытьИнструментПослеПоискаЗапускателяТестов(НайденныеФайлы, ИмяИнструмента);
		КонецЕсли;
	Иначе
		ИмяОбработки = ИмяИнструмента;
		Если Не ЕстьВстроеннаяОбработкаСервер(ИмяОбработки) Тогда
			Сообщить(СтрЗаменить(НСтр("ru = 'Инструмент/встроенная обработка <%1> не найден в конфигурации'"), "%1", ИмяИнструмента));
			Возврат Неопределено;
		КонецЕсли;
		Возврат ОткрытьИнструментПослеПолученияОбработки(ИмяОбработки, ИмяИнструмента);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ОткрытьИнструментПослеПоискаЗапускателяТестов(НайденныеФайлы, ИмяИнструмента) Экспорт
	
	Если НайденныеФайлы.Количество() = 0 Тогда
		Сообщить(НСтр("ru = 'Не удалось найти путь к xddTestRunner'"));
		Сообщить(СтрЗаменить(НСтр("ru = 'Не удалось открыть инструмент <%1>'"), "%1", ИмяИнструмента));
		Возврат Неопределено;
	КонецЕсли;
	
	ПутьВнешнихИнструментов = НайденныеФайлы[0].Путь;
	
	ПутьИнструмента = ПутьВнешнихИнструментов + ИмяИнструмента + ".epf";
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяИнструмента", ИмяИнструмента);
	ДополнительныеПараметры.Вставить("ПутьИнструмента", ПутьИнструмента);
	ДополнительныеПараметры.Вставить("ПутьВнешнихИнструментов", ПутьВнешнихИнструментов);
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Оповещение = Вычислить("Новый ОписаниеОповещения(""ОткрытьИнструментПослеПоискаИнструмента"", ЭтотОбъект, ДополнительныеПараметры)");
		Выполнить("НачатьПоискФайлов(Оповещение, ПутьИнструмента);");
	Иначе
		НайденныеФайлы = НайтиФайлы(ПутьИнструмента);
		Возврат ОткрытьИнструментПослеПоискаИнструмента(НайденныеФайлы, ДополнительныеПараметры);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ОткрытьИнструментПослеПоискаИнструмента(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	ИмяИнструмента = ДополнительныеПараметры.ИмяИнструмента;
	ПутьИнструмента = ДополнительныеПараметры.ПутьИнструмента;
	Если НайденныеФайлы.Количество() = 0 Тогда
		Сообщить(СтрЗаменить(СтрЗаменить(НСтр("ru = 'Инструмент <%1> не найден в каталоге <%2>'"), "%1", ИмяИнструмента), "%2", ПутьИнструмента));
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяОбработки = ПодключитьНаСервереВнешнююОбработкуОтКлиента(ПутьИнструмента, Строка(Новый УникальныйИдентификатор()));
	Возврат ОткрытьИнструментПослеПолученияОбработки(ИмяОбработки, ИмяИнструмента, ДополнительныеПараметры.ПутьВнешнихИнструментов);
	
КонецФункции

&НаКлиенте
Функция ОткрытьИнструментПослеПолученияОбработки(ИмяОбработки, ИмяИнструмента, ПутьВнешнихИнструментов = "")
	
	ИдентификаторИнструмента = ?(ЭтоВстроеннаяОбработка, "Обработка", "ВнешняяОбработка") + "." + ИмяОбработки;
	ФормаИнструмента = ПолучитьФорму(ИдентификаторИнструмента + ".Форма");
	Если ФормаИнструмента = Неопределено Тогда
		Сообщить(СтрЗаменить(НСтр("ru = 'Инструмент <%1>: не удалось получить основную управляемую форму!'"), "%1", ИмяИнструмента));
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЭтоВстроеннаяОбработка Тогда
		Попытка
			ФормаИнструмента.ПутьОбработкиЗапускателяТестов = ПутьВнешнихИнструментов;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ОткрытьФорму(ФормаИнструмента);
	Возврат ФормаИнструмента;
	
КонецФункции

&НаКлиенте
Функция МетаданныеИмя() Экспорт
	Возврат МетаданныеИмяСервер();
КонецФункции

&НаСервере
Функция МетаданныеИмяСервер()
	ОсновнойОбъект = Объект();
	НайденноеИмя = ОсновнойОбъект.Метаданные().Имя;
	
	Возврат НайденноеИмя;
КонецФункции



&НаКлиенте
Процедура ИнициализироватьИндикаторВыполнения(КоличествоТестовыхСлучаев = 0)
	
	Элементы.ИндикаторВыполнения.МаксимальноеЗначение = КоличествоТестовыхСлучаев;
	ИндикаторВыполнения = 0; //Элементы.ИндикаторВыполнения.Значение = 1;
	Элементы.ИндикаторВыполнения.ЦветРамки = Новый Цвет(0, 174, 0); // Зеленый.
	
	ОбновитьОтображениеДанных();
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
// Сравнить две строки версий.
//
// Параметры
//  СтрокаВерсии1  - Строка - номер версии в формате РР.{П|ПП}.ЗЗ.СС
//  СтрокаВерсии2  - Строка - второй сравниваемый номер версии
//
// Возвращаемое значение:
//   Число   - больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
//
Функция СравнитьВерсии(Знач СтрокаВерсии1, Знач СтрокаВерсии2) Экспорт
	
	Строка1 = ?(ПустаяСтрока(СтрокаВерсии1), "0.0.0.0", СтрокаВерсии1);
	Строка2 = ?(ПустаяСтрока(СтрокаВерсии2), "0.0.0.0", СтрокаВерсии2);
	Версия1 = РазложитьСтрокуВМассивПодстрок(Строка1, ".");
	Если Версия1.Количество() <> 4 Тогда
		ВызватьИсключение СтрЗаменить(НСтр("ru = 'Неправильный формат параметра СтрокаВерсии1: %1'"), "%1", СтрокаВерсии1);
	КонецЕсли;
	Версия2 = РазложитьСтрокуВМассивПодстрок(Строка2, ".");
	Если Версия2.Количество() <> 4 Тогда
		ВызватьИсключение СтрЗаменить(НСтр("ru = 'Неправильный формат параметра СтрокаВерсии2: %1'"), "%1", СтрокаВерсии2);
	КонецЕсли;
	
	Результат = 0;
	Для Разряд = 0 По 3 Цикл
		Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СкопироватьСтруктуру(Знач Источник, Знач СписокПолей = "", Знач ИсключаемыеПоля = "")
	
	Если Не ПустаяСтрока(СписокПолей) Тогда
		Приемник = Новый Структура(СписокПолей);
		ЗаполнитьЗначенияСвойств(Приемник, Источник);
	Иначе
		Если ПустаяСтрока(ИсключаемыеПоля) Тогда
			Исключить = Новый Структура;
		Иначе
			Исключить = Новый Структура(ИсключаемыеПоля);
		КонецЕсли;
		Приемник = Новый Структура;
		Для Каждого КлючЗначение Из Источник Цикл
			Если Не Исключить.Свойство(КлючЗначение.Ключ) Тогда
				Приемник.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Приемник;
	
КонецФункции

//}

////////////////////////////////////////////////////////////////////////////////
// ПОДДЕРЖКА АСИНХРОННОЙ ОБРАБОТКИ ФАЙЛОВ

&НаКлиенте
Функция СвойстваФайла(Файл, Оповещение = Неопределено)
	
	Контекст = Новый Структура;
	Контекст.Вставить("Оповещение", Оповещение);
	Контекст.Вставить("Результат", Новый Структура);
	
	Если ТипЗнч(Файл) = Тип("Файл") Тогда
		Контекст.Вставить("Файл", Файл);
		Возврат СвойстваФайлаПослеИнициализацииФайла(Контекст.Файл, Контекст);
	Иначе
		Если ЕстьПоддержкаАсинхронныхВызовов Тогда
			Контекст.Вставить("Файл", Вычислить("Новый Файл"));
			Оповещение = Вычислить("Новый ОписаниеОповещения(""СвойстваФайлаПослеИнициализацииФайла"", ЭтотОбъект, Контекст, ""ОбработатьФайлПослеОшибки"", ЭтотОбъект)");
			Контекст.Файл.НачатьИнициализацию(Оповещение, Файл);
		Иначе
			Попытка
				Контекст.Вставить("Файл", Новый Файл(Файл));
				Возврат СвойстваФайлаПослеИнициализацииФайла(Контекст.Файл, Контекст);
			Исключение
				Возврат ОбработатьФайлПослеОшибки(ИнформацияОбОшибке(), Неопределено, Контекст);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ОбработатьФайлПослеОшибки(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	Иначе
		ОписаниеОшибки = ИнформацияОбОшибке;
	КонецЕсли;
	
	Контекст.Результат.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	
	Возврат СвойстваФайлаВернутьРезультат(Контекст)
	
КонецФункции

&НаКлиенте
Функция СвойстваФайлаПослеИнициализацииФайла(Файл, Контекст) Экспорт
	
	Контекст.Результат.Вставить("Файл", Файл);
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Оповещение = Вычислить("Новый ОписаниеОповещения(""СвойстваФайлаПослеПроверкиСуществования"", ЭтотОбъект, Контекст, ""ОбработатьФайлПослеОшибки"", ЭтотОбъект)");
		Контекст.Файл.НачатьПроверкуСуществования(Оповещение);;
	Иначе
		Существует = Контекст.Файл.Существует();
		Возврат СвойстваФайлаПослеПроверкиСуществования(Существует, Контекст);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция СвойстваФайлаПослеПроверкиСуществования(Существует, Контекст) Экспорт
	
	Контекст.Результат.Вставить("Существует", Существует);
	
	Если Не Существует Тогда
		Возврат СвойстваФайлаВернутьРезультат(Контекст);
	КонецЕсли;
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Оповещение = Вычислить("Новый ОписаниеОповещения(""СвойстваФайлаПослеПроверкиЭтоКаталог"", ЭтотОбъект, Контекст, ""ОбработатьФайлПослеОшибки"", ЭтотОбъект)");
		Контекст.Файл.НачатьПроверкуЭтоКаталог(Оповещение);
	Иначе
		ЭтоКаталог = Контекст.Файл.ЭтоКаталог();
		Возврат СвойстваФайлаПослеПроверкиЭтоКаталог(ЭтоКаталог, Контекст);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция СвойстваФайлаПослеПроверкиЭтоКаталог(ЭтоКаталог, Контекст) Экспорт
	
	Контекст.Результат.Вставить("ЭтоКаталог", ЭтоКаталог);
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Оповещение = Вычислить("Новый ОписаниеОповещения(""СвойстваФайлаПослеПроверкиЭтоФайл"", ЭтотОбъект, Контекст, ""ОбработатьФайлПослеОшибки"", ЭтотОбъект)");
		Контекст.Файл.НачатьПроверкуЭтоФайл(Оповещение);
	Иначе
		ЭтоФайл = Контекст.Файл.ЭтоФайл();
		Возврат СвойстваФайлаПослеПроверкиЭтоФайл(ЭтоФайл, Контекст);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция СвойстваФайлаПослеПроверкиЭтоФайл(ЭтоФайл, Контекст) Экспорт
	
	Контекст.Результат.Вставить("ЭтоФайл", ЭтоФайл);
	
	Возврат СвойстваФайлаВернутьРезультат(Контекст);
	
КонецФункции

&НаКлиенте
Функция СвойстваФайлаВернутьРезультат(Контекст)
	
	Если ЕстьПоддержкаАсинхронныхВызовов Тогда
		Выполнить("ВыполнитьОбработкуОповещения(Контекст.Оповещение, Контекст.Результат);");
	Иначе
		Возврат Контекст.Результат;
	КонецЕсли;
	
КонецФункции
