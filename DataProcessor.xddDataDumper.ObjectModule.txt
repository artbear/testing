
Процедура ОбновитьСписокОбъектов() Экспорт
	Отбор = Новый Структура("ИспользоватьОткорректированныйЗапрос", Истина);
	СтрокиСОткорректированнымЗапросом = ОбъектыКонфигурации.Выгрузить(Отбор);
	ОбъектыКонфигурации.Очистить();
	
	НаборКоллекций = НаборКоллекцийДляВыгрузки();
	Для каждого Строка из НаборКоллекций Цикл
		ЗаполнитьОбъектыКонфигурацииПоТипу(Строка.ТипОбъектаКакВМетаданных, Строка.ТипОбъектаКакВЗапросе);
	КонецЦикла;
	
	
	Для каждого Строка из СтрокиСОткорректированнымЗапросом Цикл
		Отбор = Новый Структура("Тип,Вид");
		ЗаполнитьЗначенияСвойств(Отбор, Строка);
		НайденныеСтроки = ОбъектыКонфигурации.НайтиСтроки(Отбор);
		Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(НайденнаяСтрока, Строка);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция НаборКоллекцийДляВыгрузки()
	
	НаборКоллекций = Новый ТаблицаЗначений;
	НаборКоллекций.Колонки.Добавить("ТипОбъектаКакВМетаданных");
	НаборКоллекций.Колонки.Добавить("ТипОбъектаКакВЗапросе");
	
	НоваяСтрока = НаборКоллекций.Добавить();
	НоваяСтрока.ТипОбъектаКакВМетаданных = "Справочники";
	НоваяСтрока.ТипОбъектаКакВЗапросе = "Справочник";
	
	НоваяСтрока = НаборКоллекций.Добавить();
	НоваяСтрока.ТипОбъектаКакВМетаданных = "Документы";
	НоваяСтрока.ТипОбъектаКакВЗапросе = "Документ";
	
	НоваяСтрока = НаборКоллекций.Добавить();
	НоваяСтрока.ТипОбъектаКакВМетаданных = "РегистрыНакопления";
	НоваяСтрока.ТипОбъектаКакВЗапросе = "РегистрНакопления";
	
	НоваяСтрока = НаборКоллекций.Добавить();
	НоваяСтрока.ТипОбъектаКакВМетаданных = "РегистрыСведений";
	НоваяСтрока.ТипОбъектаКакВЗапросе = "РегистрСведений";
	
	НоваяСтрока = НаборКоллекций.Добавить();
	НоваяСтрока.ТипОбъектаКакВМетаданных = "Константы";
	НоваяСтрока.ТипОбъектаКакВЗапросе = "Константа";
	
	Возврат НаборКоллекций;
	
КонецФункции
Процедура ЗаполнитьОбъектыКонфигурацииПоТипу(ТипОбъектаКакВМетаданных, ТипОбъектаКакВЗапросе)
	
	Коллекция = Метаданные[ТипОбъектаКакВМетаданных];
	Для каждого ЭлементКоллекции из Коллекция Цикл
		НоваяСтрока = ОбъектыКонфигурации.Добавить();
		НоваяСтрока.Тип = ТипОбъектаКакВЗапросе;
		НоваяСтрока.Вид = ЭлементКоллекции.Имя;
		НоваяСтрока.Запрос = ТекстЗапросаНаВыборкуДанных(ЭлементКоллекции, ТипОбъектаКакВЗапросе);
	КонецЦикла;
КонецПроцедуры
Функция ТекстЗапросаНаВыборкуДанных(ОбъектМетаданных, ТипОбъектаКакВЗапросе)

	ТекстЗапроса = ТекстЗапросаНаВыборкуДанных_ТаблицаОписанияДанных(ОбъектМетаданных, ТипОбъектаКакВЗапросе);
	ТекстЗапроса = ТекстЗапроса + ";" + ТекстЗапросаНаВыборкуДанных_ТаблицаСДанными(ОбъектМетаданных, ТипОбъектаКакВЗапросе);
	
	Конструктор = Новый КонструкторЗапроса;
	Конструктор.Текст = ТекстЗапроса;
	Возврат Конструктор.Текст;
	
КонецФункции
Функция ТекстЗапросаНаВыборкуДанных_ТаблицаОписанияДанных(ОбъектМетаданных, ТипОбъектаКакВЗапросе)
	Если Ложь Тогда
		ОбъектМетаданных = Метаданные.Справочники.Справочник1;
	КонецЕсли;
	
	ШаблонЗапроса = 
	"ВЫБРАТЬ
	|	""ДанныеДляВыгрузки_%ИмяТаблицыВЗапросе%"" КАК ИмяТаблицыВЗапросе,
	|	""%ИмяТаблицыВБазе%"" КАК ИмяТаблицыВБазе
	|";
	
	// описание метаданных шапки
	ТекстЗапроса = ШаблонЗапроса;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицыВЗапросе%", "Шапка");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицыВБазе%", ТипОбъектаКакВЗапросе + "." + ОбъектМетаданных.Имя);
	ТекстЗапроса = ТекстЗапроса + " ПОМЕСТИТЬ ВыгрузкаДанных_ОписаниеТаблиц ";
	
	// описание метаданных табличных частей
	СтруктураМетаданных = Новый Структура("ТабличныеЧасти", Новый Массив); 	// У некоторых объектов метаданных нет табличных частей.
	ЗаполнитьЗначенияСвойств(СтруктураМетаданных, ОбъектМетаданных);  		// Ставлю заглушку, чтобы привести все к общей схеме
	Для каждого ТабличнаяЧасть из СтруктураМетаданных.ТабличныеЧасти Цикл
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.ПС
						+ "ОБЪЕДИНИТЬ ВСЕ " + Символы.ПС + Символы.ПС
						+ ШаблонЗапроса;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицыВЗапросе%", ТабличнаяЧасть.Имя);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицыВБазе%", ТипОбъектаКакВЗапросе + "." + ОбъектМетаданных.Имя + ".ТабличнаяЧасть." + ТабличнаяЧасть.Имя);
	КонецЦикла;
	
	Возврат ТекстЗапроса;
	
КонецФункции
Функция ТекстЗапросаНаВыборкуДанных_ТаблицаСДанными(ОбъектМетаданных, ТипОбъектаКакВЗапросе)
	Если Ложь Тогда
		ОбъектМетаданных = Метаданные.Справочники.Справочник1;
	КонецЕсли;
	
	ШаблонЗапроса = 
	"
	|ВЫБРАТЬ
	|	т.*
	|ПОМЕСТИТЬ ДанныеДляВыгрузки_%ИмяТаблицыВЗапросе%
	|ИЗ %ИмяТаблицыВБазе% КАК т
	|;";
	
	// данные шапки
	ТекстЗапроса = ШаблонЗапроса;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицыВЗапросе%", "Шапка");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицыВБазе%", ТипОбъектаКакВЗапросе + "." + ОбъектМетаданных.Имя);
	
	// данные табличных частей
	СтруктураМетаданных = Новый Структура("ТабличныеЧасти", Новый Массив); 	// У некоторых объектов метаданных нет табличных частей.
	ЗаполнитьЗначенияСвойств(СтруктураМетаданных, ОбъектМетаданных);  		// Ставлю заглушку, чтобы привести все к общей схеме
	Если СтруктураМетаданных.ТабличныеЧасти.Количество() = 0 Тогда
		Возврат ТекстЗапроса;
	КонецЕсли;
	ТекстЗапроса = УбратьТабличныеЧастиИзТекстаЗапроса(ТекстЗапроса, СтруктураМетаданных.ТабличныеЧасти);
	
	Для каждого ТабличнаяЧасть из СтруктураМетаданных.ТабличныеЧасти Цикл
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.ПС
						+ ШаблонЗапроса;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицыВЗапросе%", ТабличнаяЧасть.Имя);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицыВБазе%", ТипОбъектаКакВЗапросе + "." + ОбъектМетаданных.Имя + "." + ТабличнаяЧасть.Имя);
	КонецЦикла;
	
	Возврат ТекстЗапроса;
КонецФункции
Функция УбратьТабличныеЧастиИзТекстаЗапроса(ТекстЗапросаПереданный, ТабличныеЧасти)
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапросаПереданный, "ПОМЕСТИТЬ", "//ПОМЕСТИТЬ");
	Конструктор = Новый КонструкторЗапроса;
	Конструктор.Текст = ТекстЗапроса; // преобразуем ВЫБРАТЬ т.* -> ВЫБРАТЬ т.Поле1, т.Поле2 ...
	ТекстЗапроса = Конструктор.Текст;
	
	ТекстЗапросаВозвращаемый = ТекстЗапросаПереданный;
	Для сч = 1 по СтрЧислоСтрок(ТекстЗапроса) Цикл
		Значение = СтрПолучитьСтроку(ТекстЗапроса, сч);
		
		Если СокрЛП(Значение) = "ИЗ" Тогда
			Прервать;
		ИначеЕсли СтрЧислоВхождений(Значение, ".") <> 1 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяТабличнойЧасти = Сред(Значение, Найти(Значение, ".")+1);
		ИмяТабличнойЧасти = СтрЗаменить(ИмяТабличнойЧасти, ",", "");
		
		Если НЕ ТабличныеЧасти.Найти(ИмяТабличнойЧасти) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗапросаВозвращаемый = СтрЗаменить(ТекстЗапросаВозвращаемый, "т.*", Значение + "т.*");
		
	КонецЦикла;
	ТекстЗапросаВозвращаемый = СтрЗаменить(ТекстЗапросаВозвращаемый, ",т.*", " ");
	
	Возврат ТекстЗапросаВозвращаемый;
	
КонецФункции


Функция СгенерироватьМакетСОписаниемДанных() Экспорт
	
	МакетСДанными = Новый ТабличныйДокумент;
	
	Для каждого Строка из ОбъектыКонфигурации Цикл
		Если НЕ Строка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		ТабличныйДокументПоОбъекту = СгенерироватьМакетИзЗапроса(Строка.Запрос);
		МакетСДанными.Вывести(ТабличныйДокументПоОбъекту);
	КонецЦикла;
	
	Возврат МакетСДанными;
КонецФункции
Функция СгенерироватьМакетИзЗапроса(ТекстЗапроса) Экспорт
	МакетПоВсемТаблицамОбъекта = Новый ТабличныйДокумент;
	
	ТаблицыИзЗапроса = ПрочитатьТаблицыИзЗапроса(ТекстЗапроса);
	
	Для каждого КлючИЗначение из ТаблицыИзЗапроса Цикл
		ТаблицаСДанными = КлючИЗначение.Значение;
		ТипВидДанныхТаблицы = КлючИЗначение.Ключ;
		МакетПоОднойТаблице = СгенерироватьМакетДляТаблицы(ТаблицаСДанными, ТипВидДанныхТаблицы);
		
		МакетПоВсемТаблицамОбъекта.Вывести(МакетПоОднойТаблице);
	КонецЦикла;
	
	
	
	Возврат МакетПоВсемТаблицамОбъекта;
КонецФункции

Функция ПрочитатьТаблицыИзЗапроса(ТекстЗапроса)
	
	ТаблицыИзЗапроса = Новый Соответствие;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	Запрос.Текст = "выбрать * из ВыгрузкаДанных_ОписаниеТаблиц как т";
	ОписаниеТаблиц = Запрос.Выполнить().Выгрузить();
	
	Для каждого Строка из ОписаниеТаблиц Цикл
		
		Запрос.Текст = "выбрать * из " + Строка.ИмяТаблицыВЗапросе + " как т";
		ТаблицаИзЗапроса = Запрос.Выполнить().Выгрузить();
		ТаблицыИзЗапроса.Вставить(Строка.ИмяТаблицыВБазе, ТаблицаИзЗапроса);
		
	КонецЦикла;
	
	Возврат ТаблицыИзЗапроса;
	
КонецФункции
Функция СгенерироватьМакетДляТаблицы(ТаблицаСДанными, ТипВидДанныхТаблицы)
	
	МакетПоТаблице = Новый ТабличныйДокумент;
	
	// вывод типа
	МакетПоТаблице.Область(1,1).Текст = "ТИП";
	МакетПоТаблице.Область(1,2).Текст = ТипВидДанныхТаблицы;
	
	// вывод заголовков колонок
	МассивКолонокССоставнымТипом = Новый Массив;
	МассивКолонокТаблицы = ПолучитьКолонкиПоПорядку(ТаблицаСДанными.Колонки, ТипВидДанныхТаблицы);
	Для Каждого Колонка из МассивКолонокТаблицы Цикл
		НомерКолонкиМакета = МакетПоТаблице.ШиринаТаблицы + 1;
		ТипКолонки = ОписаниеТипаСтрокой(Колонка.ТипЗначения);
		
		Если ПустаяСтрока(ТипКолонки) Тогда
			МассивКолонокССоставнымТипом.Добавить(Колонка.Имя);
			ТипКолонки = "["+Колонка.Имя+"_вид]";
		КонецЕсли;
		
		МакетПоТаблице.Область(2, НомерКолонкиМакета).Текст = Колонка.Имя;
		МакетПоТаблице.Область(3, НомерКолонкиМакета).Текст = ТипКолонки;
	КонецЦикла;
	
	
	// вывод заголовков колонок описания типов
	Для каждого ИмяКолонки из МассивКолонокССоставнымТипом Цикл
		НомерКолонкиМакета = МакетПоТаблице.ШиринаТаблицы + 1;
		МакетПоТаблице.Область(2, НомерКолонкиМакета).Текст = ИмяКолонки + "_вид";
	КонецЦикла;
	
	// вывод данных
	Для каждого Строка из ТаблицаСДанными Цикл
		ДобавитьПустуюСтрокуВТабличныйДокумент(МакетПоТаблице);
		Для сч=0 по МассивКолонокТаблицы.ВГраница() Цикл
			Значение = Строка[сч];
			Область = МакетПоТаблице.Область(МакетПоТаблице.ВысотаТаблицы, сч+3);
			Область.Текст = ПолучитьПредставлениеСсылкиДляМакета(Значение);
		КонецЦикла;
		
		сч = 0;
		Для каждого ИмяКолонки из МассивКолонокССоставнымТипом Цикл
			сч = сч + 1;
			Значение = Строка[ИмяКолонки];
			
			Область = МакетПоТаблице.Область(МакетПоТаблице.ВысотаТаблицы, сч + МассивКолонокТаблицы.Количество()+2);
			Область.Текст = ОписаниеТипаСтрокой(ТипЗнч(Значение));
		КонецЦикла;
	КонецЦикла;
	
	ДобавитьПустуюСтрокуВТабличныйДокумент(МакетПоТаблице);
	
	Возврат МакетПоТаблице;
	
КонецФункции

Функция ПолучитьКолонкиПоПорядку(Колонки, ТипВидДанных)
	// TODO расстановка порядка колонок
	МассивКолонок = Новый Массив;
	Для каждого Колонка из Колонки Цикл
		МассивКолонок.Добавить(Колонка);
	КонецЦикла;
	Возврат МассивКолонок;
КонецФункции
Функция ОписаниеТипаСтрокой(вхТип)
	МассивТипов = Новый Массив;
	
	Для каждого Тип из вхТип.Типы() Цикл
		Если Тип = Тип("NULL") Тогда
			Продолжить;
		КонецЕсли;
		МассивТипов.Добавить(Тип);
	КонецЦикла;
	
	Если МассивТипов.Количество() > 1 Тогда
		Возврат "";
	КонецЕсли;
	
	Тип = МассивТипов[0];
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат Строка(Тип);
	КонецЕсли;
	
	ТипСтрокой = ОбъектМетаданных.ПолноеИмя();
	
	Возврат СтрЗаменить(ТипСтрокой, ".", "Ссылка.");
КонецФункции
Функция ПолучитьПредставлениеСсылкиДляМакета(Ссылка)
	// TODO преобразование ссылки
	Возврат Ссылка;
КонецФункции
Процедура ДобавитьПустуюСтрокуВТабличныйДокумент(ТабличныйДокумент)
	ТабличныйДокумент.Область(ТабличныйДокумент.ВысотаТаблицы+1, 1).Текст = "";
КонецПроцедуры
