
Перем мДекоратор;

Функция ПолучитьСписокТестов(Браузер) Экспорт
	
	ВсеТесты = Новый Массив;

	ВсеТесты.Добавить("ТестДолжен_СоздатьПростойСправочник");
	ВсеТесты.Добавить("ТестДолжен_СоздатьГруппуСправочника");
	ВсеТесты.Добавить("ТестДолжен_СоздатьДокумент");
	ВсеТесты.Добавить("ТестДолжен_СоздатьДокументСТабличнойЧастью");
	ВсеТесты.Добавить("ТестДолжен_СоздатьТаблицуЗначений");
	ВсеТесты.Добавить("ТестДолжен_СоздатьЗаписиВНезависимомРегистреСведений");
	ВсеТесты.Добавить("ТестДолжен_СоздатьДвиженияВРегистреНакопления");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьПоискПеречисления");
	ВсеТесты.Добавить("ТестДолжен_ПодставитьВычислитьФормулуВЯчейке");
	ВсеТесты.Добавить("ТестДолжен_СоздатьЗадачуСТабличнойЧастью");
	ВсеТесты.Добавить("ТестДолжен_СоздатьБизесПроцессСТабличнойЧастью");
	ВсеТесты.Добавить("ТестДолжен_СоздатьЭлементПВХ");
	ВсеТесты.Добавить("ТестДолжен_СоздатьСтруктуруИзМакета");
	ВсеТесты.Добавить("ТестДолжен_УстановитьЗначениеКонстантыИзМакета");
	ВсеТесты.Добавить("ТестДолжен_СоздатьВложенныеГруппировки");

	Возврат ВсеТесты;
КонецФункции

Процедура Инициализация(БраузерОбъект) Экспорт
	
	мДекоратор = БраузерОбъект.ПолучитьКонтекст("Декоратор");
	
КонецПроцедуры

Процедура ПередЗапускомНабораТестов() Экспорт
КонецПроцедуры

Процедура ПередЗапускомТеста() Экспорт
	
	НачатьТранзакцию();
	
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	
	Если ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗапускаНабораТестов() Экспорт
КонецПроцедуры

Функция РазрешенСлучайныйПорядокВыполненияТестов() Экспорт
	Возврат Ложь;
КонецФункции




Процедура ТестДолжен_СоздатьПростойСправочник() Экспорт
	
	Данные = мДекоратор.ТестовыеДанные("ПростойСправочник.МассивСозданныхЭлементов");
	
	мДекоратор.ПроверитьРавенство(Данные.Количество(), 1, "Не создалось ни одного элемента");
	мДекоратор.ПроверитьЗаполненность(Данные[0].Наименование, "Не заполненно наименование созданного элемента");
	
КонецПроцедуры

Процедура ТестДолжен_СоздатьГруппуСправочника() Экспорт
	
	Данные = мДекоратор.ТестовыеДанные("ГруппаСправочника.Результат[0].Ссылка");

	мДекоратор.ПроверитьЗаполненность(Данные.Наименование, "Не заполненно наименование созданного элемента");
	мДекоратор.ПроверитьРавенство(Данные.ЭтоГруппа, Истина, "Не совпадает признак группы созданного объекта");
	
КонецПроцедуры

Процедура ТестДолжен_СоздатьДокумент() Экспорт
	
	Данные = мДекоратор.ТестовыеДанные("ПростойДокумент.МассивСозданныхДокументов[0]");
	
	мДекоратор.ПроверитьЗаполненность(Данные, "Не заполнен номер документа");
	
КонецПроцедуры

Процедура ТестДолжен_СоздатьДокументСТабличнойЧастью() Экспорт
	
	Данные = мДекоратор.ТестовыеДанные("ДокументСТабличнойЧастью.Результат[0].Ссылка");
	
	мДекоратор.ПроверитьРавенство(Данные.ТабличнаяЧасть1.Количество(), 1, "Не заполнена табличная часть документа");
	
КонецПроцедуры

Процедура ТестДолжен_СоздатьТаблицуЗначений() Экспорт
	
	Данные = мДекоратор.ТестовыеДанные("ПростаяТаблицаЗначений.СозданнаяТаблица");
	
	мДекоратор.ПроверитьРавенство(Данные.Количество(), 1, "Не совпадает количество строк созданной таблицы");
	
КонецПроцедуры

Процедура ТестДолжен_СоздатьЗаписиВНезависимомРегистреСведений() Экспорт
	
	мДекоратор.ТестовыеДанные("НезависимыйРегистрСведений");
	
	НаборЗаписей = РегистрыСведений.РегистрСведений1.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	мДекоратор.ПроверитьРавенство(НаборЗаписей.Количество(), 2, "Не совпадает количество записей в регистре");
	
КонецПроцедуры

Процедура ТестДолжен_СоздатьДвиженияВРегистреНакопления() Экспорт
	
	Данные = мДекоратор.ТестовыеДанные("РегистрНакопления");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ *
	|ИЗ
	|	РегистрНакопления.РегистрНакопления1 КАК РегистрНакопления1");
	Выборка = Запрос.Выполнить().Выбрать();
	
	мДекоратор.ПроверитьРавенство(Выборка.Количество(), 2, "Не совпадает количество записей в регистре");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПоискПеречисления() Экспорт
	
	Данные = мДекоратор.ТестовыеДанные("ПоискПеречисления.ТаблицаСПереичислением[0][0]");
	
	мДекоратор.ПроверитьТип(Данные, Тип("ПеречислениеСсылка.Перечисление1"), "Не совпадает количество записей в регистре");
	
КонецПроцедуры

Процедура ТестДолжен_ПодставитьВычислитьФормулуВЯчейке() Экспорт
	
	Данные = мДекоратор.ТестовыеДанные("ФормулаВЯчейке.ТаблицаСДанными[0][0]");
	
	мДекоратор.ПроверитьРавенство(Данные, ПланыВидовХарактеристик.ПланВидовХарактеристик1.пвх01, "Не совпадает элемент ПВХ");
	
КонецПроцедуры

Процедура ТестДолжен_СоздатьЗадачуСТабличнойЧастью() Экспорт
	
	Данные = мДекоратор.ТестовыеДанные("Задача.Результат");
	
	мДекоратор.ПроверитьРавенство(Данные.Количество(), 1, "Не создалось ни одной задачи");
	мДекоратор.ПроверитьЗаполненность(Данные[0].Ссылка.Наименование, "Не заполненно наименование созданной задачи");
	мДекоратор.ПроверитьРавенство(Данные[0].Ссылка.ТабличнаяЧасть1.Количество(), 1, "Не заполнена табличная часть задачи");
	
КонецПроцедуры

Процедура ТестДолжен_СоздатьБизесПроцессСТабличнойЧастью() Экспорт
	
	Данные = мДекоратор.ТестовыеДанные("БизнесПроцесс.Результат");
	
	мДекоратор.ПроверитьРавенство(Данные.Количество(), 1, "Не создалось ни одного бизнес процесса");
	мДекоратор.ПроверитьРавенство(Данные[0].Ссылка.ТабличнаяЧасть1.Количество(), 1, "Не заполнена табличная часть бизнес процесса");
	
КонецПроцедуры

Процедура ТестДолжен_СоздатьЭлементПВХ() Экспорт
	
	Данные = мДекоратор.ТестовыеДанные("ЭлементПВХ.МассивСозданныхЭлементов");
	
	мДекоратор.ПроверитьРавенство(Данные.Количество(), 1, "Не создалось ни одного элемента ПВХ");
	мДекоратор.ПроверитьЗаполненность(Данные[0].Наименование, "Не заполненно наименование созданного элемента ПВХ");
	
КонецПроцедуры

Процедура ТестДолжен_СоздатьСтруктуруИзМакета() Экспорт
	
	Данные = мДекоратор.ТестовыеДанные("Структура.СтруктураИзМакета");
	
	мДекоратор.ПроверитьТип(Данные, "Структура", "Значение не является структурой");
	мДекоратор.ПроверитьЗаполненность(Данные.Ключ1, "Не заполняется значение структуры");
	
КонецПроцедуры

Процедура ТестДолжен_УстановитьЗначениеКонстантыИзМакета() Экспорт
	
	Данные = мДекоратор.ТестовыеДанные("Константы");
	
	ЗначениеКонстанты = Константы.Константа1.Получить();
	мДекоратор.ПроверитьЗаполненность(ЗначениеКонстанты, "Константа не заполнена");
	
КонецПроцедуры

Процедура ТестДолжен_СоздатьВложенныеГруппировки() Экспорт
	
	Данные = мДекоратор.ТестовыеДанные("Группировки.Группа1");
	
	мДекоратор.ПроверитьТип(Данные, "Структура", "Не найдена группировка Группа1");
	мДекоратор.ПроверитьТип(Данные.Группа11, "Структура", "Не найдена группировка Группа2");
	мДекоратор.ПроверитьТип(Данные.Группа11.Таблица1, "ТаблицаЗначений", "Не найдена Таблица1");
	
КонецПроцедуры


