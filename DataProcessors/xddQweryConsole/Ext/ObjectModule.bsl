///// Для толстого
Перем ЗапросОтладки Экспорт;

///// Для тонкого
Перем мПустойЦвет;
Перем мЦветШапки;
Перем мЦветОсобогоЗначения;
Перем мШиринаКолонокПоУмолчанию;
Перем мДляСсылокВыводитьГУИД;
Перем мМакет;
Перем мТипВсеСсылки;
Перем мТипЧисло;
Перем мТипСтрока;
Перем мТипДата;
Перем мТипБулево;
Перем мТипРезультатЗапроса;
Перем мТипОписаниеТипов;
Перем мПоместитьПоРусски;
Перем мПоместитьПоАнглийски;
Перем мДлинаРус;
Перем мДлинаАнгл;


///// Для толстого
#Если ТолстыйКлиентОбычноеПриложение Тогда
Процедура ИнициализироватьСписокРазделителей() Экспорт
	
	СписокРазделителей.Очистить();
	
	СписокРазделителей.Добавить(Символы.ВК);
	СписокРазделителей.Добавить(Символы.ВТаб);
	СписокРазделителей.Добавить(Символы.НПП);
	СписокРазделителей.Добавить(Символы.ПС);
	СписокРазделителей.Добавить(Символы.ПФ);
	СписокРазделителей.Добавить(Символы.Таб);
	СписокРазделителей.Добавить(" ");
	
КонецПроцедуры

Функция ОткрытьДляОтладки(Запрос, ПринудительноСохранятьВФайл = Неопределено, УдалитьФайлСпискаВременныхТаблиц = Ложь) Экспорт
	// ВнешниеОбработки.Создать("d:\Distryb\Other\DropBox\1C\Обработки8\КонсольЗапросов.epf").ОткрытьДляОтладки(Запрос)
	Отладка = Истина;	
	ОчиститьСписокТаблиц = УдалитьФайлСпискаВременныхТаблиц;
	Форма = ЭтотОбъект.ПолучитьФорму("Форма");
	ЗапросОтладки = Запрос;
	ИскомыйТекст = ВРег(ЗапросОтладки.Текст);
	
	ПозицияВТексте = Найти(ИскомыйТекст, ";");
	КоличествоПоместить = 0;
	КоличествоУничтожить = 0;
	КоличествоВыборок = 0;
	
	Пока ПозицияВТексте <> 0 Цикл
		
		ПредыдущийЗапрос = Лев(ИскомыйТекст, ПозицияВТексте - 1);
		ПозицияПоместить = Найти(ПредыдущийЗапрос, "ПОМЕСТИТЬ");
		
		Если ПозицияПоместить <> 0 Тогда КоличествоПоместить = КоличествоПоместить + 1;
		КонецЕсли;
		
		ПозицияУничтожить = Найти(ПредыдущийЗапрос, "УНИЧТОЖИТЬ");
		
		Если ПозицияУничтожить <> 0 Тогда КоличествоУничтожить = КоличествоУничтожить + 1;
		КонецЕсли;
		
		Если ПозицияПоместить = 0 И ПозицияУничтожить = 0 Тогда КоличествоВыборок = КоличествоВыборок + 1;
		КонецЕсли;
		
		ПозицияВТексте = ПозицияВТексте + 1;
		ИскомыйТекст = Сред(ИскомыйТекст, ПозицияВТексте);
		ПозицияВТексте = Найти(ИскомыйТекст, ";");
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(СокрЛП(ИскомыйТекст)) Тогда 
		
		ПозицияПоместить = Найти(ИскомыйТекст, "ПОМЕСТИТЬ");
		
		Если ПозицияПоместить <> 0 Тогда КоличествоПоместить = КоличествоПоместить + 1;
		КонецЕсли;
		
		ПозицияУничтожить = Найти(ИскомыйТекст, "УНИЧТОЖИТЬ");
		
		Если ПозицияУничтожить <> 0 Тогда КоличествоУничтожить = КоличествоУничтожить + 1;
		КонецЕсли;
		
		Если ПозицияПоместить = 0 И ПозицияУничтожить = 0 Тогда КоличествоВыборок = КоличествоВыборок + 1;
		КонецЕсли;
		
	КонецЕсли;
		
	СохранятьЗапросДляВоВременныйФайл = ?(КоличествоВыборок > 0, Ложь, Истина);
	
	Если ПринудительноСохранятьВФайл <> Неопределено И 
		ТипЗнч(ПринудительноСохранятьВФайл) = Тип("Булево") Тогда СохранятьЗапросДляВоВременныйФайл = ПринудительноСохранятьВФайл;
	КонецЕсли;
	
	Если СохранятьЗапросДляВоВременныйФайл Тогда 
		
		Форма.Открыть();
		Возврат "Сохранен запрос в файл!";
		
	Иначе
		
		Возврат Форма.ОткрытьМодально();
		
	КонецЕсли;
	
КонецФункции

Функция ПоказатьТаблицу(ПечатныйДокумент, Защита = Истина) Экспорт 
	
	ФормаПросмотраТаблиц = ЭтотОбъект.ПолучитьФорму("ФормаПросмотраТаблиц");
	
	ФормаПросмотраТаблиц.ЭлементыФормы.ПолеТабличногоДокумента.ВставитьОбласть(ПечатныйДокумент.Область());
	
	ФормаПросмотраТаблиц.ЭлементыФормы.ПолеТабличногоДокумента.ОтображатьЗаголовки = Ложь;
	ФормаПросмотраТаблиц.ЭлементыФормы.ПолеТабличногоДокумента.ОтображатьСетку = Ложь;
	ФормаПросмотраТаблиц.ЭлементыФормы.ПолеТабличногоДокумента.Защита = Истина;
	ФормаПросмотраТаблиц.ЭлементыФормы.ПолеТабличногоДокумента.ТолькоПросмотр = Истина;
	ФормаПросмотраТаблиц.ЭлементыФормы.ПолеТабличногоДокумента.ИмяПараметровПечати = ПечатныйДокумент.ИмяПараметровПечати;
	ФормаПросмотраТаблиц.ЭлементыФормы.ПолеТабличногоДокумента.ПовторятьПриПечатиСтроки = ПечатныйДокумент.ПовторятьПриПечатиСтроки;
	
	Возврат ФормаПросмотраТаблиц.ОткрытьМодально();
	
КонецФункции


Функция DBF2ТЗ(ИмяФайлаDBF, Индикатор = Неопределено, УдалятьНедопустимыеСимволы = Истина, СтрокаФильтра = Неопределено) Экспорт
	Перем ВозвращаемоеЗначение;
	
	Если Индикатор = Неопределено Тогда
		Индикатор = Новый Структура("МаксимальноеЗначение, Значение");
	КонецЕсли; 
	
	Таб = Новый XBase(ИмяФайлаDBF,,Истина);
	Кодировка = 866;
	Если ВвестиЧисло(Кодировка, "Кодировка DBF (866 - DOS, 1251 - Win)", 15, 0) Тогда
		Таб.Кодировка = ?(Кодировка = 866
			,КодировкаXBase.OEM
			,КодировкаXBase.ANSI);
	Иначе
		Таб.Кодировка = КодировкаXBase.OEM;
	КонецЕсли;
	Если НЕ Таб.Открыта() Тогда
		ВозвращаемоеЗначение = Неопределено
	Иначе
		Индикатор.МаксимальноеЗначение = Таб.КоличествоЗаписей();
		ТЗ = Новый ТаблицаЗначений();
		Для каждого Колонка Из Таб.Поля Цикл
			ТипПоля = Колонка.Тип;
			
			Если ТипПоля="N" или ТипПоля="F" Тогда
				Тип1С = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(Колонка.Длина, Колонка.Точность));
			ИначеЕсли ТипПоля="D" Тогда
				Тип1С = Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
			ИначеЕсли ТипПоля="L" Тогда
				Тип1С = Новый ОписаниеТипов("Булево");
			Иначе
				Тип1С = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(Колонка.Длина));
			КонецЕсли; 
			
			ТЗ.Колонки.Добавить(Колонка.Имя, Тип1С);
		КонецЦикла; 
		
		Пока НЕ Таб.ВКонце() Цикл
			ОбработкаПрерыванияПользователя();
			Индикатор.Значение = Таб.НомерЗаписи();
			
			Состояние("Преобразование DBF в ТЗ: "
				+ Окр(Индикатор.Значение / Индикатор.МаксимальноеЗначение * 100, 2) +" %" );
			
			ФлагДобавленияСтроки = Истина;
			
			Если СтрокаФильтра <> Неопределено Тогда
				Попытка
					ФлагДобавленияСтроки = Вычислить(СтрокаФильтра);
				Исключение
					ФлагДобавленияСтроки = Ложь;
					Сообщить("DBF2ТЗ - фильтр вызвал ошибку: " + ОписаниеОшибки());
				КонецПопытки; 
			КонецЕсли; 
			
			Если ФлагДобавленияСтроки Тогда
				НовСтрока = ТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, Таб);
				Для каждого Колонка Из ТЗ.Колонки Цикл
					Если Строка(Колонка.ТипЗначения)="Строка" Тогда
						Значение = НовСтрока[Колонка.Имя];
						
						Если УдалятьНедопустимыеСимволы Тогда
							Значение = УдалитьНедопустимыеСимволыXML(Значение);
						КонецЕсли; 
						
						НовСтрока[Колонка.Имя] = СокрП(Значение);
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли;
			Таб.Следующая();
		КонецЦикла; 
		Индикатор.Значение = 0;
		ВозвращаемоеЗначение = ТЗ;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
КонецФункции

Функция УдалитьНедопустимыеСимволыXML(Знач СтрокаДляПроверки) Экспорт
	Позиция = НайтиНедопустимыеСимволыXML(СтрокаДляПроверки);
	Пока Позиция <> 0 Цикл
		СтрокаДляПроверки = Лев(СтрокаДляПроверки, Позиция - 1) + Сред(СтрокаДляПроверки, Позиция + 1);
		Позиция = НайтиНедопустимыеСимволыXML(СтрокаДляПроверки);
	КонецЦикла; 
	Возврат СтрокаДляПроверки;
КонецФункции

Функция ВыбратьФайл(ИмяФайла, мРежимДиалогаВыбораФайла, Фильтр = "*.*|*.*") Экспорт 
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(мРежимДиалогаВыбораФайла);
	ДиалогОткрытияФайла.ПолноеИмяФайла = ИмяФайла;
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ИмяФайла = ДиалогОткрытияФайла.ПолноеИмяФайла;
		Возврат Истина;
	Иначе
		//ИмяФайла = "";
		Возврат Ложь;
	КонецЕсли;
КонецФункции // ()
 
Функция ПолучитьТекстЗапросаДляТЗ(ИмяПараметра, РедактируемаяТаблица) Экспорт
	ТекстЗапроса = "";
	ИмяТаб = "" + ИмяПараметра;
	
	Для каждого Колонка Из РедактируемаяТаблица.Колонки Цикл
		ТекстЗапроса = ТекстЗапроса + Символы.ПС
			+ "    " + ИмяТаб + "." + Колонка.Имя
			+ " КАК " + Колонка.Имя + ",";
	КонецЦикла; 
	
	ТекстЗапроса = "ВЫБРАТЬ "
		+ Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 1) + Символы.ПС
		+ "ПОМЕСТИТЬ " + ИмяТаб + Символы.ПС
		+ "ИЗ &" + ИмяТаб + " КАК " + ИмяТаб + Символы.ПС
		;
	Возврат ТекстЗапроса;
КонецФункции
 
Процедура ПоказатьЗапрос(ТекстЗапроса) Экспорт 
	ФормаКода = ПолучитьФорму("ФормаТекстЗапроса");
	ФормаКода.ЭлементыФормы.КодЗапроса.УстановитьТекст(ТекстЗапроса);
	ФормаКода.Открыть();
КонецПроцедуры

#КонецЕсли


//// Для тонкого

Процедура ПолучитьДеревоИзФайла(АдресХранилища, ДеревоЗапросов, ШиринаКолонокПоУмолчанию) Экспорт
	мШиринаКолонокПоУмолчанию = ШиринаКолонокПоУмолчанию;
	ДеревоИзФайла = ПолучитьДеревоИзХранилища(АдресХранилища);
	Элементы = ДеревоЗапросов.ПолучитьЭлементы();
	Элементы.Очистить();
	ИмеетсяШиринаКолонок = (ДеревоИзФайла.Колонки.Найти("ШиринаКолонок") <> Неопределено);
	ЗаполнитьУровеньПроксиДерева(Элементы, ДеревоИзФайла.Строки, ИмеетсяШиринаКолонок);
	УдалитьИзВременногоХранилища(АдресХранилища);
КонецПроцедуры

Функция ВыполнитьЗапросУ(ТекстЗапроса, ПараметрыЗапроса, СпособВыгрузки, СоставРезультатов, ДляСсылокВыводитьГУИД) Экспорт
	мДляСсылокВыводитьГУИД = ДляСсылокВыводитьГУИД;
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	ИмяПараметраТип = "";
	Для каждого ОписаниеПараметра из ПараметрыЗапроса Цикл
		Значение = ОписаниеПараметра.ЗначениеПараметра;
		Если ОписаниеПараметра.ОсобыйТип Тогда
			Запрос.УстановитьПараметр(ОписаниеПараметра.ИмяПараметра, ЗначениеИзСтрокиВнутр(Значение));
		ИначеЕсли Значение = "ТаблицаЗначений" Тогда
			Запрос.УстановитьПараметр(ОписаниеПараметра.ИмяПараметра, ЗначениеИзСтрокиВнутр(ОписаниеПараметра.ТаблицаЗначений));
		ИначеЕсли ТипЗнч(Значение) = мТипОписаниеТипов Тогда
			ЗаданныеТипы = Значение.Типы();
			Если ЗаданныеТипы.Количество() > 0 Тогда
				Запрос.УстановитьПараметр(ОписаниеПараметра.ИмяПараметра, ЗаданныеТипы[0]);	
			Иначе
				ИмяПараметраТип = ОписаниеПараметра.ИмяПараметра;
				Прервать;
			КонецЕсли;
		Иначе
			Запрос.УстановитьПараметр(ОписаниеПараметра.ИмяПараметра, Значение);
		КонецЕсли;
	КонецЦикла;
	Если НЕ ПустаяСтрока(ИмяПараметраТип) Тогда
		Возврат "Для параметра """ + ИмяПараметраТип + """ не задано значение типа";
	КонецЕсли;
	Попытка
		МассивРезультатов = Запрос.ВыполнитьПакет();
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки;
	Если ДляСсылокВыводитьГУИД Тогда
		мТипВсеСсылки = ПолучитьВсеСсылки();
	КонецЕсли;
	Если СоставРезультатов = 1 Тогда // только запросы
		Моксель = ПолучитьРезультатыЗапросов(МассивРезультатов, СпособВыгрузки);
	ИначеЕсли СоставРезультатов = 2 Тогда // запросы и временные таблицы
		Моксель = ПолучитьРезультатыЗапросов(МассивРезультатов, СпособВыгрузки);
		Моксель.Вывести(ПолучитьРезультатыВременыхТаблиц(Запрос));
	ИначеЕсли СоставРезультатов = 3 Тогда // только временные таблицы
		Моксель = ПолучитьРезультатыВременыхТаблиц(Запрос);
	КонецЕсли;
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	Возврат Моксель;
КонецФункции

Функция ПреобразоватьДерево(ДеревоЗапросов) Экспорт
	Путь = ГенерироватьПуть();
	ЗначениеВФайл(Путь, ПолучитьДеревоЗначенийИзПрокси(ДеревоЗапросов));
	АдресХранилища = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Путь));
	УдалитьФайлы(Путь);
	Возврат АдресХранилища;
КонецФункции

Функция ЗаполнитьПараметрыЗапроса(ДеревоЗапросов, ИдентификаторТекущихДанных) Экспорт
	ТекущиеДанные = ДеревоЗапросов.НайтиПоИдентификатору(ИдентификаторТекущихДанных);
	СтруктураПараметров = Новый Структура();
	ТекстЗапроса = ТекущиеДанные.ТекстЗапроса;
	Если  НЕ ПустаяСтрока(ТекстЗапроса) Тогда
		Запрос = Новый Запрос(ТекстЗапроса);
		Попытка
			НайденныеПараметры = Запрос.НайтиПараметры();
		Исключение
			Возврат ОписаниеОшибки();
		КонецПопытки;
		Для каждого ПараметрЗапроса из НайденныеПараметры Цикл
			СтруктураПараметров.Вставить(ПараметрЗапроса.Имя, ПараметрЗапроса.ТипЗначения);
		КонецЦикла;
	КонецЕсли;
	Возврат СтруктураПараметров;
КонецФункции

Функция ПолучитьВсеСсылки() Экспорт
	Имена = 
	"Справочники
	|Документы
	|Перечисления
	|ПланыВидовХарактеристик
	|ПланыСчетов
	|ПланыВидовРасчета
	|ПланыОбмена
	|БизнесПроцессы
	|Задачи";
	ЧислоИмен = СтрЧислоСтрок(Имена);
	ВсеСсылки = Новый ОписаниеТипов(Новый Массив());
	Для Номер = 1 по ЧислоИмен Цикл
		ВсеСсылки = Новый ОписаниеТипов(ВсеСсылки, Вычислить(СтрПолучитьСтроку(Имена, Номер)).ТипВсеСсылки().Типы());
	КонецЦикла;
	ВсеСсылки = Новый ОписаниеТипов(ВсеСсылки, БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().Типы());
	Возврат ВсеСсылки;
КонецФункции

// -----------------------------

Функция ПолучитьДеревоИзХранилища(АдресХранилища)
	Путь = ГенерироватьПуть();
	ПолучитьИзВременногоХранилища(АдресХранилища).Записать(Путь);
	Дерево = ЗначениеИзФайла(Путь);
	УдалитьФайлы(Путь);
	Возврат Дерево;
КонецФункции

Функция ГенерироватьПуть()
	Возврат КаталогВременныхФайлов() + "QLst-" + Строка(Новый УникальныйИдентификатор()) + ".tmp";
КонецФункции

Функция ПолучитьРезультатыЗапросов(МассивРезультатов, СпособВыгрузки)
	Если МассивРезультатов.Количество() > 1 Тогда
		Моксель = ЗаполнитьМоксельПакета(МассивРезультатов, СпособВыгрузки);
	Иначе
		Моксель = ЗаполнитьМоксель(МассивРезультатов[0], СпособВыгрузки);
	КонецЕсли;
	Возврат Моксель;
КонецФункции

Функция ПолучитьРезультатыВременыхТаблиц(Запрос)
	Моксель = Новый ТабличныйДокумент();
	ОбластьИмяТаблицы = мМакет.ПолучитьОбласть("НазваниеВременнойТаблицы");
	ОбластьСообщение = мМакет.ПолучитьОбласть("ОшибкаВыполнения");
	Моксель.Вывести(мМакет.ПолучитьОбласть("ЗаголовокВременныхТаблиц"));
	МассивВременыхТаблиц = НайтиВременныеТаблицы(Запрос.Текст);
	Если МассивВременыхТаблиц.Количество() > 0 Тогда
		Для Каждого ИмяТаблицы из МассивВременыхТаблиц Цикл
			ОбластьИмяТаблицы.Параметры.ИмяТаблицы = ИмяТаблицы;
			Моксель.Вывести(ОбластьИмяТаблицы);
			Запрос.Текст = "ВЫБРАТЬ * ИЗ " + ИмяТаблицы;
			Попытка
				Результат = Запрос.Выполнить();
			Исключение
				ОбластьСообщение.Параметры.ТекстОшибки = ИнформацияОбОшибке().Описание;
				Моксель.Вывести(ОбластьСообщение);
				Продолжить;
			КонецПопытки;
			Моксель.НачатьГруппуСтрок(ИмяТаблицы, Ложь);
			Моксель.Вывести(ЗаполнитьМоксель(Результат, 1));
			Моксель.ЗакончитьГруппуСтрок();
		КонецЦикла;
	Иначе
		ОбластьСообщение.Параметры.ТекстОшибки = "(нет временных таблиц)";
		Моксель.Вывести(ОбластьСообщение);
	КонецЕсли;
	Возврат Моксель;
КонецФункции

Функция ЗаполнитьМоксельПакета(МассивРезультатов, СпособВыгрузки)
	СловоЗапрос = "Запрос";
	Моксель = Новый ТабличныйДокумент();
	ЗаголовокЗапроса = мМакет.ПолучитьОбласть("ЗаголовокЗапроса");
	ЗапросНаУдаление = мМакет.ПолучитьОбласть("ЗапросНаУдаление");
	ВерхняяГраница = МассивРезультатов.Количество() - 1;
	Для Индекс = 0 по ВерхняяГраница Цикл
		Результат = МассивРезультатов[Индекс];
		НомерЗапроса = Индекс + 1;
		ЗаголовокЗапроса.Параметры.НомерЗапроса = НомерЗапроса;
		Если Результат = Неопределено Тогда
			Моксель.Вывести(ЗаголовокЗапроса);
			Моксель.Вывести(ЗапросНаУдаление);
		Иначе
			Моксель.Вывести(ЗаголовокЗапроса);
			Моксель.НачатьГруппуСтрок(СловоЗапрос + Строка(НомерЗапроса), Ложь);
			Моксель.Вывести(ЗаполнитьМоксель(Результат, СпособВыгрузки));
			Моксель.ЗакончитьГруппуСтрок();
		КонецЕсли;
	КонецЦикла;
	Возврат Моксель;
КонецФункции

Функция ЗаполнитьМоксель(Результат, СпособВыгрузки)
	КолонкиРезультата = Результат.Колонки;
	КоличествоКолонок = КолонкиРезультата.Количество();
	Моксель           = Новый ТабличныйДокумент(); 
	Заголовок         = Новый ТабличныйДокумент();
	Ячейка            = мМакет.ПолучитьОбласть("ЯчейкаРезультата");
	Для каждого Колонка из КолонкиРезультата Цикл
		Ячейка.Параметры.Содержание = Колонка.Имя;
		Заголовок.Присоединить(Ячейка);
	КонецЦикла;
	ОбластьЗаголовка = Заголовок.Область(1, 1, 1, КоличествоКолонок);
	ОбластьЗаголовка.Шрифт = Новый Шрифт(ОбластьЗаголовка.Шрифт, , , Истина);
	ОбластьЗаголовка.ЦветФона = мЦветШапки;
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 3);
	ОбластьЗаголовка.Обвести(Линия, Линия, Линия, Линия);
	Моксель.Вывести(Заголовок);
	Если СпособВыгрузки = 1 Тогда // список
		Моксель.Вывести(ВывестиПлоско(Результат.Выбрать(ОбходРезультатаЗапроса.Прямой), Ячейка, КоличествоКолонок - 1));
	ИначеЕсли СпособВыгрузки = 2 Тогда // дерево
		ВыгрузкаВДерево = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Таблица = Новый ТабличныйДокумент();
		Таблица.НачатьАвтогруппировкуСтрок();
		ВывестиИерархически(ВыгрузкаВДерево.Строки, Ячейка, КоличествоКолонок - 1, Таблица);
		Таблица.ЗакончитьАвтогруппировкуСтрок();
		Таблица.Область(, 1, ,1).АвтоОтступ = 2;
		Моксель.Вывести(Таблица);
	КонецЕсли;
	Моксель.ФиксацияСверху = 1;
	Возврат Моксель;
КонецФункции

Процедура ЗаполнитьУровеньПроксиДерева(КоллекцияПриемник, КоллекцияИсточник, ИмеетсяШиринаКолонок)
	Для каждого СтрокаИсточник из КоллекцияИсточник Цикл
		НоваяСтрока = КоллекцияПриемник.Добавить();
		НоваяСтрока.Запрос         = СтрокаИсточник.Запрос;
		НоваяСтрока.ТекстЗапроса   = СтрокаИсточник.ТекстЗапроса;
		НоваяСтрока.СпособВыгрузки = СтрокаИсточник.СпособВыгрузки;
		НоваяСтрока.ШиринаКолонок  = ?(ИмеетсяШиринаКолонок, СтрокаИсточник.ШиринаКолонок, мШиринаКолонокПоУмолчанию);
		ЗаполнитьПараметры(НоваяСтрока.ПараметрыЗапроса, СтрокаИсточник.ПараметрыЗапроса);
		ЗаполнитьУровеньПроксиДерева(НоваяСтрока.ПолучитьЭлементы(), СтрокаИсточник.Строки, ИмеетсяШиринаКолонок);
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьПараметры(ТаблицаПриемник, ТаблицаИсточник)
	Для каждого СтрокаИсточник из ТаблицаИсточник Цикл
		НоваяСтрока = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточник);
	КонецЦикла;
КонецПроцедуры

Функция ВывестиПлоско(Выборка, Ячейка, ГраничныйИндекс)
	Таблица = Новый ТабличныйДокумент();
	Пока Выборка.Следующий() Цикл
		Запись = Новый ТабличныйДокумент();
		Для Индекс = 0 по ГраничныйИндекс Цикл
			ФорматироватьЯчейку(Ячейка, Выборка[Индекс]);
			Запись.Присоединить(Ячейка);
		КонецЦикла;
		Таблица.Вывести(Запись);
	КонецЦикла;
	Возврат Таблица;
КонецФункции

Функция ПолучитьДеревоЗначенийИзПрокси(ДеревоЗапросов)
	ДеревоИзПрокси    = Новый ДеревоЗначений();
	ОписаниеТипСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеТипЧисло  = Новый ОписаниеТипов("Число");
	ДеревоИзПрокси.Колонки.Добавить("Запрос", ОписаниеТипСтрока);
	ДеревоИзПрокси.Колонки.Добавить("ТекстЗапроса", ОписаниеТипСтрока);
	ДеревоИзПрокси.Колонки.Добавить("ПараметрыЗапроса", Новый ОписаниеТипов("ТаблицаЗначений"));
	ДеревоИзПрокси.Колонки.Добавить("СпособВыгрузки", ОписаниеТипЧисло);
	ДеревоИзПрокси.Колонки.Добавить("ШиринаКолонок", ОписаниеТипЧисло);
	ЗаполнитьУровеньДереваЗначений(ДеревоИзПрокси.Строки, ДеревоЗапросов.ПолучитьЭлементы());
	Возврат ДеревоИзПрокси;
КонецФункции

Процедура ЗаполнитьУровеньДереваЗначений(КоллекцияПриемник, КоллекцияИсточник)
	Для каждого СтрокаИсточник из КоллекцияИсточник Цикл
		НоваяСтрока = КоллекцияПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточник, ,"ПараметрыЗапроса");
		НоваяСтрока.ПараметрыЗапроса = СтрокаИсточник.ПараметрыЗапроса.Выгрузить();
		//ТаблицаПараметров = НоваяСтрока.ПараметрыЗапроса;
		//ТаблицаПараметров.Колонки.Добавить("ИмяПараметра", Новый ОписаниеТипов("Строка"));
		//ТаблицаПараметров.Колонки.Добавить("Примечание", Новый ОписаниеТипов("Строка"));
		//ТаблицаПараметров.Колонки.Добавить("ЗначениеПараметра");
		//ТаблицаПараметров.Колонки.Добавить("ЭтоВыражение", Новый ОписаниеТипов("Булево"));
		//ТаблицаПараметров.Колонки.Добавить("ОсобыйТип", Новый ОписаниеТипов("Булево"));
		//ЗаполнитьПараметры(ТаблицаПараметров, СтрокаИсточник.ПараметрыЗапроса);
		ЗаполнитьУровеньДереваЗначений(НоваяСтрока.Строки, СтрокаИсточник.ПолучитьЭлементы());
	КонецЦикла;
КонецПроцедуры

Процедура ВывестиИерархически(ТекущийУровеньДерева, Ячейка, ГраничныйИндекс, Таблица)
	Для каждого ТекущаяСтрока из ТекущийУровеньДерева Цикл
		Запись = Новый ТабличныйДокумент();
		Для Индекс = 0 по ГраничныйИндекс Цикл
			ФорматироватьЯчейку(Ячейка, ТекущаяСтрока[Индекс]);
			Запись.Присоединить(Ячейка);
		КонецЦикла;
		Таблица.Вывести(Запись, ТекущаяСтрока.Уровень(), ,Ложь);
		Запись = Неопределено;
		ВывестиИерархически(ТекущаяСтрока.Строки, Ячейка, ГраничныйИндекс, Таблица);
	КонецЦикла;
КонецПроцедуры

Процедура ФорматироватьЯчейку(Ячейка, Значение)
	Область = Ячейка.Область();
	Область.ЦветТекста = мПустойЦвет;
	Область.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.Ячейка;
	Если Значение = Null Тогда
		Ячейка.Параметры.Содержание      = "NULL";
		Область.ГоризонтальноеПоложение  = ГоризонтальноеПоложение.Центр;
		Область.ЦветТекста               = мЦветОсобогоЗначения;
		Область.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.БезОбработки;
	ИначеЕсли ТипЗнч(Значение) = мТипЧисло Тогда 
		Ячейка.Параметры.Содержание      = ?(Значение = 0, "0", Значение);
		Область.ГоризонтальноеПоложение  = ГоризонтальноеПоложение.Право;
		Область.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.БезОбработки;
	ИначеЕсли ТипЗнч(Значение) = мТипСтрока Тогда
		Ячейка.Параметры.Содержание      = Значение;
		Область.ГоризонтальноеПоложение  = ГоризонтальноеПоложение.Лево;
		Область.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.БезОбработки;
	ИначеЕсли ТипЗнч(Значение) = мТипБулево Тогда
		Ячейка.Параметры.Содержание      = Значение;
		Область.ГоризонтальноеПоложение  = ГоризонтальноеПоложение.Центр;
		Область.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.БезОбработки;
	ИначеЕсли ТипЗнч(Значение) = мТипРезультатЗапроса Тогда
		Ячейка.Параметры.Содержание     = "<РЕЗУЛЬТАТ ЗАПРОСА>";
		Ячейка.Параметры.Расшифровка    = ЗаполнитьМоксель(Значение, 1);
		Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		Область.ЦветТекста              = мЦветОсобогоЗначения;
	ИначеЕсли мДляСсылокВыводитьГУИД Тогда
		Если мТипВсеСсылки.СодержитТип(ТипЗнч(Значение)) Тогда
			Ячейка.Параметры.Содержание     = Строка(Значение.УникальныйИдентификатор());
			Ячейка.Параметры.Расшифровка    = Значение;
			Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		Иначе
			Ячейка.Параметры.Содержание     = Строка(Значение);
			Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		КонецЕсли;
	Иначе
		Ячейка.Параметры.Содержание     = Строка(Значение);
		Ячейка.Параметры.Расшифровка    = Значение;
		Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	КонецЕсли;
КонецПроцедуры

Функция НайтиВременныеТаблицы(ТекстЗапроса)
	МассивВременыхТаблиц = Новый Массив();
	Текст = ТекстЗапроса;
	ДлинаПоместить = 0;
	Искать = Истина;
	Пока Искать Цикл
		ПозицияПоместить = НайтиСловоПоместить(Текст, ДлинаПоместить);
		Если ПозицияПоместить > 0 Тогда
			Текст = Сред(Текст, ПозицияПоместить + ДлинаПоместить);
			ДлинаТекста = СтрДлина(Текст);
			Для Позиция = 1 по ДлинаТекста Цикл
				Если НЕ ПустаяСтрока(Сред(Текст, Позиция, 1)) Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Текст = Сред(Текст, Позиция);
			ИмяВременнойТаблицы = "";
			ДлинаТекста = СтрДлина(Текст);
			Для Позиция = 1 по ДлинаТекста Цикл
				ОчереднойСимвол = Сред(Текст, Позиция, 1);
				Если ПустаяСтрока(ОчереднойСимвол) Тогда
					Прервать;
				Иначе
					ИмяВременнойТаблицы = ИмяВременнойТаблицы + ОчереднойСимвол;
				КонецЕсли;
			КонецЦикла;
			МассивВременыхТаблиц.Добавить(ИмяВременнойТаблицы);
		Иначе
			Искать = Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат МассивВременыхТаблиц;
КонецФункции

Функция НайтиСловоПоместить(Текст, ДлинаПоместить)
	ТекстДляПоиска = ВРег(Текст);
	ПозицияРус = Найти(ТекстДляПоиска, мПоместитьПоРусски);
	ПозицияАнгл = Найти(ТекстДляПоиска, мПоместитьПоАнглийски);
	Если (ПозицияРус > 0) И (ПозицияАнгл > 0) Тогда
		Если ПозицияРус < ПозицияАнгл Тогда
			Результат = ПозицияРус;
			ДлинаПоместить = мДлинаРус;
		Иначе
			Результат = ПозицияАнгл;
			ДлинаПоместить = мДлинаАнгл;
		КонецЕсли;
	ИначеЕсли (ПозицияРус > 0) И (ПозицияАнгл = 0) Тогда
		Результат = ПозицияРус;
		ДлинаПоместить = мДлинаРус;
	ИначеЕсли (ПозицияРус = 0) И (ПозицияАнгл > 0) Тогда
		Результат = ПозицияАнгл;
		ДлинаПоместить = мДлинаАнгл;
	Иначе
		Результат = 0;
		ДлинаПоместить = 0;
	КонецЕсли;
	Возврат Результат;
КонецФункции

//+ Корус консалтинг. Мочалов Ю.А. 18.10.2015 16:07:27

Функция ПустоеДеревоЗапросовСКолонками()
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("Запрос");
	Дерево.Колонки.Добавить("ТекстЗапроса");
	Дерево.Колонки.Добавить("ПараметрыЗапроса");
	Дерево.Колонки.Добавить("СпособВыгрузки");
	
	Возврат Дерево;
КонецФункции

Функция ПустаяТаблицаПараметровЗапроса()
	
	тПараметры = Новый ТаблицаЗначений;
	тПараметры.Колонки.Добавить("ИмяПараметра");
	тПараметры.Колонки.Добавить("ЭтоВыражение", Новый ОписаниеТипов("Булево"));
	тПараметры.Колонки.Добавить("ЗначениеПараметра");
	тПараметры.Колонки.Добавить("ТаблицаЗначений");
	
	Возврат тПараметры;
КонецФункции

Функция ПоместитьЗапросВДерево(Запрос) Экспорт
	
	Дерево = ПустоеДеревоЗапросовСКолонками();
	
	НоваяСтрока = Дерево.Строки.Добавить();
	НоваяСтрока.Запрос = "Запрос";
	НоваяСтрока.ТекстЗапроса = Запрос.Текст;
	НоваяСтрока.СпособВыгрузки = 1;
	НоваяСтрока.ПараметрыЗапроса = ПустаяТаблицаПараметровЗапроса();
	
	тПараметры = НоваяСтрока.ПараметрыЗапроса;
	
	Для каждого Параметр из Запрос.Параметры Цикл
		НоваяСтрока = тПараметры.Добавить();
		НоваяСтрока.ИмяПараметра = Параметр.Ключ;
		НоваяСтрока.ЗначениеПараметра = Параметр.Значение;
		Если ТипЗнч(Параметр.Значение) = Тип("ТаблицаЗначений") Тогда
			НоваяСтрока.ТаблицаЗначений = ЗначениеВСтрокуВнутр(Параметр.Значение.Скопировать());
		ИначеЕсли ТипЗнч(Параметр.Значение) = Тип("Массив") Тогда
			НоваяСтрока.ЗначениеПараметра = Новый СписокЗначений;
			НоваяСтрока.ЗначениеПараметра.ЗагрузитьЗначения(Параметр.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ккДеревоЗапросов = Дерево;
	
	Возврат ЭтотОбъект;
КонецФункции

Функция СохранитьЗапросВФайл(Запрос, Путь) Экспорт   
	// метод используется для вызова из табло в режиме отладки
	// сохраняет текущий запрос вместе с параметрами в файл, который потом можно открыть в консоли
	// ВнешниеОбработки.Создать("путь_к_обработке\Консоль запросов Toltec ОП и УФ.epf",Ложь).СохранитьЗапросВФайл(Запрос, "G:\Результат.sel")
	
	ПоместитьЗапросВДерево(Запрос);
	
	ЗначениеВФайл(Путь, ккДеревоЗапросов);
	
	Возврат ЭтотОбъект;
КонецФункции


Функция ПоместитьЗапросыИзСКДВДерево(ОтчетНаСКД) Экспорт
	тПараметры = ПустаяТаблицаПараметровЗапроса();
	
	Для каждого Параметр из ОтчетНаСКД.СхемаКомпоновкиДанных.Параметры Цикл
		НоваяСтрока = тПараметры.Добавить();
		НоваяСтрока.ИмяПараметра = Параметр.Имя;
		НоваяСтрока.ЗначениеПараметра = Параметр.Значение;
		Если ТипЗнч(Параметр.Значение) = Тип("ТаблицаЗначений") Тогда
			НоваяСтрока.ТаблицаЗначений = ЗначениеВСтрокуВнутр(Параметр.Значение.Скопировать());
		ИначеЕсли ТипЗнч(Параметр.Значение) = Тип("Массив") Тогда
			НоваяСтрока.ЗначениеПараметра = Новый СписокЗначений;
			НоваяСтрока.ЗначениеПараметра.ЗагрузитьЗначения(Параметр.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Дерево = ПустоеДеревоЗапросовСКолонками();
	
	ДобавитьНаборДанныхВЗапрос(Дерево, ОтчетНаСКД.СхемаКомпоновкиДанных.НаборыДанных, тПараметры);

	ккДеревоЗапросов = Дерево;
	
	Возврат ЭтотОбъект;
КонецФункции

Функция СохранитьЗапросыИзСКДВФайл(ОтчетНаСКД, Путь) Экспорт
	
	ПоместитьЗапросыИзСКДВДерево(ОтчетНаСКД);
	ЗначениеВФайл(Путь, ккДеревоЗапросов);
	
	Возврат ЭтотОбъект;
КонецФункции

Процедура ДобавитьНаборДанныхВЗапрос(СтрокаРодитель, КоллекцияНаборвДанных, тПараметры)
	
	Для каждого НаборДанных из КоллекцияНаборвДанных Цикл
		
		НоваяСтрока = СтрокаРодитель.Строки.Добавить();
		НоваяСтрока.Запрос = НаборДанных.Имя;
		НоваяСтрока.СпособВыгрузки = 1;
		НоваяСтрока.ПараметрыЗапроса = тПараметры.Скопировать();
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
			ДобавитьНаборДанныхВЗапрос(НоваяСтрока, НаборДанных.Элементы, тПараметры);
		Иначе
			НоваяСтрока.ТекстЗапроса = НаборДанных.Запрос;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//- Корус консалтинг. Мочалов Ю.А. 18.10.2015 16:07:27

мПустойЦвет           = Новый Цвет();
мЦветШапки            = WebЦвета.СеребристоСерый; 
мЦветОсобогоЗначения  = WebЦвета.ЦианНейтральный;
мМакет                = ПолучитьМакет("МакетРезультата");
мТипЧисло             = Тип("Число");
мТипСтрока            = Тип("Строка");
мТипДата              = Тип("Дата");
мТипБулево            = Тип("Булево");
мТипРезультатЗапроса  = Тип("РезультатЗапроса");
мТипОписаниеТипов     = Тип("ОписаниеТипов");
мПоместитьПоРусски    = "ПОМЕСТИТЬ";
мПоместитьПоАнглийски = "INTO";
мДлинаРус             = СтрДлина(мПоместитьПоРусски);;
мДлинаАнгл            = СтрДлина(мПоместитьПоАнглийски);


